# source: http://localhost:4466/foxiny/dev
# timestamp: Tue May 28 2019 10:50:19 GMT+0700 (Indochina Time)

type Address implements Node {
  id: ID!
  _version: Int!
  description: String
  region: Region
  name: String
  phone: String
  street: String
  unit: String
  district: String
  city: String
  state: String
  zip: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AddressConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  id: ID
  _version: Int
  description: String
  region: Region
  name: String
  phone: String
  street: String
  unit: String
  district: String
  city: String
  state: String
  zip: String
}

input AddressCreateManyInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input AddressCreateOneInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

"""An edge in a connection."""
type AddressEdge {
  """The item at the end of the edge."""
  node: Address!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  description_ASC
  description_DESC
  region_ASC
  region_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  street_ASC
  street_DESC
  unit_ASC
  unit_DESC
  district_ASC
  district_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AddressPreviousValues {
  id: ID!
  _version: Int!
  description: String
  region: Region
  name: String
  phone: String
  street: String
  unit: String
  district: String
  city: String
  state: String
  zip: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AddressScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  region: Region

  """All values that are not equal to given value."""
  region_not: Region

  """All values that are contained in given list."""
  region_in: [Region!]

  """All values that are not contained in given list."""
  region_not_in: [Region!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  street: String

  """All values that are not equal to given value."""
  street_not: String

  """All values that are contained in given list."""
  street_in: [String!]

  """All values that are not contained in given list."""
  street_not_in: [String!]

  """All values less than the given value."""
  street_lt: String

  """All values less than or equal the given value."""
  street_lte: String

  """All values greater than the given value."""
  street_gt: String

  """All values greater than or equal the given value."""
  street_gte: String

  """All values containing the given string."""
  street_contains: String

  """All values not containing the given string."""
  street_not_contains: String

  """All values starting with the given string."""
  street_starts_with: String

  """All values not starting with the given string."""
  street_not_starts_with: String

  """All values ending with the given string."""
  street_ends_with: String

  """All values not ending with the given string."""
  street_not_ends_with: String
  unit: String

  """All values that are not equal to given value."""
  unit_not: String

  """All values that are contained in given list."""
  unit_in: [String!]

  """All values that are not contained in given list."""
  unit_not_in: [String!]

  """All values less than the given value."""
  unit_lt: String

  """All values less than or equal the given value."""
  unit_lte: String

  """All values greater than the given value."""
  unit_gt: String

  """All values greater than or equal the given value."""
  unit_gte: String

  """All values containing the given string."""
  unit_contains: String

  """All values not containing the given string."""
  unit_not_contains: String

  """All values starting with the given string."""
  unit_starts_with: String

  """All values not starting with the given string."""
  unit_not_starts_with: String

  """All values ending with the given string."""
  unit_ends_with: String

  """All values not ending with the given string."""
  unit_not_ends_with: String
  district: String

  """All values that are not equal to given value."""
  district_not: String

  """All values that are contained in given list."""
  district_in: [String!]

  """All values that are not contained in given list."""
  district_not_in: [String!]

  """All values less than the given value."""
  district_lt: String

  """All values less than or equal the given value."""
  district_lte: String

  """All values greater than the given value."""
  district_gt: String

  """All values greater than or equal the given value."""
  district_gte: String

  """All values containing the given string."""
  district_contains: String

  """All values not containing the given string."""
  district_not_contains: String

  """All values starting with the given string."""
  district_starts_with: String

  """All values not starting with the given string."""
  district_not_starts_with: String

  """All values ending with the given string."""
  district_ends_with: String

  """All values not ending with the given string."""
  district_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
}

input AddressUpdateDataInput {
  _version: Int
  description: String
  region: Region
  name: String
  phone: String
  street: String
  unit: String
  district: String
  city: String
  state: String
  zip: String
}

input AddressUpdateInput {
  _version: Int
  description: String
  region: Region
  name: String
  phone: String
  street: String
  unit: String
  district: String
  city: String
  state: String
  zip: String
}

input AddressUpdateManyDataInput {
  _version: Int
  description: String
  region: Region
  name: String
  phone: String
  street: String
  unit: String
  district: String
  city: String
  state: String
  zip: String
}

input AddressUpdateManyInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  disconnect: [AddressWhereUniqueInput!]
  delete: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueNestedInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  deleteMany: [AddressScalarWhereInput!]
  upsert: [AddressUpsertWithWhereUniqueNestedInput!]
}

input AddressUpdateManyMutationInput {
  _version: Int
  description: String
  region: Region
  name: String
  phone: String
  street: String
  unit: String
  district: String
  city: String
  state: String
  zip: String
}

input AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput!
  data: AddressUpdateManyDataInput!
}

input AddressUpdateOneInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AddressUpdateDataInput
  upsert: AddressUpsertNestedInput
}

input AddressUpdateWithWhereUniqueNestedInput {
  where: AddressWhereUniqueInput!
  data: AddressUpdateDataInput!
}

input AddressUpsertNestedInput {
  update: AddressUpdateDataInput!
  create: AddressCreateInput!
}

input AddressUpsertWithWhereUniqueNestedInput {
  where: AddressWhereUniqueInput!
  update: AddressUpdateDataInput!
  create: AddressCreateInput!
}

input AddressWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  region: Region

  """All values that are not equal to given value."""
  region_not: Region

  """All values that are contained in given list."""
  region_in: [Region!]

  """All values that are not contained in given list."""
  region_not_in: [Region!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  street: String

  """All values that are not equal to given value."""
  street_not: String

  """All values that are contained in given list."""
  street_in: [String!]

  """All values that are not contained in given list."""
  street_not_in: [String!]

  """All values less than the given value."""
  street_lt: String

  """All values less than or equal the given value."""
  street_lte: String

  """All values greater than the given value."""
  street_gt: String

  """All values greater than or equal the given value."""
  street_gte: String

  """All values containing the given string."""
  street_contains: String

  """All values not containing the given string."""
  street_not_contains: String

  """All values starting with the given string."""
  street_starts_with: String

  """All values not starting with the given string."""
  street_not_starts_with: String

  """All values ending with the given string."""
  street_ends_with: String

  """All values not ending with the given string."""
  street_not_ends_with: String
  unit: String

  """All values that are not equal to given value."""
  unit_not: String

  """All values that are contained in given list."""
  unit_in: [String!]

  """All values that are not contained in given list."""
  unit_not_in: [String!]

  """All values less than the given value."""
  unit_lt: String

  """All values less than or equal the given value."""
  unit_lte: String

  """All values greater than the given value."""
  unit_gt: String

  """All values greater than or equal the given value."""
  unit_gte: String

  """All values containing the given string."""
  unit_contains: String

  """All values not containing the given string."""
  unit_not_contains: String

  """All values starting with the given string."""
  unit_starts_with: String

  """All values not starting with the given string."""
  unit_not_starts_with: String

  """All values ending with the given string."""
  unit_ends_with: String

  """All values not ending with the given string."""
  unit_not_ends_with: String
  district: String

  """All values that are not equal to given value."""
  district_not: String

  """All values that are contained in given list."""
  district_in: [String!]

  """All values that are not contained in given list."""
  district_not_in: [String!]

  """All values less than the given value."""
  district_lt: String

  """All values less than or equal the given value."""
  district_lte: String

  """All values greater than the given value."""
  district_gt: String

  """All values greater than or equal the given value."""
  district_gte: String

  """All values containing the given string."""
  district_contains: String

  """All values not containing the given string."""
  district_not_contains: String

  """All values starting with the given string."""
  district_starts_with: String

  """All values not starting with the given string."""
  district_not_starts_with: String

  """All values ending with the given string."""
  district_ends_with: String

  """All values not ending with the given string."""
  district_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateAssignment {
  count: Int!
}

type AggregateBrand {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateDescription {
  count: Int!
}

type AggregateMedia {
  count: Int!
}

type AggregatePermission {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductAttribute {
  count: Int!
}

type AggregateProductAttributeValue {
  count: Int!
}

type AggregateProductOption {
  count: Int!
}

type AggregateProductRetailer {
  count: Int!
}

type AggregateProductTemplate {
  count: Int!
}

type AggregateRetailer {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateSecurityAnswer {
  count: Int!
}

type AggregateSecurityQuestion {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Assignment implements Node {
  id: ID!
  _version: Int!
  user: User
  retailers(where: RetailerWhereInput, orderBy: RetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Retailer!]
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AssignmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssignmentEdge]!
  aggregate: AggregateAssignment!
}

input AssignmentCreateInput {
  id: ID
  _version: Int
  user: UserCreateOneWithoutAssignmentInput
  retailers: RetailerCreateManyWithoutOwnerInput
  roles: RoleCreateManyInput
  permissions: PermissionCreateManyInput
}

input AssignmentCreateOneWithoutRetailersInput {
  create: AssignmentCreateWithoutRetailersInput
  connect: AssignmentWhereUniqueInput
}

input AssignmentCreateOneWithoutUserInput {
  create: AssignmentCreateWithoutUserInput
  connect: AssignmentWhereUniqueInput
}

input AssignmentCreateWithoutRetailersInput {
  id: ID
  _version: Int
  user: UserCreateOneWithoutAssignmentInput
  roles: RoleCreateManyInput
  permissions: PermissionCreateManyInput
}

input AssignmentCreateWithoutUserInput {
  id: ID
  _version: Int
  retailers: RetailerCreateManyWithoutOwnerInput
  roles: RoleCreateManyInput
  permissions: PermissionCreateManyInput
}

"""An edge in a connection."""
type AssignmentEdge {
  """The item at the end of the edge."""
  node: Assignment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AssignmentOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AssignmentPreviousValues {
  id: ID!
  _version: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AssignmentSubscriptionPayload {
  mutation: MutationType!
  node: Assignment
  updatedFields: [String!]
  previousValues: AssignmentPreviousValues
}

input AssignmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AssignmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssignmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssignmentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AssignmentWhereInput
}

input AssignmentUpdateInput {
  _version: Int
  user: UserUpdateOneWithoutAssignmentInput
  retailers: RetailerUpdateManyWithoutOwnerInput
  roles: RoleUpdateManyInput
  permissions: PermissionUpdateManyInput
}

input AssignmentUpdateManyMutationInput {
  _version: Int
}

input AssignmentUpdateOneWithoutRetailersInput {
  create: AssignmentCreateWithoutRetailersInput
  connect: AssignmentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AssignmentUpdateWithoutRetailersDataInput
  upsert: AssignmentUpsertWithoutRetailersInput
}

input AssignmentUpdateOneWithoutUserInput {
  create: AssignmentCreateWithoutUserInput
  connect: AssignmentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AssignmentUpdateWithoutUserDataInput
  upsert: AssignmentUpsertWithoutUserInput
}

input AssignmentUpdateWithoutRetailersDataInput {
  _version: Int
  user: UserUpdateOneWithoutAssignmentInput
  roles: RoleUpdateManyInput
  permissions: PermissionUpdateManyInput
}

input AssignmentUpdateWithoutUserDataInput {
  _version: Int
  retailers: RetailerUpdateManyWithoutOwnerInput
  roles: RoleUpdateManyInput
  permissions: PermissionUpdateManyInput
}

input AssignmentUpsertWithoutRetailersInput {
  update: AssignmentUpdateWithoutRetailersDataInput!
  create: AssignmentCreateWithoutRetailersInput!
}

input AssignmentUpsertWithoutUserInput {
  update: AssignmentUpdateWithoutUserDataInput!
  create: AssignmentCreateWithoutUserInput!
}

input AssignmentWhereInput {
  """Logical AND on all given filters."""
  AND: [AssignmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssignmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssignmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  retailers_every: RetailerWhereInput
  retailers_some: RetailerWhereInput
  retailers_none: RetailerWhereInput
  roles_every: RoleWhereInput
  roles_some: RoleWhereInput
  roles_none: RoleWhereInput
  permissions_every: PermissionWhereInput
  permissions_some: PermissionWhereInput
  permissions_none: PermissionWhereInput
}

input AssignmentWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Brand implements Node {
  id: ID!
  _version: Int!
  brandName: String
  productTemplates(where: ProductTemplateWhereInput, orderBy: ProductTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductTemplate!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BrandConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BrandEdge]!
  aggregate: AggregateBrand!
}

input BrandCreateInput {
  id: ID
  _version: Int
  brandName: String
  productTemplates: ProductTemplateCreateManyWithoutBrandInput
}

input BrandCreateOneWithoutProductTemplatesInput {
  create: BrandCreateWithoutProductTemplatesInput
  connect: BrandWhereUniqueInput
}

input BrandCreateWithoutProductTemplatesInput {
  id: ID
  _version: Int
  brandName: String
}

"""An edge in a connection."""
type BrandEdge {
  """The item at the end of the edge."""
  node: Brand!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BrandOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  brandName_ASC
  brandName_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BrandPreviousValues {
  id: ID!
  _version: Int!
  brandName: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BrandSubscriptionPayload {
  mutation: MutationType!
  node: Brand
  updatedFields: [String!]
  previousValues: BrandPreviousValues
}

input BrandSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BrandSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BrandSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BrandSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BrandWhereInput
}

input BrandUpdateInput {
  _version: Int
  brandName: String
  productTemplates: ProductTemplateUpdateManyWithoutBrandInput
}

input BrandUpdateManyMutationInput {
  _version: Int
  brandName: String
}

input BrandUpdateOneWithoutProductTemplatesInput {
  create: BrandCreateWithoutProductTemplatesInput
  connect: BrandWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BrandUpdateWithoutProductTemplatesDataInput
  upsert: BrandUpsertWithoutProductTemplatesInput
}

input BrandUpdateWithoutProductTemplatesDataInput {
  _version: Int
  brandName: String
}

input BrandUpsertWithoutProductTemplatesInput {
  update: BrandUpdateWithoutProductTemplatesDataInput!
  create: BrandCreateWithoutProductTemplatesInput!
}

input BrandWhereInput {
  """Logical AND on all given filters."""
  AND: [BrandWhereInput!]

  """Logical OR on all given filters."""
  OR: [BrandWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BrandWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  brandName: String

  """All values that are not equal to given value."""
  brandName_not: String

  """All values that are contained in given list."""
  brandName_in: [String!]

  """All values that are not contained in given list."""
  brandName_not_in: [String!]

  """All values less than the given value."""
  brandName_lt: String

  """All values less than or equal the given value."""
  brandName_lte: String

  """All values greater than the given value."""
  brandName_gt: String

  """All values greater than or equal the given value."""
  brandName_gte: String

  """All values containing the given string."""
  brandName_contains: String

  """All values not containing the given string."""
  brandName_not_contains: String

  """All values starting with the given string."""
  brandName_starts_with: String

  """All values not starting with the given string."""
  brandName_not_starts_with: String

  """All values ending with the given string."""
  brandName_ends_with: String

  """All values not ending with the given string."""
  brandName_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  productTemplates_every: ProductTemplateWhereInput
  productTemplates_some: ProductTemplateWhereInput
  productTemplates_none: ProductTemplateWhereInput
}

input BrandWhereUniqueInput {
  id: ID
  brandName: String
}

type Category implements Node {
  id: ID!
  _version: Int!
  name: String
  parentId(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  productTemplates(where: ProductTemplateWhereInput, orderBy: ProductTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductTemplate!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  _version: Int
  name: String
  parentId: CategoryCreateManyInput
  productTemplates: ProductTemplateCreateManyWithoutCategoryInput
}

input CategoryCreateManyInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateManyWithoutProductTemplatesInput {
  create: [CategoryCreateWithoutProductTemplatesInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateWithoutProductTemplatesInput {
  id: ID
  _version: Int
  name: String
  parentId: CategoryCreateManyInput
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CategoryScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateDataInput {
  _version: Int
  name: String
  parentId: CategoryUpdateManyInput
  productTemplates: ProductTemplateUpdateManyWithoutCategoryInput
}

input CategoryUpdateInput {
  _version: Int
  name: String
  parentId: CategoryUpdateManyInput
  productTemplates: ProductTemplateUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyDataInput {
  _version: Int
  name: String
}

input CategoryUpdateManyInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  delete: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueNestedInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  deleteMany: [CategoryScalarWhereInput!]
  upsert: [CategoryUpsertWithWhereUniqueNestedInput!]
}

input CategoryUpdateManyMutationInput {
  _version: Int
  name: String
}

input CategoryUpdateManyWithoutProductTemplatesInput {
  create: [CategoryCreateWithoutProductTemplatesInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  delete: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutProductTemplatesInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  deleteMany: [CategoryScalarWhereInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutProductTemplatesInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyDataInput!
}

input CategoryUpdateWithoutProductTemplatesDataInput {
  _version: Int
  name: String
  parentId: CategoryUpdateManyInput
}

input CategoryUpdateWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateDataInput!
}

input CategoryUpdateWithWhereUniqueWithoutProductTemplatesInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutProductTemplatesDataInput!
}

input CategoryUpsertWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateDataInput!
  create: CategoryCreateInput!
}

input CategoryUpsertWithWhereUniqueWithoutProductTemplatesInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutProductTemplatesDataInput!
  create: CategoryCreateWithoutProductTemplatesInput!
}

input CategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  parentId_every: CategoryWhereInput
  parentId_some: CategoryWhereInput
  parentId_none: CategoryWhereInput
  productTemplates_every: ProductTemplateWhereInput
  productTemplates_some: ProductTemplateWhereInput
  productTemplates_none: ProductTemplateWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

type Description implements Node {
  id: ID!
  _version: Int!
  retailer: Retailer
  product: Product
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DescriptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DescriptionEdge]!
  aggregate: AggregateDescription!
}

input DescriptionCreateInput {
  id: ID
  _version: Int
  description: String
  retailer: RetailerCreateOneInput
  product: ProductCreateOneInput
}

input DescriptionCreateManyInput {
  create: [DescriptionCreateInput!]
  connect: [DescriptionWhereUniqueInput!]
}

"""An edge in a connection."""
type DescriptionEdge {
  """The item at the end of the edge."""
  node: Description!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DescriptionOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DescriptionPreviousValues {
  id: ID!
  _version: Int!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DescriptionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DescriptionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DescriptionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DescriptionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type DescriptionSubscriptionPayload {
  mutation: MutationType!
  node: Description
  updatedFields: [String!]
  previousValues: DescriptionPreviousValues
}

input DescriptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DescriptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DescriptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DescriptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DescriptionWhereInput
}

input DescriptionUpdateDataInput {
  _version: Int
  description: String
  retailer: RetailerUpdateOneInput
  product: ProductUpdateOneInput
}

input DescriptionUpdateInput {
  _version: Int
  description: String
  retailer: RetailerUpdateOneInput
  product: ProductUpdateOneInput
}

input DescriptionUpdateManyDataInput {
  _version: Int
  description: String
}

input DescriptionUpdateManyInput {
  create: [DescriptionCreateInput!]
  connect: [DescriptionWhereUniqueInput!]
  set: [DescriptionWhereUniqueInput!]
  disconnect: [DescriptionWhereUniqueInput!]
  delete: [DescriptionWhereUniqueInput!]
  update: [DescriptionUpdateWithWhereUniqueNestedInput!]
  updateMany: [DescriptionUpdateManyWithWhereNestedInput!]
  deleteMany: [DescriptionScalarWhereInput!]
  upsert: [DescriptionUpsertWithWhereUniqueNestedInput!]
}

input DescriptionUpdateManyMutationInput {
  _version: Int
  description: String
}

input DescriptionUpdateManyWithWhereNestedInput {
  where: DescriptionScalarWhereInput!
  data: DescriptionUpdateManyDataInput!
}

input DescriptionUpdateWithWhereUniqueNestedInput {
  where: DescriptionWhereUniqueInput!
  data: DescriptionUpdateDataInput!
}

input DescriptionUpsertWithWhereUniqueNestedInput {
  where: DescriptionWhereUniqueInput!
  update: DescriptionUpdateDataInput!
  create: DescriptionCreateInput!
}

input DescriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DescriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DescriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DescriptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  retailer: RetailerWhereInput
  product: ProductWhereInput
}

input DescriptionWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Media implements Node {
  id: ID!
  _version: Int!
  name: String
  ext: String
  mime: String
  size: Int
  hash: String
  sha256: String
  uri: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type MediaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MediaEdge]!
  aggregate: AggregateMedia!
}

input MediaCreateInput {
  id: ID
  _version: Int
  name: String
  ext: String
  mime: String
  size: Int
  hash: String
  sha256: String
  uri: String
}

input MediaCreateManyInput {
  create: [MediaCreateInput!]
  connect: [MediaWhereUniqueInput!]
}

input MediaCreateOneInput {
  create: MediaCreateInput
  connect: MediaWhereUniqueInput
}

"""An edge in a connection."""
type MediaEdge {
  """The item at the end of the edge."""
  node: Media!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MediaOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  ext_ASC
  ext_DESC
  mime_ASC
  mime_DESC
  size_ASC
  size_DESC
  hash_ASC
  hash_DESC
  sha256_ASC
  sha256_DESC
  uri_ASC
  uri_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MediaPreviousValues {
  id: ID!
  _version: Int!
  name: String
  ext: String
  mime: String
  size: Int
  hash: String
  sha256: String
  uri: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MediaScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MediaScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediaScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediaScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ext: String

  """All values that are not equal to given value."""
  ext_not: String

  """All values that are contained in given list."""
  ext_in: [String!]

  """All values that are not contained in given list."""
  ext_not_in: [String!]

  """All values less than the given value."""
  ext_lt: String

  """All values less than or equal the given value."""
  ext_lte: String

  """All values greater than the given value."""
  ext_gt: String

  """All values greater than or equal the given value."""
  ext_gte: String

  """All values containing the given string."""
  ext_contains: String

  """All values not containing the given string."""
  ext_not_contains: String

  """All values starting with the given string."""
  ext_starts_with: String

  """All values not starting with the given string."""
  ext_not_starts_with: String

  """All values ending with the given string."""
  ext_ends_with: String

  """All values not ending with the given string."""
  ext_not_ends_with: String
  mime: String

  """All values that are not equal to given value."""
  mime_not: String

  """All values that are contained in given list."""
  mime_in: [String!]

  """All values that are not contained in given list."""
  mime_not_in: [String!]

  """All values less than the given value."""
  mime_lt: String

  """All values less than or equal the given value."""
  mime_lte: String

  """All values greater than the given value."""
  mime_gt: String

  """All values greater than or equal the given value."""
  mime_gte: String

  """All values containing the given string."""
  mime_contains: String

  """All values not containing the given string."""
  mime_not_contains: String

  """All values starting with the given string."""
  mime_starts_with: String

  """All values not starting with the given string."""
  mime_not_starts_with: String

  """All values ending with the given string."""
  mime_ends_with: String

  """All values not ending with the given string."""
  mime_not_ends_with: String
  size: Int

  """All values that are not equal to given value."""
  size_not: Int

  """All values that are contained in given list."""
  size_in: [Int!]

  """All values that are not contained in given list."""
  size_not_in: [Int!]

  """All values less than the given value."""
  size_lt: Int

  """All values less than or equal the given value."""
  size_lte: Int

  """All values greater than the given value."""
  size_gt: Int

  """All values greater than or equal the given value."""
  size_gte: Int
  hash: String

  """All values that are not equal to given value."""
  hash_not: String

  """All values that are contained in given list."""
  hash_in: [String!]

  """All values that are not contained in given list."""
  hash_not_in: [String!]

  """All values less than the given value."""
  hash_lt: String

  """All values less than or equal the given value."""
  hash_lte: String

  """All values greater than the given value."""
  hash_gt: String

  """All values greater than or equal the given value."""
  hash_gte: String

  """All values containing the given string."""
  hash_contains: String

  """All values not containing the given string."""
  hash_not_contains: String

  """All values starting with the given string."""
  hash_starts_with: String

  """All values not starting with the given string."""
  hash_not_starts_with: String

  """All values ending with the given string."""
  hash_ends_with: String

  """All values not ending with the given string."""
  hash_not_ends_with: String
  sha256: String

  """All values that are not equal to given value."""
  sha256_not: String

  """All values that are contained in given list."""
  sha256_in: [String!]

  """All values that are not contained in given list."""
  sha256_not_in: [String!]

  """All values less than the given value."""
  sha256_lt: String

  """All values less than or equal the given value."""
  sha256_lte: String

  """All values greater than the given value."""
  sha256_gt: String

  """All values greater than or equal the given value."""
  sha256_gte: String

  """All values containing the given string."""
  sha256_contains: String

  """All values not containing the given string."""
  sha256_not_contains: String

  """All values starting with the given string."""
  sha256_starts_with: String

  """All values not starting with the given string."""
  sha256_not_starts_with: String

  """All values ending with the given string."""
  sha256_ends_with: String

  """All values not ending with the given string."""
  sha256_not_ends_with: String
  uri: String

  """All values that are not equal to given value."""
  uri_not: String

  """All values that are contained in given list."""
  uri_in: [String!]

  """All values that are not contained in given list."""
  uri_not_in: [String!]

  """All values less than the given value."""
  uri_lt: String

  """All values less than or equal the given value."""
  uri_lte: String

  """All values greater than the given value."""
  uri_gt: String

  """All values greater than or equal the given value."""
  uri_gte: String

  """All values containing the given string."""
  uri_contains: String

  """All values not containing the given string."""
  uri_not_contains: String

  """All values starting with the given string."""
  uri_starts_with: String

  """All values not starting with the given string."""
  uri_not_starts_with: String

  """All values ending with the given string."""
  uri_ends_with: String

  """All values not ending with the given string."""
  uri_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type MediaSubscriptionPayload {
  mutation: MutationType!
  node: Media
  updatedFields: [String!]
  previousValues: MediaPreviousValues
}

input MediaSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MediaSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediaSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediaSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MediaWhereInput
}

input MediaUpdateDataInput {
  _version: Int
  name: String
  ext: String
  mime: String
  size: Int
  hash: String
  sha256: String
  uri: String
}

input MediaUpdateInput {
  _version: Int
  name: String
  ext: String
  mime: String
  size: Int
  hash: String
  sha256: String
  uri: String
}

input MediaUpdateManyDataInput {
  _version: Int
  name: String
  ext: String
  mime: String
  size: Int
  hash: String
  sha256: String
  uri: String
}

input MediaUpdateManyInput {
  create: [MediaCreateInput!]
  connect: [MediaWhereUniqueInput!]
  set: [MediaWhereUniqueInput!]
  disconnect: [MediaWhereUniqueInput!]
  delete: [MediaWhereUniqueInput!]
  update: [MediaUpdateWithWhereUniqueNestedInput!]
  updateMany: [MediaUpdateManyWithWhereNestedInput!]
  deleteMany: [MediaScalarWhereInput!]
  upsert: [MediaUpsertWithWhereUniqueNestedInput!]
}

input MediaUpdateManyMutationInput {
  _version: Int
  name: String
  ext: String
  mime: String
  size: Int
  hash: String
  sha256: String
  uri: String
}

input MediaUpdateManyWithWhereNestedInput {
  where: MediaScalarWhereInput!
  data: MediaUpdateManyDataInput!
}

input MediaUpdateOneInput {
  create: MediaCreateInput
  connect: MediaWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MediaUpdateDataInput
  upsert: MediaUpsertNestedInput
}

input MediaUpdateWithWhereUniqueNestedInput {
  where: MediaWhereUniqueInput!
  data: MediaUpdateDataInput!
}

input MediaUpsertNestedInput {
  update: MediaUpdateDataInput!
  create: MediaCreateInput!
}

input MediaUpsertWithWhereUniqueNestedInput {
  where: MediaWhereUniqueInput!
  update: MediaUpdateDataInput!
  create: MediaCreateInput!
}

input MediaWhereInput {
  """Logical AND on all given filters."""
  AND: [MediaWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ext: String

  """All values that are not equal to given value."""
  ext_not: String

  """All values that are contained in given list."""
  ext_in: [String!]

  """All values that are not contained in given list."""
  ext_not_in: [String!]

  """All values less than the given value."""
  ext_lt: String

  """All values less than or equal the given value."""
  ext_lte: String

  """All values greater than the given value."""
  ext_gt: String

  """All values greater than or equal the given value."""
  ext_gte: String

  """All values containing the given string."""
  ext_contains: String

  """All values not containing the given string."""
  ext_not_contains: String

  """All values starting with the given string."""
  ext_starts_with: String

  """All values not starting with the given string."""
  ext_not_starts_with: String

  """All values ending with the given string."""
  ext_ends_with: String

  """All values not ending with the given string."""
  ext_not_ends_with: String
  mime: String

  """All values that are not equal to given value."""
  mime_not: String

  """All values that are contained in given list."""
  mime_in: [String!]

  """All values that are not contained in given list."""
  mime_not_in: [String!]

  """All values less than the given value."""
  mime_lt: String

  """All values less than or equal the given value."""
  mime_lte: String

  """All values greater than the given value."""
  mime_gt: String

  """All values greater than or equal the given value."""
  mime_gte: String

  """All values containing the given string."""
  mime_contains: String

  """All values not containing the given string."""
  mime_not_contains: String

  """All values starting with the given string."""
  mime_starts_with: String

  """All values not starting with the given string."""
  mime_not_starts_with: String

  """All values ending with the given string."""
  mime_ends_with: String

  """All values not ending with the given string."""
  mime_not_ends_with: String
  size: Int

  """All values that are not equal to given value."""
  size_not: Int

  """All values that are contained in given list."""
  size_in: [Int!]

  """All values that are not contained in given list."""
  size_not_in: [Int!]

  """All values less than the given value."""
  size_lt: Int

  """All values less than or equal the given value."""
  size_lte: Int

  """All values greater than the given value."""
  size_gt: Int

  """All values greater than or equal the given value."""
  size_gte: Int
  hash: String

  """All values that are not equal to given value."""
  hash_not: String

  """All values that are contained in given list."""
  hash_in: [String!]

  """All values that are not contained in given list."""
  hash_not_in: [String!]

  """All values less than the given value."""
  hash_lt: String

  """All values less than or equal the given value."""
  hash_lte: String

  """All values greater than the given value."""
  hash_gt: String

  """All values greater than or equal the given value."""
  hash_gte: String

  """All values containing the given string."""
  hash_contains: String

  """All values not containing the given string."""
  hash_not_contains: String

  """All values starting with the given string."""
  hash_starts_with: String

  """All values not starting with the given string."""
  hash_not_starts_with: String

  """All values ending with the given string."""
  hash_ends_with: String

  """All values not ending with the given string."""
  hash_not_ends_with: String
  sha256: String

  """All values that are not equal to given value."""
  sha256_not: String

  """All values that are contained in given list."""
  sha256_in: [String!]

  """All values that are not contained in given list."""
  sha256_not_in: [String!]

  """All values less than the given value."""
  sha256_lt: String

  """All values less than or equal the given value."""
  sha256_lte: String

  """All values greater than the given value."""
  sha256_gt: String

  """All values greater than or equal the given value."""
  sha256_gte: String

  """All values containing the given string."""
  sha256_contains: String

  """All values not containing the given string."""
  sha256_not_contains: String

  """All values starting with the given string."""
  sha256_starts_with: String

  """All values not starting with the given string."""
  sha256_not_starts_with: String

  """All values ending with the given string."""
  sha256_ends_with: String

  """All values not ending with the given string."""
  sha256_not_ends_with: String
  uri: String

  """All values that are not equal to given value."""
  uri_not: String

  """All values that are contained in given list."""
  uri_in: [String!]

  """All values that are not contained in given list."""
  uri_not_in: [String!]

  """All values less than the given value."""
  uri_lt: String

  """All values less than or equal the given value."""
  uri_lte: String

  """All values greater than the given value."""
  uri_gt: String

  """All values greater than or equal the given value."""
  uri_gte: String

  """All values containing the given string."""
  uri_contains: String

  """All values not containing the given string."""
  uri_not_contains: String

  """All values starting with the given string."""
  uri_starts_with: String

  """All values not starting with the given string."""
  uri_not_starts_with: String

  """All values ending with the given string."""
  uri_ends_with: String

  """All values not ending with the given string."""
  uri_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input MediaWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createSecurityQuestion(data: SecurityQuestionCreateInput!): SecurityQuestion!
  createSecurityAnswer(data: SecurityAnswerCreateInput!): SecurityAnswer!
  createAssignment(data: AssignmentCreateInput!): Assignment!
  createBrand(data: BrandCreateInput!): Brand!
  createProductTemplate(data: ProductTemplateCreateInput!): ProductTemplate!
  createProductAttribute(data: ProductAttributeCreateInput!): ProductAttribute!
  createProductAttributeValue(data: ProductAttributeValueCreateInput!): ProductAttributeValue!
  createProductRetailer(data: ProductRetailerCreateInput!): ProductRetailer!
  createReview(data: ReviewCreateInput!): Review!
  createProductOption(data: ProductOptionCreateInput!): ProductOption!
  createProduct(data: ProductCreateInput!): Product!
  createPermission(data: PermissionCreateInput!): Permission!
  createCategory(data: CategoryCreateInput!): Category!
  createAddress(data: AddressCreateInput!): Address!
  createMedia(data: MediaCreateInput!): Media!
  createRetailer(data: RetailerCreateInput!): Retailer!
  createRole(data: RoleCreateInput!): Role!
  createDescription(data: DescriptionCreateInput!): Description!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateSecurityQuestion(data: SecurityQuestionUpdateInput!, where: SecurityQuestionWhereUniqueInput!): SecurityQuestion
  updateSecurityAnswer(data: SecurityAnswerUpdateInput!, where: SecurityAnswerWhereUniqueInput!): SecurityAnswer
  updateAssignment(data: AssignmentUpdateInput!, where: AssignmentWhereUniqueInput!): Assignment
  updateBrand(data: BrandUpdateInput!, where: BrandWhereUniqueInput!): Brand
  updateProductTemplate(data: ProductTemplateUpdateInput!, where: ProductTemplateWhereUniqueInput!): ProductTemplate
  updateProductAttribute(data: ProductAttributeUpdateInput!, where: ProductAttributeWhereUniqueInput!): ProductAttribute
  updateProductAttributeValue(data: ProductAttributeValueUpdateInput!, where: ProductAttributeValueWhereUniqueInput!): ProductAttributeValue
  updateProductRetailer(data: ProductRetailerUpdateInput!, where: ProductRetailerWhereUniqueInput!): ProductRetailer
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateProductOption(data: ProductOptionUpdateInput!, where: ProductOptionWhereUniqueInput!): ProductOption
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updatePermission(data: PermissionUpdateInput!, where: PermissionWhereUniqueInput!): Permission
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateMedia(data: MediaUpdateInput!, where: MediaWhereUniqueInput!): Media
  updateRetailer(data: RetailerUpdateInput!, where: RetailerWhereUniqueInput!): Retailer
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateDescription(data: DescriptionUpdateInput!, where: DescriptionWhereUniqueInput!): Description
  deleteUser(where: UserWhereUniqueInput!): User
  deleteSecurityQuestion(where: SecurityQuestionWhereUniqueInput!): SecurityQuestion
  deleteSecurityAnswer(where: SecurityAnswerWhereUniqueInput!): SecurityAnswer
  deleteAssignment(where: AssignmentWhereUniqueInput!): Assignment
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteProductTemplate(where: ProductTemplateWhereUniqueInput!): ProductTemplate
  deleteProductAttribute(where: ProductAttributeWhereUniqueInput!): ProductAttribute
  deleteProductAttributeValue(where: ProductAttributeValueWhereUniqueInput!): ProductAttributeValue
  deleteProductRetailer(where: ProductRetailerWhereUniqueInput!): ProductRetailer
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteProductOption(where: ProductOptionWhereUniqueInput!): ProductOption
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deletePermission(where: PermissionWhereUniqueInput!): Permission
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteMedia(where: MediaWhereUniqueInput!): Media
  deleteRetailer(where: RetailerWhereUniqueInput!): Retailer
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteDescription(where: DescriptionWhereUniqueInput!): Description
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertSecurityQuestion(where: SecurityQuestionWhereUniqueInput!, create: SecurityQuestionCreateInput!, update: SecurityQuestionUpdateInput!): SecurityQuestion!
  upsertSecurityAnswer(where: SecurityAnswerWhereUniqueInput!, create: SecurityAnswerCreateInput!, update: SecurityAnswerUpdateInput!): SecurityAnswer!
  upsertAssignment(where: AssignmentWhereUniqueInput!, create: AssignmentCreateInput!, update: AssignmentUpdateInput!): Assignment!
  upsertBrand(where: BrandWhereUniqueInput!, create: BrandCreateInput!, update: BrandUpdateInput!): Brand!
  upsertProductTemplate(where: ProductTemplateWhereUniqueInput!, create: ProductTemplateCreateInput!, update: ProductTemplateUpdateInput!): ProductTemplate!
  upsertProductAttribute(where: ProductAttributeWhereUniqueInput!, create: ProductAttributeCreateInput!, update: ProductAttributeUpdateInput!): ProductAttribute!
  upsertProductAttributeValue(where: ProductAttributeValueWhereUniqueInput!, create: ProductAttributeValueCreateInput!, update: ProductAttributeValueUpdateInput!): ProductAttributeValue!
  upsertProductRetailer(where: ProductRetailerWhereUniqueInput!, create: ProductRetailerCreateInput!, update: ProductRetailerUpdateInput!): ProductRetailer!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  upsertProductOption(where: ProductOptionWhereUniqueInput!, create: ProductOptionCreateInput!, update: ProductOptionUpdateInput!): ProductOption!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertPermission(where: PermissionWhereUniqueInput!, create: PermissionCreateInput!, update: PermissionUpdateInput!): Permission!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  upsertMedia(where: MediaWhereUniqueInput!, create: MediaCreateInput!, update: MediaUpdateInput!): Media!
  upsertRetailer(where: RetailerWhereUniqueInput!, create: RetailerCreateInput!, update: RetailerUpdateInput!): Retailer!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertDescription(where: DescriptionWhereUniqueInput!, create: DescriptionCreateInput!, update: DescriptionUpdateInput!): Description!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManySecurityQuestions(data: SecurityQuestionUpdateManyMutationInput!, where: SecurityQuestionWhereInput): BatchPayload!
  updateManySecurityAnswers(data: SecurityAnswerUpdateManyMutationInput!, where: SecurityAnswerWhereInput): BatchPayload!
  updateManyAssignments(data: AssignmentUpdateManyMutationInput!, where: AssignmentWhereInput): BatchPayload!
  updateManyBrands(data: BrandUpdateManyMutationInput!, where: BrandWhereInput): BatchPayload!
  updateManyProductTemplates(data: ProductTemplateUpdateManyMutationInput!, where: ProductTemplateWhereInput): BatchPayload!
  updateManyProductAttributes(data: ProductAttributeUpdateManyMutationInput!, where: ProductAttributeWhereInput): BatchPayload!
  updateManyProductAttributeValues(data: ProductAttributeValueUpdateManyMutationInput!, where: ProductAttributeValueWhereInput): BatchPayload!
  updateManyProductRetailers(data: ProductRetailerUpdateManyMutationInput!, where: ProductRetailerWhereInput): BatchPayload!
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  updateManyProductOptions(data: ProductOptionUpdateManyMutationInput!, where: ProductOptionWhereInput): BatchPayload!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateManyPermissions(data: PermissionUpdateManyMutationInput!, where: PermissionWhereInput): BatchPayload!
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  updateManyMedias(data: MediaUpdateManyMutationInput!, where: MediaWhereInput): BatchPayload!
  updateManyRetailers(data: RetailerUpdateManyMutationInput!, where: RetailerWhereInput): BatchPayload!
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  updateManyDescriptions(data: DescriptionUpdateManyMutationInput!, where: DescriptionWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManySecurityQuestions(where: SecurityQuestionWhereInput): BatchPayload!
  deleteManySecurityAnswers(where: SecurityAnswerWhereInput): BatchPayload!
  deleteManyAssignments(where: AssignmentWhereInput): BatchPayload!
  deleteManyBrands(where: BrandWhereInput): BatchPayload!
  deleteManyProductTemplates(where: ProductTemplateWhereInput): BatchPayload!
  deleteManyProductAttributes(where: ProductAttributeWhereInput): BatchPayload!
  deleteManyProductAttributeValues(where: ProductAttributeValueWhereInput): BatchPayload!
  deleteManyProductRetailers(where: ProductRetailerWhereInput): BatchPayload!
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  deleteManyProductOptions(where: ProductOptionWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyPermissions(where: PermissionWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  deleteManyMedias(where: MediaWhereInput): BatchPayload!
  deleteManyRetailers(where: RetailerWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  deleteManyDescriptions(where: DescriptionWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Permission implements Node {
  id: ID!
  _version: Int!
  type: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PermissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PermissionEdge]!
  aggregate: AggregatePermission!
}

input PermissionCreateInput {
  id: ID
  _version: Int
  type: String
}

input PermissionCreateManyInput {
  create: [PermissionCreateInput!]
  connect: [PermissionWhereUniqueInput!]
}

"""An edge in a connection."""
type PermissionEdge {
  """The item at the end of the edge."""
  node: Permission!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PermissionOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PermissionPreviousValues {
  id: ID!
  _version: Int!
  type: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PermissionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PermissionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PermissionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PermissionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type PermissionSubscriptionPayload {
  mutation: MutationType!
  node: Permission
  updatedFields: [String!]
  previousValues: PermissionPreviousValues
}

input PermissionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PermissionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PermissionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PermissionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PermissionWhereInput
}

input PermissionUpdateDataInput {
  _version: Int
  type: String
}

input PermissionUpdateInput {
  _version: Int
  type: String
}

input PermissionUpdateManyDataInput {
  _version: Int
  type: String
}

input PermissionUpdateManyInput {
  create: [PermissionCreateInput!]
  connect: [PermissionWhereUniqueInput!]
  set: [PermissionWhereUniqueInput!]
  disconnect: [PermissionWhereUniqueInput!]
  delete: [PermissionWhereUniqueInput!]
  update: [PermissionUpdateWithWhereUniqueNestedInput!]
  updateMany: [PermissionUpdateManyWithWhereNestedInput!]
  deleteMany: [PermissionScalarWhereInput!]
  upsert: [PermissionUpsertWithWhereUniqueNestedInput!]
}

input PermissionUpdateManyMutationInput {
  _version: Int
  type: String
}

input PermissionUpdateManyWithWhereNestedInput {
  where: PermissionScalarWhereInput!
  data: PermissionUpdateManyDataInput!
}

input PermissionUpdateWithWhereUniqueNestedInput {
  where: PermissionWhereUniqueInput!
  data: PermissionUpdateDataInput!
}

input PermissionUpsertWithWhereUniqueNestedInput {
  where: PermissionWhereUniqueInput!
  update: PermissionUpdateDataInput!
  create: PermissionCreateInput!
}

input PermissionWhereInput {
  """Logical AND on all given filters."""
  AND: [PermissionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PermissionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PermissionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input PermissionWhereUniqueInput {
  id: ID
}

enum PrismaDatabase {
  default
}

type Product implements Node {
  id: ID!
  _version: Int!
  productTemplate: ProductTemplate
  productMedias(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  productRetailers(where: ProductRetailerWhereInput, orderBy: ProductRetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductRetailer!]
  sku: String
  options(where: ProductOptionWhereInput, orderBy: ProductOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductOption!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductAttribute implements Node {
  id: ID!
  _version: Int!
  name: String
  values(where: ProductAttributeValueWhereInput, orderBy: ProductAttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductAttributeValue!]
  productOption(where: ProductOptionWhereInput, orderBy: ProductOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductOption!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProductAttributeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductAttributeEdge]!
  aggregate: AggregateProductAttribute!
}

input ProductAttributeCreateInput {
  id: ID
  _version: Int
  name: String
  values: ProductAttributeValueCreateManyWithoutAttributeInput
  productOption: ProductOptionCreateManyWithoutAttributeInput
}

input ProductAttributeCreateManyWithoutValuesInput {
  create: [ProductAttributeCreateWithoutValuesInput!]
  connect: [ProductAttributeWhereUniqueInput!]
}

input ProductAttributeCreateOneWithoutProductOptionInput {
  create: ProductAttributeCreateWithoutProductOptionInput
  connect: ProductAttributeWhereUniqueInput
}

input ProductAttributeCreateWithoutProductOptionInput {
  id: ID
  _version: Int
  name: String
  values: ProductAttributeValueCreateManyWithoutAttributeInput
}

input ProductAttributeCreateWithoutValuesInput {
  id: ID
  _version: Int
  name: String
  productOption: ProductOptionCreateManyWithoutAttributeInput
}

"""An edge in a connection."""
type ProductAttributeEdge {
  """The item at the end of the edge."""
  node: ProductAttribute!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductAttributeOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductAttributePreviousValues {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductAttributeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProductAttributeSubscriptionPayload {
  mutation: MutationType!
  node: ProductAttribute
  updatedFields: [String!]
  previousValues: ProductAttributePreviousValues
}

input ProductAttributeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductAttributeWhereInput
}

input ProductAttributeUpdateInput {
  _version: Int
  name: String
  values: ProductAttributeValueUpdateManyWithoutAttributeInput
  productOption: ProductOptionUpdateManyWithoutAttributeInput
}

input ProductAttributeUpdateManyDataInput {
  _version: Int
  name: String
}

input ProductAttributeUpdateManyMutationInput {
  _version: Int
  name: String
}

input ProductAttributeUpdateManyWithoutValuesInput {
  create: [ProductAttributeCreateWithoutValuesInput!]
  connect: [ProductAttributeWhereUniqueInput!]
  set: [ProductAttributeWhereUniqueInput!]
  disconnect: [ProductAttributeWhereUniqueInput!]
  delete: [ProductAttributeWhereUniqueInput!]
  update: [ProductAttributeUpdateWithWhereUniqueWithoutValuesInput!]
  updateMany: [ProductAttributeUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductAttributeScalarWhereInput!]
  upsert: [ProductAttributeUpsertWithWhereUniqueWithoutValuesInput!]
}

input ProductAttributeUpdateManyWithWhereNestedInput {
  where: ProductAttributeScalarWhereInput!
  data: ProductAttributeUpdateManyDataInput!
}

input ProductAttributeUpdateOneRequiredWithoutProductOptionInput {
  create: ProductAttributeCreateWithoutProductOptionInput
  connect: ProductAttributeWhereUniqueInput
  update: ProductAttributeUpdateWithoutProductOptionDataInput
  upsert: ProductAttributeUpsertWithoutProductOptionInput
}

input ProductAttributeUpdateWithoutProductOptionDataInput {
  _version: Int
  name: String
  values: ProductAttributeValueUpdateManyWithoutAttributeInput
}

input ProductAttributeUpdateWithoutValuesDataInput {
  _version: Int
  name: String
  productOption: ProductOptionUpdateManyWithoutAttributeInput
}

input ProductAttributeUpdateWithWhereUniqueWithoutValuesInput {
  where: ProductAttributeWhereUniqueInput!
  data: ProductAttributeUpdateWithoutValuesDataInput!
}

input ProductAttributeUpsertWithoutProductOptionInput {
  update: ProductAttributeUpdateWithoutProductOptionDataInput!
  create: ProductAttributeCreateWithoutProductOptionInput!
}

input ProductAttributeUpsertWithWhereUniqueWithoutValuesInput {
  where: ProductAttributeWhereUniqueInput!
  update: ProductAttributeUpdateWithoutValuesDataInput!
  create: ProductAttributeCreateWithoutValuesInput!
}

type ProductAttributeValue implements Node {
  id: ID!
  _version: Int!
  attribute(where: ProductAttributeWhereInput, orderBy: ProductAttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductAttribute!]
  name: String
  productOption(where: ProductOptionWhereInput, orderBy: ProductOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductOption!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProductAttributeValueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductAttributeValueEdge]!
  aggregate: AggregateProductAttributeValue!
}

input ProductAttributeValueCreateInput {
  id: ID
  _version: Int
  name: String
  attribute: ProductAttributeCreateManyWithoutValuesInput
  productOption: ProductOptionCreateManyWithoutValueInput
}

input ProductAttributeValueCreateManyWithoutAttributeInput {
  create: [ProductAttributeValueCreateWithoutAttributeInput!]
  connect: [ProductAttributeValueWhereUniqueInput!]
}

input ProductAttributeValueCreateOneWithoutProductOptionInput {
  create: ProductAttributeValueCreateWithoutProductOptionInput
  connect: ProductAttributeValueWhereUniqueInput
}

input ProductAttributeValueCreateWithoutAttributeInput {
  id: ID
  _version: Int
  name: String
  productOption: ProductOptionCreateManyWithoutValueInput
}

input ProductAttributeValueCreateWithoutProductOptionInput {
  id: ID
  _version: Int
  name: String
  attribute: ProductAttributeCreateManyWithoutValuesInput
}

"""An edge in a connection."""
type ProductAttributeValueEdge {
  """The item at the end of the edge."""
  node: ProductAttributeValue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductAttributeValueOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductAttributeValuePreviousValues {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductAttributeValueScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeValueScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeValueScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeValueScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProductAttributeValueSubscriptionPayload {
  mutation: MutationType!
  node: ProductAttributeValue
  updatedFields: [String!]
  previousValues: ProductAttributeValuePreviousValues
}

input ProductAttributeValueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeValueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeValueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeValueSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductAttributeValueWhereInput
}

input ProductAttributeValueUpdateInput {
  _version: Int
  name: String
  attribute: ProductAttributeUpdateManyWithoutValuesInput
  productOption: ProductOptionUpdateManyWithoutValueInput
}

input ProductAttributeValueUpdateManyDataInput {
  _version: Int
  name: String
}

input ProductAttributeValueUpdateManyMutationInput {
  _version: Int
  name: String
}

input ProductAttributeValueUpdateManyWithoutAttributeInput {
  create: [ProductAttributeValueCreateWithoutAttributeInput!]
  connect: [ProductAttributeValueWhereUniqueInput!]
  set: [ProductAttributeValueWhereUniqueInput!]
  disconnect: [ProductAttributeValueWhereUniqueInput!]
  delete: [ProductAttributeValueWhereUniqueInput!]
  update: [ProductAttributeValueUpdateWithWhereUniqueWithoutAttributeInput!]
  updateMany: [ProductAttributeValueUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductAttributeValueScalarWhereInput!]
  upsert: [ProductAttributeValueUpsertWithWhereUniqueWithoutAttributeInput!]
}

input ProductAttributeValueUpdateManyWithWhereNestedInput {
  where: ProductAttributeValueScalarWhereInput!
  data: ProductAttributeValueUpdateManyDataInput!
}

input ProductAttributeValueUpdateOneRequiredWithoutProductOptionInput {
  create: ProductAttributeValueCreateWithoutProductOptionInput
  connect: ProductAttributeValueWhereUniqueInput
  update: ProductAttributeValueUpdateWithoutProductOptionDataInput
  upsert: ProductAttributeValueUpsertWithoutProductOptionInput
}

input ProductAttributeValueUpdateWithoutAttributeDataInput {
  _version: Int
  name: String
  productOption: ProductOptionUpdateManyWithoutValueInput
}

input ProductAttributeValueUpdateWithoutProductOptionDataInput {
  _version: Int
  name: String
  attribute: ProductAttributeUpdateManyWithoutValuesInput
}

input ProductAttributeValueUpdateWithWhereUniqueWithoutAttributeInput {
  where: ProductAttributeValueWhereUniqueInput!
  data: ProductAttributeValueUpdateWithoutAttributeDataInput!
}

input ProductAttributeValueUpsertWithoutProductOptionInput {
  update: ProductAttributeValueUpdateWithoutProductOptionDataInput!
  create: ProductAttributeValueCreateWithoutProductOptionInput!
}

input ProductAttributeValueUpsertWithWhereUniqueWithoutAttributeInput {
  where: ProductAttributeValueWhereUniqueInput!
  update: ProductAttributeValueUpdateWithoutAttributeDataInput!
  create: ProductAttributeValueCreateWithoutAttributeInput!
}

input ProductAttributeValueWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeValueWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeValueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeValueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  attribute_every: ProductAttributeWhereInput
  attribute_some: ProductAttributeWhereInput
  attribute_none: ProductAttributeWhereInput
  productOption_every: ProductOptionWhereInput
  productOption_some: ProductOptionWhereInput
  productOption_none: ProductOptionWhereInput
}

input ProductAttributeValueWhereUniqueInput {
  id: ID
  name: String
}

input ProductAttributeWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  values_every: ProductAttributeValueWhereInput
  values_some: ProductAttributeValueWhereInput
  values_none: ProductAttributeValueWhereInput
  productOption_every: ProductOptionWhereInput
  productOption_some: ProductOptionWhereInput
  productOption_none: ProductOptionWhereInput
}

input ProductAttributeWhereUniqueInput {
  id: ID
  name: String
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  _version: Int
  sku: String
  productTemplate: ProductTemplateCreateOneWithoutProductsInput
  productMedias: MediaCreateManyInput
  productRetailers: ProductRetailerCreateManyWithoutProductInput
  options: ProductOptionCreateManyInput
}

input ProductCreateManyWithoutProductTemplateInput {
  create: [ProductCreateWithoutProductTemplateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutProductRetailersInput {
  create: ProductCreateWithoutProductRetailersInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutProductRetailersInput {
  id: ID
  _version: Int
  sku: String
  productTemplate: ProductTemplateCreateOneWithoutProductsInput
  productMedias: MediaCreateManyInput
  options: ProductOptionCreateManyInput
}

input ProductCreateWithoutProductTemplateInput {
  id: ID
  _version: Int
  sku: String
  productMedias: MediaCreateManyInput
  productRetailers: ProductRetailerCreateManyWithoutProductInput
  options: ProductOptionCreateManyInput
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

type ProductOption implements Node {
  id: ID!
  _version: Int!
  attribute: ProductAttribute!
  value: ProductAttributeValue!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProductOptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductOptionEdge]!
  aggregate: AggregateProductOption!
}

input ProductOptionCreateInput {
  id: ID
  _version: Int
  attribute: ProductAttributeCreateOneWithoutProductOptionInput!
  value: ProductAttributeValueCreateOneWithoutProductOptionInput!
}

input ProductOptionCreateManyInput {
  create: [ProductOptionCreateInput!]
  connect: [ProductOptionWhereUniqueInput!]
}

input ProductOptionCreateManyWithoutAttributeInput {
  create: [ProductOptionCreateWithoutAttributeInput!]
  connect: [ProductOptionWhereUniqueInput!]
}

input ProductOptionCreateManyWithoutValueInput {
  create: [ProductOptionCreateWithoutValueInput!]
  connect: [ProductOptionWhereUniqueInput!]
}

input ProductOptionCreateWithoutAttributeInput {
  id: ID
  _version: Int
  value: ProductAttributeValueCreateOneWithoutProductOptionInput!
}

input ProductOptionCreateWithoutValueInput {
  id: ID
  _version: Int
  attribute: ProductAttributeCreateOneWithoutProductOptionInput!
}

"""An edge in a connection."""
type ProductOptionEdge {
  """The item at the end of the edge."""
  node: ProductOption!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductOptionOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductOptionPreviousValues {
  id: ID!
  _version: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductOptionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductOptionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductOptionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductOptionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProductOptionSubscriptionPayload {
  mutation: MutationType!
  node: ProductOption
  updatedFields: [String!]
  previousValues: ProductOptionPreviousValues
}

input ProductOptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductOptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductOptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductOptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductOptionWhereInput
}

input ProductOptionUpdateDataInput {
  _version: Int
  attribute: ProductAttributeUpdateOneRequiredWithoutProductOptionInput
  value: ProductAttributeValueUpdateOneRequiredWithoutProductOptionInput
}

input ProductOptionUpdateInput {
  _version: Int
  attribute: ProductAttributeUpdateOneRequiredWithoutProductOptionInput
  value: ProductAttributeValueUpdateOneRequiredWithoutProductOptionInput
}

input ProductOptionUpdateManyDataInput {
  _version: Int
}

input ProductOptionUpdateManyInput {
  create: [ProductOptionCreateInput!]
  connect: [ProductOptionWhereUniqueInput!]
  set: [ProductOptionWhereUniqueInput!]
  disconnect: [ProductOptionWhereUniqueInput!]
  delete: [ProductOptionWhereUniqueInput!]
  update: [ProductOptionUpdateWithWhereUniqueNestedInput!]
  updateMany: [ProductOptionUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductOptionScalarWhereInput!]
  upsert: [ProductOptionUpsertWithWhereUniqueNestedInput!]
}

input ProductOptionUpdateManyMutationInput {
  _version: Int
}

input ProductOptionUpdateManyWithoutAttributeInput {
  create: [ProductOptionCreateWithoutAttributeInput!]
  connect: [ProductOptionWhereUniqueInput!]
  set: [ProductOptionWhereUniqueInput!]
  disconnect: [ProductOptionWhereUniqueInput!]
  delete: [ProductOptionWhereUniqueInput!]
  update: [ProductOptionUpdateWithWhereUniqueWithoutAttributeInput!]
  updateMany: [ProductOptionUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductOptionScalarWhereInput!]
  upsert: [ProductOptionUpsertWithWhereUniqueWithoutAttributeInput!]
}

input ProductOptionUpdateManyWithoutValueInput {
  create: [ProductOptionCreateWithoutValueInput!]
  connect: [ProductOptionWhereUniqueInput!]
  set: [ProductOptionWhereUniqueInput!]
  disconnect: [ProductOptionWhereUniqueInput!]
  delete: [ProductOptionWhereUniqueInput!]
  update: [ProductOptionUpdateWithWhereUniqueWithoutValueInput!]
  updateMany: [ProductOptionUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductOptionScalarWhereInput!]
  upsert: [ProductOptionUpsertWithWhereUniqueWithoutValueInput!]
}

input ProductOptionUpdateManyWithWhereNestedInput {
  where: ProductOptionScalarWhereInput!
  data: ProductOptionUpdateManyDataInput!
}

input ProductOptionUpdateWithoutAttributeDataInput {
  _version: Int
  value: ProductAttributeValueUpdateOneRequiredWithoutProductOptionInput
}

input ProductOptionUpdateWithoutValueDataInput {
  _version: Int
  attribute: ProductAttributeUpdateOneRequiredWithoutProductOptionInput
}

input ProductOptionUpdateWithWhereUniqueNestedInput {
  where: ProductOptionWhereUniqueInput!
  data: ProductOptionUpdateDataInput!
}

input ProductOptionUpdateWithWhereUniqueWithoutAttributeInput {
  where: ProductOptionWhereUniqueInput!
  data: ProductOptionUpdateWithoutAttributeDataInput!
}

input ProductOptionUpdateWithWhereUniqueWithoutValueInput {
  where: ProductOptionWhereUniqueInput!
  data: ProductOptionUpdateWithoutValueDataInput!
}

input ProductOptionUpsertWithWhereUniqueNestedInput {
  where: ProductOptionWhereUniqueInput!
  update: ProductOptionUpdateDataInput!
  create: ProductOptionCreateInput!
}

input ProductOptionUpsertWithWhereUniqueWithoutAttributeInput {
  where: ProductOptionWhereUniqueInput!
  update: ProductOptionUpdateWithoutAttributeDataInput!
  create: ProductOptionCreateWithoutAttributeInput!
}

input ProductOptionUpsertWithWhereUniqueWithoutValueInput {
  where: ProductOptionWhereUniqueInput!
  update: ProductOptionUpdateWithoutValueDataInput!
  create: ProductOptionCreateWithoutValueInput!
}

input ProductOptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductOptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductOptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductOptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  attribute: ProductAttributeWhereInput
  value: ProductAttributeValueWhereInput
}

input ProductOptionWhereUniqueInput {
  id: ID
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  sku_ASC
  sku_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  _version: Int!
  sku: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductRetailer implements Node {
  id: ID!
  _version: Int!
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  productMedias(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  product: Product
  retailer: Retailer
  rating: Int
  enabled: Boolean
  approved: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProductRetailerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductRetailerEdge]!
  aggregate: AggregateProductRetailer!
}

input ProductRetailerCreateInput {
  id: ID
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaCreateManyInput
  product: ProductCreateOneWithoutProductRetailersInput
  retailer: RetailerCreateOneWithoutProductsInput
}

input ProductRetailerCreateManyWithoutProductInput {
  create: [ProductRetailerCreateWithoutProductInput!]
  connect: [ProductRetailerWhereUniqueInput!]
}

input ProductRetailerCreateManyWithoutRetailerInput {
  create: [ProductRetailerCreateWithoutRetailerInput!]
  connect: [ProductRetailerWhereUniqueInput!]
}

input ProductRetailerCreateWithoutProductInput {
  id: ID
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaCreateManyInput
  retailer: RetailerCreateOneWithoutProductsInput
}

input ProductRetailerCreateWithoutRetailerInput {
  id: ID
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaCreateManyInput
  product: ProductCreateOneWithoutProductRetailersInput
}

"""An edge in a connection."""
type ProductRetailerEdge {
  """The item at the end of the edge."""
  node: ProductRetailer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductRetailerOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  productName_ASC
  productName_DESC
  listPrice_ASC
  listPrice_DESC
  sellPrice_ASC
  sellPrice_DESC
  stockQuantity_ASC
  stockQuantity_DESC
  inStock_ASC
  inStock_DESC
  rating_ASC
  rating_DESC
  enabled_ASC
  enabled_DESC
  approved_ASC
  approved_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductRetailerPreviousValues {
  id: ID!
  _version: Int!
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductRetailerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductRetailerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductRetailerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductRetailerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  productName: String

  """All values that are not equal to given value."""
  productName_not: String

  """All values that are contained in given list."""
  productName_in: [String!]

  """All values that are not contained in given list."""
  productName_not_in: [String!]

  """All values less than the given value."""
  productName_lt: String

  """All values less than or equal the given value."""
  productName_lte: String

  """All values greater than the given value."""
  productName_gt: String

  """All values greater than or equal the given value."""
  productName_gte: String

  """All values containing the given string."""
  productName_contains: String

  """All values not containing the given string."""
  productName_not_contains: String

  """All values starting with the given string."""
  productName_starts_with: String

  """All values not starting with the given string."""
  productName_not_starts_with: String

  """All values ending with the given string."""
  productName_ends_with: String

  """All values not ending with the given string."""
  productName_not_ends_with: String
  listPrice: Int

  """All values that are not equal to given value."""
  listPrice_not: Int

  """All values that are contained in given list."""
  listPrice_in: [Int!]

  """All values that are not contained in given list."""
  listPrice_not_in: [Int!]

  """All values less than the given value."""
  listPrice_lt: Int

  """All values less than or equal the given value."""
  listPrice_lte: Int

  """All values greater than the given value."""
  listPrice_gt: Int

  """All values greater than or equal the given value."""
  listPrice_gte: Int
  sellPrice: Int

  """All values that are not equal to given value."""
  sellPrice_not: Int

  """All values that are contained in given list."""
  sellPrice_in: [Int!]

  """All values that are not contained in given list."""
  sellPrice_not_in: [Int!]

  """All values less than the given value."""
  sellPrice_lt: Int

  """All values less than or equal the given value."""
  sellPrice_lte: Int

  """All values greater than the given value."""
  sellPrice_gt: Int

  """All values greater than or equal the given value."""
  sellPrice_gte: Int
  stockQuantity: Int

  """All values that are not equal to given value."""
  stockQuantity_not: Int

  """All values that are contained in given list."""
  stockQuantity_in: [Int!]

  """All values that are not contained in given list."""
  stockQuantity_not_in: [Int!]

  """All values less than the given value."""
  stockQuantity_lt: Int

  """All values less than or equal the given value."""
  stockQuantity_lte: Int

  """All values greater than the given value."""
  stockQuantity_gt: Int

  """All values greater than or equal the given value."""
  stockQuantity_gte: Int
  inStock: Boolean

  """All values that are not equal to given value."""
  inStock_not: Boolean
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProductRetailerSubscriptionPayload {
  mutation: MutationType!
  node: ProductRetailer
  updatedFields: [String!]
  previousValues: ProductRetailerPreviousValues
}

input ProductRetailerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductRetailerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductRetailerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductRetailerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductRetailerWhereInput
}

input ProductRetailerUpdateInput {
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaUpdateManyInput
  product: ProductUpdateOneWithoutProductRetailersInput
  retailer: RetailerUpdateOneWithoutProductsInput
}

input ProductRetailerUpdateManyDataInput {
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
}

input ProductRetailerUpdateManyMutationInput {
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
}

input ProductRetailerUpdateManyWithoutProductInput {
  create: [ProductRetailerCreateWithoutProductInput!]
  connect: [ProductRetailerWhereUniqueInput!]
  set: [ProductRetailerWhereUniqueInput!]
  disconnect: [ProductRetailerWhereUniqueInput!]
  delete: [ProductRetailerWhereUniqueInput!]
  update: [ProductRetailerUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ProductRetailerUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductRetailerScalarWhereInput!]
  upsert: [ProductRetailerUpsertWithWhereUniqueWithoutProductInput!]
}

input ProductRetailerUpdateManyWithoutRetailerInput {
  create: [ProductRetailerCreateWithoutRetailerInput!]
  connect: [ProductRetailerWhereUniqueInput!]
  set: [ProductRetailerWhereUniqueInput!]
  disconnect: [ProductRetailerWhereUniqueInput!]
  delete: [ProductRetailerWhereUniqueInput!]
  update: [ProductRetailerUpdateWithWhereUniqueWithoutRetailerInput!]
  updateMany: [ProductRetailerUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductRetailerScalarWhereInput!]
  upsert: [ProductRetailerUpsertWithWhereUniqueWithoutRetailerInput!]
}

input ProductRetailerUpdateManyWithWhereNestedInput {
  where: ProductRetailerScalarWhereInput!
  data: ProductRetailerUpdateManyDataInput!
}

input ProductRetailerUpdateWithoutProductDataInput {
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaUpdateManyInput
  retailer: RetailerUpdateOneWithoutProductsInput
}

input ProductRetailerUpdateWithoutRetailerDataInput {
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaUpdateManyInput
  product: ProductUpdateOneWithoutProductRetailersInput
}

input ProductRetailerUpdateWithWhereUniqueWithoutProductInput {
  where: ProductRetailerWhereUniqueInput!
  data: ProductRetailerUpdateWithoutProductDataInput!
}

input ProductRetailerUpdateWithWhereUniqueWithoutRetailerInput {
  where: ProductRetailerWhereUniqueInput!
  data: ProductRetailerUpdateWithoutRetailerDataInput!
}

input ProductRetailerUpsertWithWhereUniqueWithoutProductInput {
  where: ProductRetailerWhereUniqueInput!
  update: ProductRetailerUpdateWithoutProductDataInput!
  create: ProductRetailerCreateWithoutProductInput!
}

input ProductRetailerUpsertWithWhereUniqueWithoutRetailerInput {
  where: ProductRetailerWhereUniqueInput!
  update: ProductRetailerUpdateWithoutRetailerDataInput!
  create: ProductRetailerCreateWithoutRetailerInput!
}

input ProductRetailerWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductRetailerWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductRetailerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductRetailerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  productName: String

  """All values that are not equal to given value."""
  productName_not: String

  """All values that are contained in given list."""
  productName_in: [String!]

  """All values that are not contained in given list."""
  productName_not_in: [String!]

  """All values less than the given value."""
  productName_lt: String

  """All values less than or equal the given value."""
  productName_lte: String

  """All values greater than the given value."""
  productName_gt: String

  """All values greater than or equal the given value."""
  productName_gte: String

  """All values containing the given string."""
  productName_contains: String

  """All values not containing the given string."""
  productName_not_contains: String

  """All values starting with the given string."""
  productName_starts_with: String

  """All values not starting with the given string."""
  productName_not_starts_with: String

  """All values ending with the given string."""
  productName_ends_with: String

  """All values not ending with the given string."""
  productName_not_ends_with: String
  listPrice: Int

  """All values that are not equal to given value."""
  listPrice_not: Int

  """All values that are contained in given list."""
  listPrice_in: [Int!]

  """All values that are not contained in given list."""
  listPrice_not_in: [Int!]

  """All values less than the given value."""
  listPrice_lt: Int

  """All values less than or equal the given value."""
  listPrice_lte: Int

  """All values greater than the given value."""
  listPrice_gt: Int

  """All values greater than or equal the given value."""
  listPrice_gte: Int
  sellPrice: Int

  """All values that are not equal to given value."""
  sellPrice_not: Int

  """All values that are contained in given list."""
  sellPrice_in: [Int!]

  """All values that are not contained in given list."""
  sellPrice_not_in: [Int!]

  """All values less than the given value."""
  sellPrice_lt: Int

  """All values less than or equal the given value."""
  sellPrice_lte: Int

  """All values greater than the given value."""
  sellPrice_gt: Int

  """All values greater than or equal the given value."""
  sellPrice_gte: Int
  stockQuantity: Int

  """All values that are not equal to given value."""
  stockQuantity_not: Int

  """All values that are contained in given list."""
  stockQuantity_in: [Int!]

  """All values that are not contained in given list."""
  stockQuantity_not_in: [Int!]

  """All values less than the given value."""
  stockQuantity_lt: Int

  """All values less than or equal the given value."""
  stockQuantity_lte: Int

  """All values greater than the given value."""
  stockQuantity_gt: Int

  """All values greater than or equal the given value."""
  stockQuantity_gte: Int
  inStock: Boolean

  """All values that are not equal to given value."""
  inStock_not: Boolean
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  productMedias_every: MediaWhereInput
  productMedias_some: MediaWhereInput
  productMedias_none: MediaWhereInput
  product: ProductWhereInput
  retailer: RetailerWhereInput
}

input ProductRetailerWhereUniqueInput {
  id: ID
  productName: String
}

input ProductScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  sku: String

  """All values that are not equal to given value."""
  sku_not: String

  """All values that are contained in given list."""
  sku_in: [String!]

  """All values that are not contained in given list."""
  sku_not_in: [String!]

  """All values less than the given value."""
  sku_lt: String

  """All values less than or equal the given value."""
  sku_lte: String

  """All values greater than the given value."""
  sku_gt: String

  """All values greater than or equal the given value."""
  sku_gte: String

  """All values containing the given string."""
  sku_contains: String

  """All values not containing the given string."""
  sku_not_contains: String

  """All values starting with the given string."""
  sku_starts_with: String

  """All values not starting with the given string."""
  sku_not_starts_with: String

  """All values ending with the given string."""
  sku_ends_with: String

  """All values not ending with the given string."""
  sku_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

type ProductTemplate implements Node {
  id: ID!
  _version: Int!
  name: String
  briefDescription: String
  category(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  brand: Brand
  descriptions(where: DescriptionWhereInput, orderBy: DescriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Description!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProductTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductTemplateEdge]!
  aggregate: AggregateProductTemplate!
}

input ProductTemplateCreateInput {
  id: ID
  _version: Int
  name: String
  briefDescription: String
  category: CategoryCreateManyWithoutProductTemplatesInput
  products: ProductCreateManyWithoutProductTemplateInput
  brand: BrandCreateOneWithoutProductTemplatesInput
  descriptions: DescriptionCreateManyInput
}

input ProductTemplateCreateManyWithoutBrandInput {
  create: [ProductTemplateCreateWithoutBrandInput!]
  connect: [ProductTemplateWhereUniqueInput!]
}

input ProductTemplateCreateManyWithoutCategoryInput {
  create: [ProductTemplateCreateWithoutCategoryInput!]
  connect: [ProductTemplateWhereUniqueInput!]
}

input ProductTemplateCreateOneWithoutProductsInput {
  create: ProductTemplateCreateWithoutProductsInput
  connect: ProductTemplateWhereUniqueInput
}

input ProductTemplateCreateWithoutBrandInput {
  id: ID
  _version: Int
  name: String
  briefDescription: String
  category: CategoryCreateManyWithoutProductTemplatesInput
  products: ProductCreateManyWithoutProductTemplateInput
  descriptions: DescriptionCreateManyInput
}

input ProductTemplateCreateWithoutCategoryInput {
  id: ID
  _version: Int
  name: String
  briefDescription: String
  products: ProductCreateManyWithoutProductTemplateInput
  brand: BrandCreateOneWithoutProductTemplatesInput
  descriptions: DescriptionCreateManyInput
}

input ProductTemplateCreateWithoutProductsInput {
  id: ID
  _version: Int
  name: String
  briefDescription: String
  category: CategoryCreateManyWithoutProductTemplatesInput
  brand: BrandCreateOneWithoutProductTemplatesInput
  descriptions: DescriptionCreateManyInput
}

"""An edge in a connection."""
type ProductTemplateEdge {
  """The item at the end of the edge."""
  node: ProductTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductTemplateOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  briefDescription_ASC
  briefDescription_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductTemplatePreviousValues {
  id: ID!
  _version: Int!
  name: String
  briefDescription: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  briefDescription: String

  """All values that are not equal to given value."""
  briefDescription_not: String

  """All values that are contained in given list."""
  briefDescription_in: [String!]

  """All values that are not contained in given list."""
  briefDescription_not_in: [String!]

  """All values less than the given value."""
  briefDescription_lt: String

  """All values less than or equal the given value."""
  briefDescription_lte: String

  """All values greater than the given value."""
  briefDescription_gt: String

  """All values greater than or equal the given value."""
  briefDescription_gte: String

  """All values containing the given string."""
  briefDescription_contains: String

  """All values not containing the given string."""
  briefDescription_not_contains: String

  """All values starting with the given string."""
  briefDescription_starts_with: String

  """All values not starting with the given string."""
  briefDescription_not_starts_with: String

  """All values ending with the given string."""
  briefDescription_ends_with: String

  """All values not ending with the given string."""
  briefDescription_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProductTemplateSubscriptionPayload {
  mutation: MutationType!
  node: ProductTemplate
  updatedFields: [String!]
  previousValues: ProductTemplatePreviousValues
}

input ProductTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductTemplateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductTemplateWhereInput
}

input ProductTemplateUpdateInput {
  _version: Int
  name: String
  briefDescription: String
  category: CategoryUpdateManyWithoutProductTemplatesInput
  products: ProductUpdateManyWithoutProductTemplateInput
  brand: BrandUpdateOneWithoutProductTemplatesInput
  descriptions: DescriptionUpdateManyInput
}

input ProductTemplateUpdateManyDataInput {
  _version: Int
  name: String
  briefDescription: String
}

input ProductTemplateUpdateManyMutationInput {
  _version: Int
  name: String
  briefDescription: String
}

input ProductTemplateUpdateManyWithoutBrandInput {
  create: [ProductTemplateCreateWithoutBrandInput!]
  connect: [ProductTemplateWhereUniqueInput!]
  set: [ProductTemplateWhereUniqueInput!]
  disconnect: [ProductTemplateWhereUniqueInput!]
  delete: [ProductTemplateWhereUniqueInput!]
  update: [ProductTemplateUpdateWithWhereUniqueWithoutBrandInput!]
  updateMany: [ProductTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductTemplateScalarWhereInput!]
  upsert: [ProductTemplateUpsertWithWhereUniqueWithoutBrandInput!]
}

input ProductTemplateUpdateManyWithoutCategoryInput {
  create: [ProductTemplateCreateWithoutCategoryInput!]
  connect: [ProductTemplateWhereUniqueInput!]
  set: [ProductTemplateWhereUniqueInput!]
  disconnect: [ProductTemplateWhereUniqueInput!]
  delete: [ProductTemplateWhereUniqueInput!]
  update: [ProductTemplateUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ProductTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductTemplateScalarWhereInput!]
  upsert: [ProductTemplateUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ProductTemplateUpdateManyWithWhereNestedInput {
  where: ProductTemplateScalarWhereInput!
  data: ProductTemplateUpdateManyDataInput!
}

input ProductTemplateUpdateOneWithoutProductsInput {
  create: ProductTemplateCreateWithoutProductsInput
  connect: ProductTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductTemplateUpdateWithoutProductsDataInput
  upsert: ProductTemplateUpsertWithoutProductsInput
}

input ProductTemplateUpdateWithoutBrandDataInput {
  _version: Int
  name: String
  briefDescription: String
  category: CategoryUpdateManyWithoutProductTemplatesInput
  products: ProductUpdateManyWithoutProductTemplateInput
  descriptions: DescriptionUpdateManyInput
}

input ProductTemplateUpdateWithoutCategoryDataInput {
  _version: Int
  name: String
  briefDescription: String
  products: ProductUpdateManyWithoutProductTemplateInput
  brand: BrandUpdateOneWithoutProductTemplatesInput
  descriptions: DescriptionUpdateManyInput
}

input ProductTemplateUpdateWithoutProductsDataInput {
  _version: Int
  name: String
  briefDescription: String
  category: CategoryUpdateManyWithoutProductTemplatesInput
  brand: BrandUpdateOneWithoutProductTemplatesInput
  descriptions: DescriptionUpdateManyInput
}

input ProductTemplateUpdateWithWhereUniqueWithoutBrandInput {
  where: ProductTemplateWhereUniqueInput!
  data: ProductTemplateUpdateWithoutBrandDataInput!
}

input ProductTemplateUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProductTemplateWhereUniqueInput!
  data: ProductTemplateUpdateWithoutCategoryDataInput!
}

input ProductTemplateUpsertWithoutProductsInput {
  update: ProductTemplateUpdateWithoutProductsDataInput!
  create: ProductTemplateCreateWithoutProductsInput!
}

input ProductTemplateUpsertWithWhereUniqueWithoutBrandInput {
  where: ProductTemplateWhereUniqueInput!
  update: ProductTemplateUpdateWithoutBrandDataInput!
  create: ProductTemplateCreateWithoutBrandInput!
}

input ProductTemplateUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProductTemplateWhereUniqueInput!
  update: ProductTemplateUpdateWithoutCategoryDataInput!
  create: ProductTemplateCreateWithoutCategoryInput!
}

input ProductTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  briefDescription: String

  """All values that are not equal to given value."""
  briefDescription_not: String

  """All values that are contained in given list."""
  briefDescription_in: [String!]

  """All values that are not contained in given list."""
  briefDescription_not_in: [String!]

  """All values less than the given value."""
  briefDescription_lt: String

  """All values less than or equal the given value."""
  briefDescription_lte: String

  """All values greater than the given value."""
  briefDescription_gt: String

  """All values greater than or equal the given value."""
  briefDescription_gte: String

  """All values containing the given string."""
  briefDescription_contains: String

  """All values not containing the given string."""
  briefDescription_not_contains: String

  """All values starting with the given string."""
  briefDescription_starts_with: String

  """All values not starting with the given string."""
  briefDescription_not_starts_with: String

  """All values ending with the given string."""
  briefDescription_ends_with: String

  """All values not ending with the given string."""
  briefDescription_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  category_every: CategoryWhereInput
  category_some: CategoryWhereInput
  category_none: CategoryWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  brand: BrandWhereInput
  descriptions_every: DescriptionWhereInput
  descriptions_some: DescriptionWhereInput
  descriptions_none: DescriptionWhereInput
}

input ProductTemplateWhereUniqueInput {
  id: ID
}

input ProductUpdateDataInput {
  _version: Int
  sku: String
  productTemplate: ProductTemplateUpdateOneWithoutProductsInput
  productMedias: MediaUpdateManyInput
  productRetailers: ProductRetailerUpdateManyWithoutProductInput
  options: ProductOptionUpdateManyInput
}

input ProductUpdateInput {
  _version: Int
  sku: String
  productTemplate: ProductTemplateUpdateOneWithoutProductsInput
  productMedias: MediaUpdateManyInput
  productRetailers: ProductRetailerUpdateManyWithoutProductInput
  options: ProductOptionUpdateManyInput
}

input ProductUpdateManyDataInput {
  _version: Int
  sku: String
}

input ProductUpdateManyMutationInput {
  _version: Int
  sku: String
}

input ProductUpdateManyWithoutProductTemplateInput {
  create: [ProductCreateWithoutProductTemplateInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutProductTemplateInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutProductTemplateInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
}

input ProductUpdateOneWithoutProductRetailersInput {
  create: ProductCreateWithoutProductRetailersInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductUpdateWithoutProductRetailersDataInput
  upsert: ProductUpsertWithoutProductRetailersInput
}

input ProductUpdateWithoutProductRetailersDataInput {
  _version: Int
  sku: String
  productTemplate: ProductTemplateUpdateOneWithoutProductsInput
  productMedias: MediaUpdateManyInput
  options: ProductOptionUpdateManyInput
}

input ProductUpdateWithoutProductTemplateDataInput {
  _version: Int
  sku: String
  productMedias: MediaUpdateManyInput
  productRetailers: ProductRetailerUpdateManyWithoutProductInput
  options: ProductOptionUpdateManyInput
}

input ProductUpdateWithWhereUniqueWithoutProductTemplateInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutProductTemplateDataInput!
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithoutProductRetailersInput {
  update: ProductUpdateWithoutProductRetailersDataInput!
  create: ProductCreateWithoutProductRetailersInput!
}

input ProductUpsertWithWhereUniqueWithoutProductTemplateInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutProductTemplateDataInput!
  create: ProductCreateWithoutProductTemplateInput!
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  sku: String

  """All values that are not equal to given value."""
  sku_not: String

  """All values that are contained in given list."""
  sku_in: [String!]

  """All values that are not contained in given list."""
  sku_not_in: [String!]

  """All values less than the given value."""
  sku_lt: String

  """All values less than or equal the given value."""
  sku_lte: String

  """All values greater than the given value."""
  sku_gt: String

  """All values greater than or equal the given value."""
  sku_gte: String

  """All values containing the given string."""
  sku_contains: String

  """All values not containing the given string."""
  sku_not_contains: String

  """All values starting with the given string."""
  sku_starts_with: String

  """All values not starting with the given string."""
  sku_not_starts_with: String

  """All values ending with the given string."""
  sku_ends_with: String

  """All values not ending with the given string."""
  sku_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  productTemplate: ProductTemplateWhereInput
  productMedias_every: MediaWhereInput
  productMedias_some: MediaWhereInput
  productMedias_none: MediaWhereInput
  productRetailers_every: ProductRetailerWhereInput
  productRetailers_some: ProductRetailerWhereInput
  productRetailers_none: ProductRetailerWhereInput
  options_every: ProductOptionWhereInput
  options_some: ProductOptionWhereInput
  options_none: ProductOptionWhereInput
}

input ProductWhereUniqueInput {
  id: ID
  sku: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  securityQuestions(where: SecurityQuestionWhereInput, orderBy: SecurityQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SecurityQuestion]!
  securityAnswers(where: SecurityAnswerWhereInput, orderBy: SecurityAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SecurityAnswer]!
  assignments(where: AssignmentWhereInput, orderBy: AssignmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Assignment]!
  brands(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Brand]!
  productTemplates(where: ProductTemplateWhereInput, orderBy: ProductTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductTemplate]!
  productAttributes(where: ProductAttributeWhereInput, orderBy: ProductAttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductAttribute]!
  productAttributeValues(where: ProductAttributeValueWhereInput, orderBy: ProductAttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductAttributeValue]!
  productRetailers(where: ProductRetailerWhereInput, orderBy: ProductRetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductRetailer]!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  productOptions(where: ProductOptionWhereInput, orderBy: ProductOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductOption]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission]!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  medias(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media]!
  retailers(where: RetailerWhereInput, orderBy: RetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Retailer]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  descriptions(where: DescriptionWhereInput, orderBy: DescriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Description]!
  user(where: UserWhereUniqueInput!): User
  securityQuestion(where: SecurityQuestionWhereUniqueInput!): SecurityQuestion
  securityAnswer(where: SecurityAnswerWhereUniqueInput!): SecurityAnswer
  assignment(where: AssignmentWhereUniqueInput!): Assignment
  brand(where: BrandWhereUniqueInput!): Brand
  productTemplate(where: ProductTemplateWhereUniqueInput!): ProductTemplate
  productAttribute(where: ProductAttributeWhereUniqueInput!): ProductAttribute
  productAttributeValue(where: ProductAttributeValueWhereUniqueInput!): ProductAttributeValue
  productRetailer(where: ProductRetailerWhereUniqueInput!): ProductRetailer
  review(where: ReviewWhereUniqueInput!): Review
  productOption(where: ProductOptionWhereUniqueInput!): ProductOption
  product(where: ProductWhereUniqueInput!): Product
  permission(where: PermissionWhereUniqueInput!): Permission
  category(where: CategoryWhereUniqueInput!): Category
  address(where: AddressWhereUniqueInput!): Address
  media(where: MediaWhereUniqueInput!): Media
  retailer(where: RetailerWhereUniqueInput!): Retailer
  role(where: RoleWhereUniqueInput!): Role
  description(where: DescriptionWhereUniqueInput!): Description
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  securityQuestionsConnection(where: SecurityQuestionWhereInput, orderBy: SecurityQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SecurityQuestionConnection!
  securityAnswersConnection(where: SecurityAnswerWhereInput, orderBy: SecurityAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SecurityAnswerConnection!
  assignmentsConnection(where: AssignmentWhereInput, orderBy: AssignmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AssignmentConnection!
  brandsConnection(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BrandConnection!
  productTemplatesConnection(where: ProductTemplateWhereInput, orderBy: ProductTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductTemplateConnection!
  productAttributesConnection(where: ProductAttributeWhereInput, orderBy: ProductAttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductAttributeConnection!
  productAttributeValuesConnection(where: ProductAttributeValueWhereInput, orderBy: ProductAttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductAttributeValueConnection!
  productRetailersConnection(where: ProductRetailerWhereInput, orderBy: ProductRetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductRetailerConnection!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  productOptionsConnection(where: ProductOptionWhereInput, orderBy: ProductOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductOptionConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  permissionsConnection(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PermissionConnection!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  mediasConnection(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MediaConnection!
  retailersConnection(where: RetailerWhereInput, orderBy: RetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RetailerConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  descriptionsConnection(where: DescriptionWhereInput, orderBy: DescriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DescriptionConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Region {
  VI
  ZH
  JA
  KO
}

type Retailer implements Node {
  id: ID!
  _version: Int!
  owner: Assignment
  businessMedia: Media
  businessName: String
  businessAddress: Address
  businessPhone: String
  businessEmail: String
  products(where: ProductRetailerWhereInput, orderBy: ProductRetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductRetailer!]
  businessLicense: String
  enabled: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type RetailerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RetailerEdge]!
  aggregate: AggregateRetailer!
}

input RetailerCreateInput {
  id: ID
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLicense: String
  enabled: Boolean
  owner: AssignmentCreateOneWithoutRetailersInput
  businessMedia: MediaCreateOneInput
  businessAddress: AddressCreateOneInput
  products: ProductRetailerCreateManyWithoutRetailerInput
}

input RetailerCreateManyWithoutOwnerInput {
  create: [RetailerCreateWithoutOwnerInput!]
  connect: [RetailerWhereUniqueInput!]
}

input RetailerCreateOneInput {
  create: RetailerCreateInput
  connect: RetailerWhereUniqueInput
}

input RetailerCreateOneWithoutProductsInput {
  create: RetailerCreateWithoutProductsInput
  connect: RetailerWhereUniqueInput
}

input RetailerCreateWithoutOwnerInput {
  id: ID
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLicense: String
  enabled: Boolean
  businessMedia: MediaCreateOneInput
  businessAddress: AddressCreateOneInput
  products: ProductRetailerCreateManyWithoutRetailerInput
}

input RetailerCreateWithoutProductsInput {
  id: ID
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLicense: String
  enabled: Boolean
  owner: AssignmentCreateOneWithoutRetailersInput
  businessMedia: MediaCreateOneInput
  businessAddress: AddressCreateOneInput
}

"""An edge in a connection."""
type RetailerEdge {
  """The item at the end of the edge."""
  node: Retailer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RetailerOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  businessName_ASC
  businessName_DESC
  businessPhone_ASC
  businessPhone_DESC
  businessEmail_ASC
  businessEmail_DESC
  businessLicense_ASC
  businessLicense_DESC
  enabled_ASC
  enabled_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RetailerPreviousValues {
  id: ID!
  _version: Int!
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLicense: String
  enabled: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RetailerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RetailerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RetailerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RetailerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  businessName: String

  """All values that are not equal to given value."""
  businessName_not: String

  """All values that are contained in given list."""
  businessName_in: [String!]

  """All values that are not contained in given list."""
  businessName_not_in: [String!]

  """All values less than the given value."""
  businessName_lt: String

  """All values less than or equal the given value."""
  businessName_lte: String

  """All values greater than the given value."""
  businessName_gt: String

  """All values greater than or equal the given value."""
  businessName_gte: String

  """All values containing the given string."""
  businessName_contains: String

  """All values not containing the given string."""
  businessName_not_contains: String

  """All values starting with the given string."""
  businessName_starts_with: String

  """All values not starting with the given string."""
  businessName_not_starts_with: String

  """All values ending with the given string."""
  businessName_ends_with: String

  """All values not ending with the given string."""
  businessName_not_ends_with: String
  businessPhone: String

  """All values that are not equal to given value."""
  businessPhone_not: String

  """All values that are contained in given list."""
  businessPhone_in: [String!]

  """All values that are not contained in given list."""
  businessPhone_not_in: [String!]

  """All values less than the given value."""
  businessPhone_lt: String

  """All values less than or equal the given value."""
  businessPhone_lte: String

  """All values greater than the given value."""
  businessPhone_gt: String

  """All values greater than or equal the given value."""
  businessPhone_gte: String

  """All values containing the given string."""
  businessPhone_contains: String

  """All values not containing the given string."""
  businessPhone_not_contains: String

  """All values starting with the given string."""
  businessPhone_starts_with: String

  """All values not starting with the given string."""
  businessPhone_not_starts_with: String

  """All values ending with the given string."""
  businessPhone_ends_with: String

  """All values not ending with the given string."""
  businessPhone_not_ends_with: String
  businessEmail: String

  """All values that are not equal to given value."""
  businessEmail_not: String

  """All values that are contained in given list."""
  businessEmail_in: [String!]

  """All values that are not contained in given list."""
  businessEmail_not_in: [String!]

  """All values less than the given value."""
  businessEmail_lt: String

  """All values less than or equal the given value."""
  businessEmail_lte: String

  """All values greater than the given value."""
  businessEmail_gt: String

  """All values greater than or equal the given value."""
  businessEmail_gte: String

  """All values containing the given string."""
  businessEmail_contains: String

  """All values not containing the given string."""
  businessEmail_not_contains: String

  """All values starting with the given string."""
  businessEmail_starts_with: String

  """All values not starting with the given string."""
  businessEmail_not_starts_with: String

  """All values ending with the given string."""
  businessEmail_ends_with: String

  """All values not ending with the given string."""
  businessEmail_not_ends_with: String
  businessLicense: String

  """All values that are not equal to given value."""
  businessLicense_not: String

  """All values that are contained in given list."""
  businessLicense_in: [String!]

  """All values that are not contained in given list."""
  businessLicense_not_in: [String!]

  """All values less than the given value."""
  businessLicense_lt: String

  """All values less than or equal the given value."""
  businessLicense_lte: String

  """All values greater than the given value."""
  businessLicense_gt: String

  """All values greater than or equal the given value."""
  businessLicense_gte: String

  """All values containing the given string."""
  businessLicense_contains: String

  """All values not containing the given string."""
  businessLicense_not_contains: String

  """All values starting with the given string."""
  businessLicense_starts_with: String

  """All values not starting with the given string."""
  businessLicense_not_starts_with: String

  """All values ending with the given string."""
  businessLicense_ends_with: String

  """All values not ending with the given string."""
  businessLicense_not_ends_with: String
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type RetailerSubscriptionPayload {
  mutation: MutationType!
  node: Retailer
  updatedFields: [String!]
  previousValues: RetailerPreviousValues
}

input RetailerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RetailerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RetailerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RetailerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RetailerWhereInput
}

input RetailerUpdateDataInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLicense: String
  enabled: Boolean
  owner: AssignmentUpdateOneWithoutRetailersInput
  businessMedia: MediaUpdateOneInput
  businessAddress: AddressUpdateOneInput
  products: ProductRetailerUpdateManyWithoutRetailerInput
}

input RetailerUpdateInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLicense: String
  enabled: Boolean
  owner: AssignmentUpdateOneWithoutRetailersInput
  businessMedia: MediaUpdateOneInput
  businessAddress: AddressUpdateOneInput
  products: ProductRetailerUpdateManyWithoutRetailerInput
}

input RetailerUpdateManyDataInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLicense: String
  enabled: Boolean
}

input RetailerUpdateManyMutationInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLicense: String
  enabled: Boolean
}

input RetailerUpdateManyWithoutOwnerInput {
  create: [RetailerCreateWithoutOwnerInput!]
  connect: [RetailerWhereUniqueInput!]
  set: [RetailerWhereUniqueInput!]
  disconnect: [RetailerWhereUniqueInput!]
  delete: [RetailerWhereUniqueInput!]
  update: [RetailerUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [RetailerUpdateManyWithWhereNestedInput!]
  deleteMany: [RetailerScalarWhereInput!]
  upsert: [RetailerUpsertWithWhereUniqueWithoutOwnerInput!]
}

input RetailerUpdateManyWithWhereNestedInput {
  where: RetailerScalarWhereInput!
  data: RetailerUpdateManyDataInput!
}

input RetailerUpdateOneInput {
  create: RetailerCreateInput
  connect: RetailerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RetailerUpdateDataInput
  upsert: RetailerUpsertNestedInput
}

input RetailerUpdateOneWithoutProductsInput {
  create: RetailerCreateWithoutProductsInput
  connect: RetailerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RetailerUpdateWithoutProductsDataInput
  upsert: RetailerUpsertWithoutProductsInput
}

input RetailerUpdateWithoutOwnerDataInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLicense: String
  enabled: Boolean
  businessMedia: MediaUpdateOneInput
  businessAddress: AddressUpdateOneInput
  products: ProductRetailerUpdateManyWithoutRetailerInput
}

input RetailerUpdateWithoutProductsDataInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLicense: String
  enabled: Boolean
  owner: AssignmentUpdateOneWithoutRetailersInput
  businessMedia: MediaUpdateOneInput
  businessAddress: AddressUpdateOneInput
}

input RetailerUpdateWithWhereUniqueWithoutOwnerInput {
  where: RetailerWhereUniqueInput!
  data: RetailerUpdateWithoutOwnerDataInput!
}

input RetailerUpsertNestedInput {
  update: RetailerUpdateDataInput!
  create: RetailerCreateInput!
}

input RetailerUpsertWithoutProductsInput {
  update: RetailerUpdateWithoutProductsDataInput!
  create: RetailerCreateWithoutProductsInput!
}

input RetailerUpsertWithWhereUniqueWithoutOwnerInput {
  where: RetailerWhereUniqueInput!
  update: RetailerUpdateWithoutOwnerDataInput!
  create: RetailerCreateWithoutOwnerInput!
}

input RetailerWhereInput {
  """Logical AND on all given filters."""
  AND: [RetailerWhereInput!]

  """Logical OR on all given filters."""
  OR: [RetailerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RetailerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  businessName: String

  """All values that are not equal to given value."""
  businessName_not: String

  """All values that are contained in given list."""
  businessName_in: [String!]

  """All values that are not contained in given list."""
  businessName_not_in: [String!]

  """All values less than the given value."""
  businessName_lt: String

  """All values less than or equal the given value."""
  businessName_lte: String

  """All values greater than the given value."""
  businessName_gt: String

  """All values greater than or equal the given value."""
  businessName_gte: String

  """All values containing the given string."""
  businessName_contains: String

  """All values not containing the given string."""
  businessName_not_contains: String

  """All values starting with the given string."""
  businessName_starts_with: String

  """All values not starting with the given string."""
  businessName_not_starts_with: String

  """All values ending with the given string."""
  businessName_ends_with: String

  """All values not ending with the given string."""
  businessName_not_ends_with: String
  businessPhone: String

  """All values that are not equal to given value."""
  businessPhone_not: String

  """All values that are contained in given list."""
  businessPhone_in: [String!]

  """All values that are not contained in given list."""
  businessPhone_not_in: [String!]

  """All values less than the given value."""
  businessPhone_lt: String

  """All values less than or equal the given value."""
  businessPhone_lte: String

  """All values greater than the given value."""
  businessPhone_gt: String

  """All values greater than or equal the given value."""
  businessPhone_gte: String

  """All values containing the given string."""
  businessPhone_contains: String

  """All values not containing the given string."""
  businessPhone_not_contains: String

  """All values starting with the given string."""
  businessPhone_starts_with: String

  """All values not starting with the given string."""
  businessPhone_not_starts_with: String

  """All values ending with the given string."""
  businessPhone_ends_with: String

  """All values not ending with the given string."""
  businessPhone_not_ends_with: String
  businessEmail: String

  """All values that are not equal to given value."""
  businessEmail_not: String

  """All values that are contained in given list."""
  businessEmail_in: [String!]

  """All values that are not contained in given list."""
  businessEmail_not_in: [String!]

  """All values less than the given value."""
  businessEmail_lt: String

  """All values less than or equal the given value."""
  businessEmail_lte: String

  """All values greater than the given value."""
  businessEmail_gt: String

  """All values greater than or equal the given value."""
  businessEmail_gte: String

  """All values containing the given string."""
  businessEmail_contains: String

  """All values not containing the given string."""
  businessEmail_not_contains: String

  """All values starting with the given string."""
  businessEmail_starts_with: String

  """All values not starting with the given string."""
  businessEmail_not_starts_with: String

  """All values ending with the given string."""
  businessEmail_ends_with: String

  """All values not ending with the given string."""
  businessEmail_not_ends_with: String
  businessLicense: String

  """All values that are not equal to given value."""
  businessLicense_not: String

  """All values that are contained in given list."""
  businessLicense_in: [String!]

  """All values that are not contained in given list."""
  businessLicense_not_in: [String!]

  """All values less than the given value."""
  businessLicense_lt: String

  """All values less than or equal the given value."""
  businessLicense_lte: String

  """All values greater than the given value."""
  businessLicense_gt: String

  """All values greater than or equal the given value."""
  businessLicense_gte: String

  """All values containing the given string."""
  businessLicense_contains: String

  """All values not containing the given string."""
  businessLicense_not_contains: String

  """All values starting with the given string."""
  businessLicense_starts_with: String

  """All values not starting with the given string."""
  businessLicense_not_starts_with: String

  """All values ending with the given string."""
  businessLicense_ends_with: String

  """All values not ending with the given string."""
  businessLicense_not_ends_with: String
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  owner: AssignmentWhereInput
  businessMedia: MediaWhereInput
  businessAddress: AddressWhereInput
  products_every: ProductRetailerWhereInput
  products_some: ProductRetailerWhereInput
  products_none: ProductRetailerWhereInput
}

input RetailerWhereUniqueInput {
  id: ID
  businessName: String
  businessPhone: String
  businessEmail: String
}

type Review implements Node {
  id: ID!
  _version: Int!
  productId: String
  user: User
  title: String!
  body: String!
  stars: Int!
  contentMedia(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  id: ID
  _version: Int
  productId: String
  title: String!
  body: String!
  stars: Int!
  user: UserCreateOneWithoutReviewsInput
  contentMedia: MediaCreateManyInput
}

input ReviewCreateManyWithoutUserInput {
  create: [ReviewCreateWithoutUserInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutUserInput {
  id: ID
  _version: Int
  productId: String
  title: String!
  body: String!
  stars: Int!
  contentMedia: MediaCreateManyInput
}

"""An edge in a connection."""
type ReviewEdge {
  """The item at the end of the edge."""
  node: Review!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  productId_ASC
  productId_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  stars_ASC
  stars_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReviewPreviousValues {
  id: ID!
  _version: Int!
  productId: String
  title: String!
  body: String!
  stars: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ReviewScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  productId: String

  """All values that are not equal to given value."""
  productId_not: String

  """All values that are contained in given list."""
  productId_in: [String!]

  """All values that are not contained in given list."""
  productId_not_in: [String!]

  """All values less than the given value."""
  productId_lt: String

  """All values less than or equal the given value."""
  productId_lte: String

  """All values greater than the given value."""
  productId_gt: String

  """All values greater than or equal the given value."""
  productId_gte: String

  """All values containing the given string."""
  productId_contains: String

  """All values not containing the given string."""
  productId_not_contains: String

  """All values starting with the given string."""
  productId_starts_with: String

  """All values not starting with the given string."""
  productId_not_starts_with: String

  """All values ending with the given string."""
  productId_ends_with: String

  """All values not ending with the given string."""
  productId_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  stars: Int

  """All values that are not equal to given value."""
  stars_not: Int

  """All values that are contained in given list."""
  stars_in: [Int!]

  """All values that are not contained in given list."""
  stars_not_in: [Int!]

  """All values less than the given value."""
  stars_lt: Int

  """All values less than or equal the given value."""
  stars_lte: Int

  """All values greater than the given value."""
  stars_gt: Int

  """All values greater than or equal the given value."""
  stars_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
}

input ReviewUpdateInput {
  _version: Int
  productId: String
  title: String
  body: String
  stars: Int
  user: UserUpdateOneWithoutReviewsInput
  contentMedia: MediaUpdateManyInput
}

input ReviewUpdateManyDataInput {
  _version: Int
  productId: String
  title: String
  body: String
  stars: Int
}

input ReviewUpdateManyMutationInput {
  _version: Int
  productId: String
  title: String
  body: String
  stars: Int
}

input ReviewUpdateManyWithoutUserInput {
  create: [ReviewCreateWithoutUserInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [ReviewScalarWhereInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutUserInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyDataInput!
}

input ReviewUpdateWithoutUserDataInput {
  _version: Int
  productId: String
  title: String
  body: String
  stars: Int
  contentMedia: MediaUpdateManyInput
}

input ReviewUpdateWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutUserDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutUserDataInput!
  create: ReviewCreateWithoutUserInput!
}

input ReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  productId: String

  """All values that are not equal to given value."""
  productId_not: String

  """All values that are contained in given list."""
  productId_in: [String!]

  """All values that are not contained in given list."""
  productId_not_in: [String!]

  """All values less than the given value."""
  productId_lt: String

  """All values less than or equal the given value."""
  productId_lte: String

  """All values greater than the given value."""
  productId_gt: String

  """All values greater than or equal the given value."""
  productId_gte: String

  """All values containing the given string."""
  productId_contains: String

  """All values not containing the given string."""
  productId_not_contains: String

  """All values starting with the given string."""
  productId_starts_with: String

  """All values not starting with the given string."""
  productId_not_starts_with: String

  """All values ending with the given string."""
  productId_ends_with: String

  """All values not ending with the given string."""
  productId_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  stars: Int

  """All values that are not equal to given value."""
  stars_not: Int

  """All values that are contained in given list."""
  stars_in: [Int!]

  """All values that are not contained in given list."""
  stars_not_in: [Int!]

  """All values less than the given value."""
  stars_lt: Int

  """All values less than or equal the given value."""
  stars_lte: Int

  """All values greater than the given value."""
  stars_gt: Int

  """All values greater than or equal the given value."""
  stars_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  contentMedia_every: MediaWhereInput
  contentMedia_some: MediaWhereInput
  contentMedia_none: MediaWhereInput
}

input ReviewWhereUniqueInput {
  id: ID
}

type Role implements Node {
  id: ID!
  _version: Int!
  name: String
  description: String
  type: String
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  id: ID
  _version: Int
  name: String
  description: String
  type: String
  permissions: PermissionCreateManyInput
}

input RoleCreateManyInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RolePreviousValues {
  id: ID!
  _version: Int!
  name: String
  description: String
  type: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RoleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateDataInput {
  _version: Int
  name: String
  description: String
  type: String
  permissions: PermissionUpdateManyInput
}

input RoleUpdateInput {
  _version: Int
  name: String
  description: String
  type: String
  permissions: PermissionUpdateManyInput
}

input RoleUpdateManyDataInput {
  _version: Int
  name: String
  description: String
  type: String
}

input RoleUpdateManyInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueNestedInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleScalarWhereInput!]
  upsert: [RoleUpsertWithWhereUniqueNestedInput!]
}

input RoleUpdateManyMutationInput {
  _version: Int
  name: String
  description: String
  type: String
}

input RoleUpdateManyWithWhereNestedInput {
  where: RoleScalarWhereInput!
  data: RoleUpdateManyDataInput!
}

input RoleUpdateWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateDataInput!
}

input RoleUpsertWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateDataInput!
  create: RoleCreateInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  permissions_every: PermissionWhereInput
  permissions_some: PermissionWhereInput
  permissions_none: PermissionWhereInput
}

input RoleWhereUniqueInput {
  id: ID
}

type SecurityAnswer implements Node {
  id: ID!
  _version: Int!
  answer: String
  user: User
  securityQuestion: SecurityQuestion
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SecurityAnswerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SecurityAnswerEdge]!
  aggregate: AggregateSecurityAnswer!
}

input SecurityAnswerCreateInput {
  id: ID
  _version: Int
  answer: String
  user: UserCreateOneWithoutSecurityAnswersInput
  securityQuestion: SecurityQuestionCreateOneWithoutSecurityAnswersInput
}

input SecurityAnswerCreateManyWithoutSecurityQuestionInput {
  create: [SecurityAnswerCreateWithoutSecurityQuestionInput!]
  connect: [SecurityAnswerWhereUniqueInput!]
}

input SecurityAnswerCreateManyWithoutUserInput {
  create: [SecurityAnswerCreateWithoutUserInput!]
  connect: [SecurityAnswerWhereUniqueInput!]
}

input SecurityAnswerCreateWithoutSecurityQuestionInput {
  id: ID
  _version: Int
  answer: String
  user: UserCreateOneWithoutSecurityAnswersInput
}

input SecurityAnswerCreateWithoutUserInput {
  id: ID
  _version: Int
  answer: String
  securityQuestion: SecurityQuestionCreateOneWithoutSecurityAnswersInput
}

"""An edge in a connection."""
type SecurityAnswerEdge {
  """The item at the end of the edge."""
  node: SecurityAnswer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SecurityAnswerOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  answer_ASC
  answer_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SecurityAnswerPreviousValues {
  id: ID!
  _version: Int!
  answer: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SecurityAnswerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityAnswerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityAnswerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityAnswerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  answer: String

  """All values that are not equal to given value."""
  answer_not: String

  """All values that are contained in given list."""
  answer_in: [String!]

  """All values that are not contained in given list."""
  answer_not_in: [String!]

  """All values less than the given value."""
  answer_lt: String

  """All values less than or equal the given value."""
  answer_lte: String

  """All values greater than the given value."""
  answer_gt: String

  """All values greater than or equal the given value."""
  answer_gte: String

  """All values containing the given string."""
  answer_contains: String

  """All values not containing the given string."""
  answer_not_contains: String

  """All values starting with the given string."""
  answer_starts_with: String

  """All values not starting with the given string."""
  answer_not_starts_with: String

  """All values ending with the given string."""
  answer_ends_with: String

  """All values not ending with the given string."""
  answer_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type SecurityAnswerSubscriptionPayload {
  mutation: MutationType!
  node: SecurityAnswer
  updatedFields: [String!]
  previousValues: SecurityAnswerPreviousValues
}

input SecurityAnswerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityAnswerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityAnswerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityAnswerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SecurityAnswerWhereInput
}

input SecurityAnswerUpdateInput {
  _version: Int
  answer: String
  user: UserUpdateOneWithoutSecurityAnswersInput
  securityQuestion: SecurityQuestionUpdateOneWithoutSecurityAnswersInput
}

input SecurityAnswerUpdateManyDataInput {
  _version: Int
  answer: String
}

input SecurityAnswerUpdateManyMutationInput {
  _version: Int
  answer: String
}

input SecurityAnswerUpdateManyWithoutSecurityQuestionInput {
  create: [SecurityAnswerCreateWithoutSecurityQuestionInput!]
  connect: [SecurityAnswerWhereUniqueInput!]
  set: [SecurityAnswerWhereUniqueInput!]
  disconnect: [SecurityAnswerWhereUniqueInput!]
  delete: [SecurityAnswerWhereUniqueInput!]
  update: [SecurityAnswerUpdateWithWhereUniqueWithoutSecurityQuestionInput!]
  updateMany: [SecurityAnswerUpdateManyWithWhereNestedInput!]
  deleteMany: [SecurityAnswerScalarWhereInput!]
  upsert: [SecurityAnswerUpsertWithWhereUniqueWithoutSecurityQuestionInput!]
}

input SecurityAnswerUpdateManyWithoutUserInput {
  create: [SecurityAnswerCreateWithoutUserInput!]
  connect: [SecurityAnswerWhereUniqueInput!]
  set: [SecurityAnswerWhereUniqueInput!]
  disconnect: [SecurityAnswerWhereUniqueInput!]
  delete: [SecurityAnswerWhereUniqueInput!]
  update: [SecurityAnswerUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SecurityAnswerUpdateManyWithWhereNestedInput!]
  deleteMany: [SecurityAnswerScalarWhereInput!]
  upsert: [SecurityAnswerUpsertWithWhereUniqueWithoutUserInput!]
}

input SecurityAnswerUpdateManyWithWhereNestedInput {
  where: SecurityAnswerScalarWhereInput!
  data: SecurityAnswerUpdateManyDataInput!
}

input SecurityAnswerUpdateWithoutSecurityQuestionDataInput {
  _version: Int
  answer: String
  user: UserUpdateOneWithoutSecurityAnswersInput
}

input SecurityAnswerUpdateWithoutUserDataInput {
  _version: Int
  answer: String
  securityQuestion: SecurityQuestionUpdateOneWithoutSecurityAnswersInput
}

input SecurityAnswerUpdateWithWhereUniqueWithoutSecurityQuestionInput {
  where: SecurityAnswerWhereUniqueInput!
  data: SecurityAnswerUpdateWithoutSecurityQuestionDataInput!
}

input SecurityAnswerUpdateWithWhereUniqueWithoutUserInput {
  where: SecurityAnswerWhereUniqueInput!
  data: SecurityAnswerUpdateWithoutUserDataInput!
}

input SecurityAnswerUpsertWithWhereUniqueWithoutSecurityQuestionInput {
  where: SecurityAnswerWhereUniqueInput!
  update: SecurityAnswerUpdateWithoutSecurityQuestionDataInput!
  create: SecurityAnswerCreateWithoutSecurityQuestionInput!
}

input SecurityAnswerUpsertWithWhereUniqueWithoutUserInput {
  where: SecurityAnswerWhereUniqueInput!
  update: SecurityAnswerUpdateWithoutUserDataInput!
  create: SecurityAnswerCreateWithoutUserInput!
}

input SecurityAnswerWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityAnswerWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityAnswerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityAnswerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  answer: String

  """All values that are not equal to given value."""
  answer_not: String

  """All values that are contained in given list."""
  answer_in: [String!]

  """All values that are not contained in given list."""
  answer_not_in: [String!]

  """All values less than the given value."""
  answer_lt: String

  """All values less than or equal the given value."""
  answer_lte: String

  """All values greater than the given value."""
  answer_gt: String

  """All values greater than or equal the given value."""
  answer_gte: String

  """All values containing the given string."""
  answer_contains: String

  """All values not containing the given string."""
  answer_not_contains: String

  """All values starting with the given string."""
  answer_starts_with: String

  """All values not starting with the given string."""
  answer_not_starts_with: String

  """All values ending with the given string."""
  answer_ends_with: String

  """All values not ending with the given string."""
  answer_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  securityQuestion: SecurityQuestionWhereInput
}

input SecurityAnswerWhereUniqueInput {
  id: ID
}

type SecurityQuestion implements Node {
  id: ID!
  _version: Int!
  question: String
  securityAnswers(where: SecurityAnswerWhereInput, orderBy: SecurityAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SecurityAnswer!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SecurityQuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SecurityQuestionEdge]!
  aggregate: AggregateSecurityQuestion!
}

input SecurityQuestionCreateInput {
  id: ID
  _version: Int
  question: String
  securityAnswers: SecurityAnswerCreateManyWithoutSecurityQuestionInput
}

input SecurityQuestionCreateOneWithoutSecurityAnswersInput {
  create: SecurityQuestionCreateWithoutSecurityAnswersInput
  connect: SecurityQuestionWhereUniqueInput
}

input SecurityQuestionCreateWithoutSecurityAnswersInput {
  id: ID
  _version: Int
  question: String
}

"""An edge in a connection."""
type SecurityQuestionEdge {
  """The item at the end of the edge."""
  node: SecurityQuestion!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SecurityQuestionOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  question_ASC
  question_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SecurityQuestionPreviousValues {
  id: ID!
  _version: Int!
  question: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SecurityQuestionSubscriptionPayload {
  mutation: MutationType!
  node: SecurityQuestion
  updatedFields: [String!]
  previousValues: SecurityQuestionPreviousValues
}

input SecurityQuestionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityQuestionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityQuestionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityQuestionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SecurityQuestionWhereInput
}

input SecurityQuestionUpdateInput {
  _version: Int
  question: String
  securityAnswers: SecurityAnswerUpdateManyWithoutSecurityQuestionInput
}

input SecurityQuestionUpdateManyMutationInput {
  _version: Int
  question: String
}

input SecurityQuestionUpdateOneWithoutSecurityAnswersInput {
  create: SecurityQuestionCreateWithoutSecurityAnswersInput
  connect: SecurityQuestionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SecurityQuestionUpdateWithoutSecurityAnswersDataInput
  upsert: SecurityQuestionUpsertWithoutSecurityAnswersInput
}

input SecurityQuestionUpdateWithoutSecurityAnswersDataInput {
  _version: Int
  question: String
}

input SecurityQuestionUpsertWithoutSecurityAnswersInput {
  update: SecurityQuestionUpdateWithoutSecurityAnswersDataInput!
  create: SecurityQuestionCreateWithoutSecurityAnswersInput!
}

input SecurityQuestionWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityQuestionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityQuestionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityQuestionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  question: String

  """All values that are not equal to given value."""
  question_not: String

  """All values that are contained in given list."""
  question_in: [String!]

  """All values that are not contained in given list."""
  question_not_in: [String!]

  """All values less than the given value."""
  question_lt: String

  """All values less than or equal the given value."""
  question_lte: String

  """All values greater than the given value."""
  question_gt: String

  """All values greater than or equal the given value."""
  question_gte: String

  """All values containing the given string."""
  question_contains: String

  """All values not containing the given string."""
  question_not_contains: String

  """All values starting with the given string."""
  question_starts_with: String

  """All values not starting with the given string."""
  question_not_starts_with: String

  """All values ending with the given string."""
  question_ends_with: String

  """All values not ending with the given string."""
  question_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  securityAnswers_every: SecurityAnswerWhereInput
  securityAnswers_some: SecurityAnswerWhereInput
  securityAnswers_none: SecurityAnswerWhereInput
}

input SecurityQuestionWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  securityQuestion(where: SecurityQuestionSubscriptionWhereInput): SecurityQuestionSubscriptionPayload
  securityAnswer(where: SecurityAnswerSubscriptionWhereInput): SecurityAnswerSubscriptionPayload
  assignment(where: AssignmentSubscriptionWhereInput): AssignmentSubscriptionPayload
  brand(where: BrandSubscriptionWhereInput): BrandSubscriptionPayload
  productTemplate(where: ProductTemplateSubscriptionWhereInput): ProductTemplateSubscriptionPayload
  productAttribute(where: ProductAttributeSubscriptionWhereInput): ProductAttributeSubscriptionPayload
  productAttributeValue(where: ProductAttributeValueSubscriptionWhereInput): ProductAttributeValueSubscriptionPayload
  productRetailer(where: ProductRetailerSubscriptionWhereInput): ProductRetailerSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  productOption(where: ProductOptionSubscriptionWhereInput): ProductOptionSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  permission(where: PermissionSubscriptionWhereInput): PermissionSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  media(where: MediaSubscriptionWhereInput): MediaSubscriptionPayload
  retailer(where: RetailerSubscriptionWhereInput): RetailerSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  description(where: DescriptionSubscriptionWhereInput): DescriptionSubscriptionPayload
}

type User implements Node {
  id: ID!
  _version: Int!
  name: String!
  profile: String
  profileMedia: Media
  badgeMedias(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address!]
  email: String
  phone: String
  password: String
  securityAnswers(where: SecurityAnswerWhereInput, orderBy: SecurityAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SecurityAnswer!]
  enabled: Boolean
  recoverable: Boolean
  assignment: Assignment
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  _version: Int
  name: String!
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaCreateOneInput
  badgeMedias: MediaCreateManyInput
  addresses: AddressCreateManyInput
  securityAnswers: SecurityAnswerCreateManyWithoutUserInput
  assignment: AssignmentCreateOneWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
}

input UserCreateOneWithoutAssignmentInput {
  create: UserCreateWithoutAssignmentInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSecurityAnswersInput {
  create: UserCreateWithoutSecurityAnswersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAssignmentInput {
  id: ID
  _version: Int
  name: String!
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaCreateOneInput
  badgeMedias: MediaCreateManyInput
  addresses: AddressCreateManyInput
  securityAnswers: SecurityAnswerCreateManyWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
}

input UserCreateWithoutReviewsInput {
  id: ID
  _version: Int
  name: String!
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaCreateOneInput
  badgeMedias: MediaCreateManyInput
  addresses: AddressCreateManyInput
  securityAnswers: SecurityAnswerCreateManyWithoutUserInput
  assignment: AssignmentCreateOneWithoutUserInput
}

input UserCreateWithoutSecurityAnswersInput {
  id: ID
  _version: Int
  name: String!
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaCreateOneInput
  badgeMedias: MediaCreateManyInput
  addresses: AddressCreateManyInput
  assignment: AssignmentCreateOneWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  profile_ASC
  profile_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  password_ASC
  password_DESC
  enabled_ASC
  enabled_DESC
  recoverable_ASC
  recoverable_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  _version: Int!
  name: String!
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  _version: Int
  name: String
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaUpdateOneInput
  badgeMedias: MediaUpdateManyInput
  addresses: AddressUpdateManyInput
  securityAnswers: SecurityAnswerUpdateManyWithoutUserInput
  assignment: AssignmentUpdateOneWithoutUserInput
  reviews: ReviewUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  _version: Int
  name: String
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
}

input UserUpdateOneWithoutAssignmentInput {
  create: UserCreateWithoutAssignmentInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutAssignmentDataInput
  upsert: UserUpsertWithoutAssignmentInput
}

input UserUpdateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateOneWithoutSecurityAnswersInput {
  create: UserCreateWithoutSecurityAnswersInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutSecurityAnswersDataInput
  upsert: UserUpsertWithoutSecurityAnswersInput
}

input UserUpdateWithoutAssignmentDataInput {
  _version: Int
  name: String
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaUpdateOneInput
  badgeMedias: MediaUpdateManyInput
  addresses: AddressUpdateManyInput
  securityAnswers: SecurityAnswerUpdateManyWithoutUserInput
  reviews: ReviewUpdateManyWithoutUserInput
}

input UserUpdateWithoutReviewsDataInput {
  _version: Int
  name: String
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaUpdateOneInput
  badgeMedias: MediaUpdateManyInput
  addresses: AddressUpdateManyInput
  securityAnswers: SecurityAnswerUpdateManyWithoutUserInput
  assignment: AssignmentUpdateOneWithoutUserInput
}

input UserUpdateWithoutSecurityAnswersDataInput {
  _version: Int
  name: String
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaUpdateOneInput
  badgeMedias: MediaUpdateManyInput
  addresses: AddressUpdateManyInput
  assignment: AssignmentUpdateOneWithoutUserInput
  reviews: ReviewUpdateManyWithoutUserInput
}

input UserUpsertWithoutAssignmentInput {
  update: UserUpdateWithoutAssignmentDataInput!
  create: UserCreateWithoutAssignmentInput!
}

input UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput!
  create: UserCreateWithoutReviewsInput!
}

input UserUpsertWithoutSecurityAnswersInput {
  update: UserUpdateWithoutSecurityAnswersDataInput!
  create: UserCreateWithoutSecurityAnswersInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  profile: String

  """All values that are not equal to given value."""
  profile_not: String

  """All values that are contained in given list."""
  profile_in: [String!]

  """All values that are not contained in given list."""
  profile_not_in: [String!]

  """All values less than the given value."""
  profile_lt: String

  """All values less than or equal the given value."""
  profile_lte: String

  """All values greater than the given value."""
  profile_gt: String

  """All values greater than or equal the given value."""
  profile_gte: String

  """All values containing the given string."""
  profile_contains: String

  """All values not containing the given string."""
  profile_not_contains: String

  """All values starting with the given string."""
  profile_starts_with: String

  """All values not starting with the given string."""
  profile_not_starts_with: String

  """All values ending with the given string."""
  profile_ends_with: String

  """All values not ending with the given string."""
  profile_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  recoverable: Boolean

  """All values that are not equal to given value."""
  recoverable_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  profileMedia: MediaWhereInput
  badgeMedias_every: MediaWhereInput
  badgeMedias_some: MediaWhereInput
  badgeMedias_none: MediaWhereInput
  addresses_every: AddressWhereInput
  addresses_some: AddressWhereInput
  addresses_none: AddressWhereInput
  securityAnswers_every: SecurityAnswerWhereInput
  securityAnswers_some: SecurityAnswerWhereInput
  securityAnswers_none: SecurityAnswerWhereInput
  assignment: AssignmentWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  phone: String
}

# source: http://localhost:4466/foxiny/dev
# timestamp: Fri Jul 12 2019 20:42:43 GMT+0700 (Indochina Time)

type Address implements Node {
  id: ID!
  _version: Int!
  description: String
  region: Region
  name: String
  phone: String
  street: String
  unit: String
  district: String
  city: String
  state: String
  zip: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AddressConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  id: ID
  _version: Int
  description: String
  region: Region
  name: String
  phone: String
  street: String
  unit: String
  district: String
  city: String
  state: String
  zip: String
}

input AddressCreateManyInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input AddressCreateOneInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

"""An edge in a connection."""
type AddressEdge {
  """The item at the end of the edge."""
  node: Address!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  description_ASC
  description_DESC
  region_ASC
  region_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  street_ASC
  street_DESC
  unit_ASC
  unit_DESC
  district_ASC
  district_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AddressPreviousValues {
  id: ID!
  _version: Int!
  description: String
  region: Region
  name: String
  phone: String
  street: String
  unit: String
  district: String
  city: String
  state: String
  zip: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AddressScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  region: Region

  """All values that are not equal to given value."""
  region_not: Region

  """All values that are contained in given list."""
  region_in: [Region!]

  """All values that are not contained in given list."""
  region_not_in: [Region!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  street: String

  """All values that are not equal to given value."""
  street_not: String

  """All values that are contained in given list."""
  street_in: [String!]

  """All values that are not contained in given list."""
  street_not_in: [String!]

  """All values less than the given value."""
  street_lt: String

  """All values less than or equal the given value."""
  street_lte: String

  """All values greater than the given value."""
  street_gt: String

  """All values greater than or equal the given value."""
  street_gte: String

  """All values containing the given string."""
  street_contains: String

  """All values not containing the given string."""
  street_not_contains: String

  """All values starting with the given string."""
  street_starts_with: String

  """All values not starting with the given string."""
  street_not_starts_with: String

  """All values ending with the given string."""
  street_ends_with: String

  """All values not ending with the given string."""
  street_not_ends_with: String
  unit: String

  """All values that are not equal to given value."""
  unit_not: String

  """All values that are contained in given list."""
  unit_in: [String!]

  """All values that are not contained in given list."""
  unit_not_in: [String!]

  """All values less than the given value."""
  unit_lt: String

  """All values less than or equal the given value."""
  unit_lte: String

  """All values greater than the given value."""
  unit_gt: String

  """All values greater than or equal the given value."""
  unit_gte: String

  """All values containing the given string."""
  unit_contains: String

  """All values not containing the given string."""
  unit_not_contains: String

  """All values starting with the given string."""
  unit_starts_with: String

  """All values not starting with the given string."""
  unit_not_starts_with: String

  """All values ending with the given string."""
  unit_ends_with: String

  """All values not ending with the given string."""
  unit_not_ends_with: String
  district: String

  """All values that are not equal to given value."""
  district_not: String

  """All values that are contained in given list."""
  district_in: [String!]

  """All values that are not contained in given list."""
  district_not_in: [String!]

  """All values less than the given value."""
  district_lt: String

  """All values less than or equal the given value."""
  district_lte: String

  """All values greater than the given value."""
  district_gt: String

  """All values greater than or equal the given value."""
  district_gte: String

  """All values containing the given string."""
  district_contains: String

  """All values not containing the given string."""
  district_not_contains: String

  """All values starting with the given string."""
  district_starts_with: String

  """All values not starting with the given string."""
  district_not_starts_with: String

  """All values ending with the given string."""
  district_ends_with: String

  """All values not ending with the given string."""
  district_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
}

input AddressUpdateDataInput {
  _version: Int
  description: String
  region: Region
  name: String
  phone: String
  street: String
  unit: String
  district: String
  city: String
  state: String
  zip: String
}

input AddressUpdateInput {
  _version: Int
  description: String
  region: Region
  name: String
  phone: String
  street: String
  unit: String
  district: String
  city: String
  state: String
  zip: String
}

input AddressUpdateManyDataInput {
  _version: Int
  description: String
  region: Region
  name: String
  phone: String
  street: String
  unit: String
  district: String
  city: String
  state: String
  zip: String
}

input AddressUpdateManyInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  disconnect: [AddressWhereUniqueInput!]
  delete: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueNestedInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  deleteMany: [AddressScalarWhereInput!]
  upsert: [AddressUpsertWithWhereUniqueNestedInput!]
}

input AddressUpdateManyMutationInput {
  _version: Int
  description: String
  region: Region
  name: String
  phone: String
  street: String
  unit: String
  district: String
  city: String
  state: String
  zip: String
}

input AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput!
  data: AddressUpdateManyDataInput!
}

input AddressUpdateOneInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AddressUpdateDataInput
  upsert: AddressUpsertNestedInput
}

input AddressUpdateWithWhereUniqueNestedInput {
  where: AddressWhereUniqueInput!
  data: AddressUpdateDataInput!
}

input AddressUpsertNestedInput {
  update: AddressUpdateDataInput!
  create: AddressCreateInput!
}

input AddressUpsertWithWhereUniqueNestedInput {
  where: AddressWhereUniqueInput!
  update: AddressUpdateDataInput!
  create: AddressCreateInput!
}

input AddressWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  region: Region

  """All values that are not equal to given value."""
  region_not: Region

  """All values that are contained in given list."""
  region_in: [Region!]

  """All values that are not contained in given list."""
  region_not_in: [Region!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  street: String

  """All values that are not equal to given value."""
  street_not: String

  """All values that are contained in given list."""
  street_in: [String!]

  """All values that are not contained in given list."""
  street_not_in: [String!]

  """All values less than the given value."""
  street_lt: String

  """All values less than or equal the given value."""
  street_lte: String

  """All values greater than the given value."""
  street_gt: String

  """All values greater than or equal the given value."""
  street_gte: String

  """All values containing the given string."""
  street_contains: String

  """All values not containing the given string."""
  street_not_contains: String

  """All values starting with the given string."""
  street_starts_with: String

  """All values not starting with the given string."""
  street_not_starts_with: String

  """All values ending with the given string."""
  street_ends_with: String

  """All values not ending with the given string."""
  street_not_ends_with: String
  unit: String

  """All values that are not equal to given value."""
  unit_not: String

  """All values that are contained in given list."""
  unit_in: [String!]

  """All values that are not contained in given list."""
  unit_not_in: [String!]

  """All values less than the given value."""
  unit_lt: String

  """All values less than or equal the given value."""
  unit_lte: String

  """All values greater than the given value."""
  unit_gt: String

  """All values greater than or equal the given value."""
  unit_gte: String

  """All values containing the given string."""
  unit_contains: String

  """All values not containing the given string."""
  unit_not_contains: String

  """All values starting with the given string."""
  unit_starts_with: String

  """All values not starting with the given string."""
  unit_not_starts_with: String

  """All values ending with the given string."""
  unit_ends_with: String

  """All values not ending with the given string."""
  unit_not_ends_with: String
  district: String

  """All values that are not equal to given value."""
  district_not: String

  """All values that are contained in given list."""
  district_in: [String!]

  """All values that are not contained in given list."""
  district_not_in: [String!]

  """All values less than the given value."""
  district_lt: String

  """All values less than or equal the given value."""
  district_lte: String

  """All values greater than the given value."""
  district_gt: String

  """All values greater than or equal the given value."""
  district_gte: String

  """All values containing the given string."""
  district_contains: String

  """All values not containing the given string."""
  district_not_contains: String

  """All values starting with the given string."""
  district_starts_with: String

  """All values not starting with the given string."""
  district_not_starts_with: String

  """All values ending with the given string."""
  district_ends_with: String

  """All values not ending with the given string."""
  district_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateAssignment {
  count: Int!
}

type AggregateBrand {
  count: Int!
}

type AggregateCatalog {
  count: Int!
}

type AggregateDescription {
  count: Int!
}

type AggregateLanguage {
  count: Int!
}

type AggregateManufacturer {
  count: Int!
}

type AggregateMedia {
  count: Int!
}

type AggregatePermission {
  count: Int!
}

type AggregatePolicy {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductAttribute {
  count: Int!
}

type AggregateProductAttributeValue {
  count: Int!
}

type AggregateProductOption {
  count: Int!
}

type AggregateProductRetailer {
  count: Int!
}

type AggregateProductTemplate {
  count: Int!
}

type AggregateRetailer {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateSecurityAnswer {
  count: Int!
}

type AggregateSecurityQuestion {
  count: Int!
}

type AggregateSupportCase {
  count: Int!
}

type AggregateSupportCategory {
  count: Int!
}

type AggregateSupportCorrespondence {
  count: Int!
}

type AggregateSupportSeverity {
  count: Int!
}

type AggregateSupportStatus {
  count: Int!
}

type AggregateTrans_Brand {
  count: Int!
}

type AggregateTrans_Catalog {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Assignment implements Node {
  id: ID!
  _version: Int!
  user: User
  retailers(where: RetailerWhereInput, orderBy: RetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Retailer!]
  manufacturers(where: ManufacturerWhereInput, orderBy: ManufacturerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Manufacturer!]
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AssignmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssignmentEdge]!
  aggregate: AggregateAssignment!
}

input AssignmentCreateInput {
  id: ID
  _version: Int
  user: UserCreateOneWithoutAssignmentInput
  retailers: RetailerCreateManyWithoutOwnerInput
  manufacturers: ManufacturerCreateManyWithoutOwnerInput
  roles: RoleCreateManyInput
  permissions: PermissionCreateManyInput
}

input AssignmentCreateManyWithoutManufacturersInput {
  create: [AssignmentCreateWithoutManufacturersInput!]
  connect: [AssignmentWhereUniqueInput!]
}

input AssignmentCreateManyWithoutRetailersInput {
  create: [AssignmentCreateWithoutRetailersInput!]
  connect: [AssignmentWhereUniqueInput!]
}

input AssignmentCreateOneWithoutUserInput {
  create: AssignmentCreateWithoutUserInput
  connect: AssignmentWhereUniqueInput
}

input AssignmentCreateWithoutManufacturersInput {
  id: ID
  _version: Int
  user: UserCreateOneWithoutAssignmentInput
  retailers: RetailerCreateManyWithoutOwnerInput
  roles: RoleCreateManyInput
  permissions: PermissionCreateManyInput
}

input AssignmentCreateWithoutRetailersInput {
  id: ID
  _version: Int
  user: UserCreateOneWithoutAssignmentInput
  manufacturers: ManufacturerCreateManyWithoutOwnerInput
  roles: RoleCreateManyInput
  permissions: PermissionCreateManyInput
}

input AssignmentCreateWithoutUserInput {
  id: ID
  _version: Int
  retailers: RetailerCreateManyWithoutOwnerInput
  manufacturers: ManufacturerCreateManyWithoutOwnerInput
  roles: RoleCreateManyInput
  permissions: PermissionCreateManyInput
}

"""An edge in a connection."""
type AssignmentEdge {
  """The item at the end of the edge."""
  node: Assignment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AssignmentOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AssignmentPreviousValues {
  id: ID!
  _version: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AssignmentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AssignmentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssignmentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssignmentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type AssignmentSubscriptionPayload {
  mutation: MutationType!
  node: Assignment
  updatedFields: [String!]
  previousValues: AssignmentPreviousValues
}

input AssignmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AssignmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssignmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssignmentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AssignmentWhereInput
}

input AssignmentUpdateInput {
  _version: Int
  user: UserUpdateOneWithoutAssignmentInput
  retailers: RetailerUpdateManyWithoutOwnerInput
  manufacturers: ManufacturerUpdateManyWithoutOwnerInput
  roles: RoleUpdateManyInput
  permissions: PermissionUpdateManyInput
}

input AssignmentUpdateManyDataInput {
  _version: Int
}

input AssignmentUpdateManyMutationInput {
  _version: Int
}

input AssignmentUpdateManyWithoutManufacturersInput {
  create: [AssignmentCreateWithoutManufacturersInput!]
  connect: [AssignmentWhereUniqueInput!]
  set: [AssignmentWhereUniqueInput!]
  disconnect: [AssignmentWhereUniqueInput!]
  delete: [AssignmentWhereUniqueInput!]
  update: [AssignmentUpdateWithWhereUniqueWithoutManufacturersInput!]
  updateMany: [AssignmentUpdateManyWithWhereNestedInput!]
  deleteMany: [AssignmentScalarWhereInput!]
  upsert: [AssignmentUpsertWithWhereUniqueWithoutManufacturersInput!]
}

input AssignmentUpdateManyWithoutRetailersInput {
  create: [AssignmentCreateWithoutRetailersInput!]
  connect: [AssignmentWhereUniqueInput!]
  set: [AssignmentWhereUniqueInput!]
  disconnect: [AssignmentWhereUniqueInput!]
  delete: [AssignmentWhereUniqueInput!]
  update: [AssignmentUpdateWithWhereUniqueWithoutRetailersInput!]
  updateMany: [AssignmentUpdateManyWithWhereNestedInput!]
  deleteMany: [AssignmentScalarWhereInput!]
  upsert: [AssignmentUpsertWithWhereUniqueWithoutRetailersInput!]
}

input AssignmentUpdateManyWithWhereNestedInput {
  where: AssignmentScalarWhereInput!
  data: AssignmentUpdateManyDataInput!
}

input AssignmentUpdateOneWithoutUserInput {
  create: AssignmentCreateWithoutUserInput
  connect: AssignmentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AssignmentUpdateWithoutUserDataInput
  upsert: AssignmentUpsertWithoutUserInput
}

input AssignmentUpdateWithoutManufacturersDataInput {
  _version: Int
  user: UserUpdateOneWithoutAssignmentInput
  retailers: RetailerUpdateManyWithoutOwnerInput
  roles: RoleUpdateManyInput
  permissions: PermissionUpdateManyInput
}

input AssignmentUpdateWithoutRetailersDataInput {
  _version: Int
  user: UserUpdateOneWithoutAssignmentInput
  manufacturers: ManufacturerUpdateManyWithoutOwnerInput
  roles: RoleUpdateManyInput
  permissions: PermissionUpdateManyInput
}

input AssignmentUpdateWithoutUserDataInput {
  _version: Int
  retailers: RetailerUpdateManyWithoutOwnerInput
  manufacturers: ManufacturerUpdateManyWithoutOwnerInput
  roles: RoleUpdateManyInput
  permissions: PermissionUpdateManyInput
}

input AssignmentUpdateWithWhereUniqueWithoutManufacturersInput {
  where: AssignmentWhereUniqueInput!
  data: AssignmentUpdateWithoutManufacturersDataInput!
}

input AssignmentUpdateWithWhereUniqueWithoutRetailersInput {
  where: AssignmentWhereUniqueInput!
  data: AssignmentUpdateWithoutRetailersDataInput!
}

input AssignmentUpsertWithoutUserInput {
  update: AssignmentUpdateWithoutUserDataInput!
  create: AssignmentCreateWithoutUserInput!
}

input AssignmentUpsertWithWhereUniqueWithoutManufacturersInput {
  where: AssignmentWhereUniqueInput!
  update: AssignmentUpdateWithoutManufacturersDataInput!
  create: AssignmentCreateWithoutManufacturersInput!
}

input AssignmentUpsertWithWhereUniqueWithoutRetailersInput {
  where: AssignmentWhereUniqueInput!
  update: AssignmentUpdateWithoutRetailersDataInput!
  create: AssignmentCreateWithoutRetailersInput!
}

input AssignmentWhereInput {
  """Logical AND on all given filters."""
  AND: [AssignmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssignmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssignmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  retailers_every: RetailerWhereInput
  retailers_some: RetailerWhereInput
  retailers_none: RetailerWhereInput
  manufacturers_every: ManufacturerWhereInput
  manufacturers_some: ManufacturerWhereInput
  manufacturers_none: ManufacturerWhereInput
  roles_every: RoleWhereInput
  roles_some: RoleWhereInput
  roles_none: RoleWhereInput
  permissions_every: PermissionWhereInput
  permissions_some: PermissionWhereInput
  permissions_none: PermissionWhereInput
}

input AssignmentWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Brand implements Node {
  id: ID!
  _version: Int!
  brandName: String
  productTemplates(where: ProductTemplateWhereInput, orderBy: ProductTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductTemplate!]
  trans_brandName(where: Trans_BrandWhereInput, orderBy: Trans_BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trans_Brand!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BrandConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BrandEdge]!
  aggregate: AggregateBrand!
}

input BrandCreateInput {
  id: ID
  _version: Int
  brandName: String
  productTemplates: ProductTemplateCreateManyWithoutBrandInput
  trans_brandName: Trans_BrandCreateManyWithoutBrandInput
}

input BrandCreateOneWithoutProductTemplatesInput {
  create: BrandCreateWithoutProductTemplatesInput
  connect: BrandWhereUniqueInput
}

input BrandCreateOneWithoutTrans_brandNameInput {
  create: BrandCreateWithoutTrans_brandNameInput
  connect: BrandWhereUniqueInput
}

input BrandCreateWithoutProductTemplatesInput {
  id: ID
  _version: Int
  brandName: String
  trans_brandName: Trans_BrandCreateManyWithoutBrandInput
}

input BrandCreateWithoutTrans_brandNameInput {
  id: ID
  _version: Int
  brandName: String
  productTemplates: ProductTemplateCreateManyWithoutBrandInput
}

"""An edge in a connection."""
type BrandEdge {
  """The item at the end of the edge."""
  node: Brand!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BrandOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  brandName_ASC
  brandName_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BrandPreviousValues {
  id: ID!
  _version: Int!
  brandName: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BrandSubscriptionPayload {
  mutation: MutationType!
  node: Brand
  updatedFields: [String!]
  previousValues: BrandPreviousValues
}

input BrandSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BrandSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BrandSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BrandSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BrandWhereInput
}

input BrandUpdateInput {
  _version: Int
  brandName: String
  productTemplates: ProductTemplateUpdateManyWithoutBrandInput
  trans_brandName: Trans_BrandUpdateManyWithoutBrandInput
}

input BrandUpdateManyMutationInput {
  _version: Int
  brandName: String
}

input BrandUpdateOneWithoutProductTemplatesInput {
  create: BrandCreateWithoutProductTemplatesInput
  connect: BrandWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BrandUpdateWithoutProductTemplatesDataInput
  upsert: BrandUpsertWithoutProductTemplatesInput
}

input BrandUpdateOneWithoutTrans_brandNameInput {
  create: BrandCreateWithoutTrans_brandNameInput
  connect: BrandWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BrandUpdateWithoutTrans_brandNameDataInput
  upsert: BrandUpsertWithoutTrans_brandNameInput
}

input BrandUpdateWithoutProductTemplatesDataInput {
  _version: Int
  brandName: String
  trans_brandName: Trans_BrandUpdateManyWithoutBrandInput
}

input BrandUpdateWithoutTrans_brandNameDataInput {
  _version: Int
  brandName: String
  productTemplates: ProductTemplateUpdateManyWithoutBrandInput
}

input BrandUpsertWithoutProductTemplatesInput {
  update: BrandUpdateWithoutProductTemplatesDataInput!
  create: BrandCreateWithoutProductTemplatesInput!
}

input BrandUpsertWithoutTrans_brandNameInput {
  update: BrandUpdateWithoutTrans_brandNameDataInput!
  create: BrandCreateWithoutTrans_brandNameInput!
}

input BrandWhereInput {
  """Logical AND on all given filters."""
  AND: [BrandWhereInput!]

  """Logical OR on all given filters."""
  OR: [BrandWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BrandWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  brandName: String

  """All values that are not equal to given value."""
  brandName_not: String

  """All values that are contained in given list."""
  brandName_in: [String!]

  """All values that are not contained in given list."""
  brandName_not_in: [String!]

  """All values less than the given value."""
  brandName_lt: String

  """All values less than or equal the given value."""
  brandName_lte: String

  """All values greater than the given value."""
  brandName_gt: String

  """All values greater than or equal the given value."""
  brandName_gte: String

  """All values containing the given string."""
  brandName_contains: String

  """All values not containing the given string."""
  brandName_not_contains: String

  """All values starting with the given string."""
  brandName_starts_with: String

  """All values not starting with the given string."""
  brandName_not_starts_with: String

  """All values ending with the given string."""
  brandName_ends_with: String

  """All values not ending with the given string."""
  brandName_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  productTemplates_every: ProductTemplateWhereInput
  productTemplates_some: ProductTemplateWhereInput
  productTemplates_none: ProductTemplateWhereInput
  trans_brandName_every: Trans_BrandWhereInput
  trans_brandName_some: Trans_BrandWhereInput
  trans_brandName_none: Trans_BrandWhereInput
}

input BrandWhereUniqueInput {
  id: ID
  brandName: String
}

type Catalog implements Node {
  id: ID!
  _version: Int!
  name: String
  parentId(where: CatalogWhereInput, orderBy: CatalogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Catalog!]
  children(where: CatalogWhereInput, orderBy: CatalogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Catalog!]
  productTemplates(where: ProductTemplateWhereInput, orderBy: ProductTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductTemplate!]
  trans_name(where: Trans_CatalogWhereInput, orderBy: Trans_CatalogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trans_Catalog!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type CatalogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CatalogEdge]!
  aggregate: AggregateCatalog!
}

input CatalogCreateInput {
  id: ID
  _version: Int
  name: String
  parentId: CatalogCreateManyInput
  children: CatalogCreateManyInput
  productTemplates: ProductTemplateCreateManyWithoutCatalogInput
  trans_name: Trans_CatalogCreateManyWithoutCatalogInput
}

input CatalogCreateManyInput {
  create: [CatalogCreateInput!]
  connect: [CatalogWhereUniqueInput!]
}

input CatalogCreateManyWithoutProductTemplatesInput {
  create: [CatalogCreateWithoutProductTemplatesInput!]
  connect: [CatalogWhereUniqueInput!]
}

input CatalogCreateOneWithoutTrans_nameInput {
  create: CatalogCreateWithoutTrans_nameInput
  connect: CatalogWhereUniqueInput
}

input CatalogCreateWithoutProductTemplatesInput {
  id: ID
  _version: Int
  name: String
  parentId: CatalogCreateManyInput
  children: CatalogCreateManyInput
  trans_name: Trans_CatalogCreateManyWithoutCatalogInput
}

input CatalogCreateWithoutTrans_nameInput {
  id: ID
  _version: Int
  name: String
  parentId: CatalogCreateManyInput
  children: CatalogCreateManyInput
  productTemplates: ProductTemplateCreateManyWithoutCatalogInput
}

"""An edge in a connection."""
type CatalogEdge {
  """The item at the end of the edge."""
  node: Catalog!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CatalogOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CatalogPreviousValues {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CatalogScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CatalogScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CatalogScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CatalogScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CatalogSubscriptionPayload {
  mutation: MutationType!
  node: Catalog
  updatedFields: [String!]
  previousValues: CatalogPreviousValues
}

input CatalogSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CatalogSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CatalogSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CatalogSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CatalogWhereInput
}

input CatalogUpdateDataInput {
  _version: Int
  name: String
  parentId: CatalogUpdateManyInput
  children: CatalogUpdateManyInput
  productTemplates: ProductTemplateUpdateManyWithoutCatalogInput
  trans_name: Trans_CatalogUpdateManyWithoutCatalogInput
}

input CatalogUpdateInput {
  _version: Int
  name: String
  parentId: CatalogUpdateManyInput
  children: CatalogUpdateManyInput
  productTemplates: ProductTemplateUpdateManyWithoutCatalogInput
  trans_name: Trans_CatalogUpdateManyWithoutCatalogInput
}

input CatalogUpdateManyDataInput {
  _version: Int
  name: String
}

input CatalogUpdateManyInput {
  create: [CatalogCreateInput!]
  connect: [CatalogWhereUniqueInput!]
  set: [CatalogWhereUniqueInput!]
  disconnect: [CatalogWhereUniqueInput!]
  delete: [CatalogWhereUniqueInput!]
  update: [CatalogUpdateWithWhereUniqueNestedInput!]
  updateMany: [CatalogUpdateManyWithWhereNestedInput!]
  deleteMany: [CatalogScalarWhereInput!]
  upsert: [CatalogUpsertWithWhereUniqueNestedInput!]
}

input CatalogUpdateManyMutationInput {
  _version: Int
  name: String
}

input CatalogUpdateManyWithoutProductTemplatesInput {
  create: [CatalogCreateWithoutProductTemplatesInput!]
  connect: [CatalogWhereUniqueInput!]
  set: [CatalogWhereUniqueInput!]
  disconnect: [CatalogWhereUniqueInput!]
  delete: [CatalogWhereUniqueInput!]
  update: [CatalogUpdateWithWhereUniqueWithoutProductTemplatesInput!]
  updateMany: [CatalogUpdateManyWithWhereNestedInput!]
  deleteMany: [CatalogScalarWhereInput!]
  upsert: [CatalogUpsertWithWhereUniqueWithoutProductTemplatesInput!]
}

input CatalogUpdateManyWithWhereNestedInput {
  where: CatalogScalarWhereInput!
  data: CatalogUpdateManyDataInput!
}

input CatalogUpdateOneWithoutTrans_nameInput {
  create: CatalogCreateWithoutTrans_nameInput
  connect: CatalogWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CatalogUpdateWithoutTrans_nameDataInput
  upsert: CatalogUpsertWithoutTrans_nameInput
}

input CatalogUpdateWithoutProductTemplatesDataInput {
  _version: Int
  name: String
  parentId: CatalogUpdateManyInput
  children: CatalogUpdateManyInput
  trans_name: Trans_CatalogUpdateManyWithoutCatalogInput
}

input CatalogUpdateWithoutTrans_nameDataInput {
  _version: Int
  name: String
  parentId: CatalogUpdateManyInput
  children: CatalogUpdateManyInput
  productTemplates: ProductTemplateUpdateManyWithoutCatalogInput
}

input CatalogUpdateWithWhereUniqueNestedInput {
  where: CatalogWhereUniqueInput!
  data: CatalogUpdateDataInput!
}

input CatalogUpdateWithWhereUniqueWithoutProductTemplatesInput {
  where: CatalogWhereUniqueInput!
  data: CatalogUpdateWithoutProductTemplatesDataInput!
}

input CatalogUpsertWithoutTrans_nameInput {
  update: CatalogUpdateWithoutTrans_nameDataInput!
  create: CatalogCreateWithoutTrans_nameInput!
}

input CatalogUpsertWithWhereUniqueNestedInput {
  where: CatalogWhereUniqueInput!
  update: CatalogUpdateDataInput!
  create: CatalogCreateInput!
}

input CatalogUpsertWithWhereUniqueWithoutProductTemplatesInput {
  where: CatalogWhereUniqueInput!
  update: CatalogUpdateWithoutProductTemplatesDataInput!
  create: CatalogCreateWithoutProductTemplatesInput!
}

input CatalogWhereInput {
  """Logical AND on all given filters."""
  AND: [CatalogWhereInput!]

  """Logical OR on all given filters."""
  OR: [CatalogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CatalogWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  parentId_every: CatalogWhereInput
  parentId_some: CatalogWhereInput
  parentId_none: CatalogWhereInput
  children_every: CatalogWhereInput
  children_some: CatalogWhereInput
  children_none: CatalogWhereInput
  productTemplates_every: ProductTemplateWhereInput
  productTemplates_some: ProductTemplateWhereInput
  productTemplates_none: ProductTemplateWhereInput
  trans_name_every: Trans_CatalogWhereInput
  trans_name_some: Trans_CatalogWhereInput
  trans_name_none: Trans_CatalogWhereInput
}

input CatalogWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

type Description implements Node {
  id: ID!
  _version: Int!
  retailer: Retailer
  product: Product
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DescriptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DescriptionEdge]!
  aggregate: AggregateDescription!
}

input DescriptionCreateInput {
  id: ID
  _version: Int
  description: String
  retailer: RetailerCreateOneInput
  product: ProductCreateOneInput
}

input DescriptionCreateManyInput {
  create: [DescriptionCreateInput!]
  connect: [DescriptionWhereUniqueInput!]
}

"""An edge in a connection."""
type DescriptionEdge {
  """The item at the end of the edge."""
  node: Description!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DescriptionOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DescriptionPreviousValues {
  id: ID!
  _version: Int!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DescriptionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DescriptionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DescriptionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DescriptionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type DescriptionSubscriptionPayload {
  mutation: MutationType!
  node: Description
  updatedFields: [String!]
  previousValues: DescriptionPreviousValues
}

input DescriptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DescriptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DescriptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DescriptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DescriptionWhereInput
}

input DescriptionUpdateDataInput {
  _version: Int
  description: String
  retailer: RetailerUpdateOneInput
  product: ProductUpdateOneInput
}

input DescriptionUpdateInput {
  _version: Int
  description: String
  retailer: RetailerUpdateOneInput
  product: ProductUpdateOneInput
}

input DescriptionUpdateManyDataInput {
  _version: Int
  description: String
}

input DescriptionUpdateManyInput {
  create: [DescriptionCreateInput!]
  connect: [DescriptionWhereUniqueInput!]
  set: [DescriptionWhereUniqueInput!]
  disconnect: [DescriptionWhereUniqueInput!]
  delete: [DescriptionWhereUniqueInput!]
  update: [DescriptionUpdateWithWhereUniqueNestedInput!]
  updateMany: [DescriptionUpdateManyWithWhereNestedInput!]
  deleteMany: [DescriptionScalarWhereInput!]
  upsert: [DescriptionUpsertWithWhereUniqueNestedInput!]
}

input DescriptionUpdateManyMutationInput {
  _version: Int
  description: String
}

input DescriptionUpdateManyWithWhereNestedInput {
  where: DescriptionScalarWhereInput!
  data: DescriptionUpdateManyDataInput!
}

input DescriptionUpdateWithWhereUniqueNestedInput {
  where: DescriptionWhereUniqueInput!
  data: DescriptionUpdateDataInput!
}

input DescriptionUpsertWithWhereUniqueNestedInput {
  where: DescriptionWhereUniqueInput!
  update: DescriptionUpdateDataInput!
  create: DescriptionCreateInput!
}

input DescriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DescriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DescriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DescriptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  retailer: RetailerWhereInput
  product: ProductWhereInput
}

input DescriptionWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

type Language implements Node {
  id: ID!
  _version: Int!
  languageCode: String
  trans_catalog(where: Trans_CatalogWhereInput, orderBy: Trans_CatalogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trans_Catalog!]
  trans_brand(where: Trans_BrandWhereInput, orderBy: Trans_BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trans_Brand!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type LanguageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LanguageEdge]!
  aggregate: AggregateLanguage!
}

input LanguageCreateInput {
  id: ID
  _version: Int
  languageCode: String
  trans_catalog: Trans_CatalogCreateManyWithoutLanguageInput
  trans_brand: Trans_BrandCreateManyWithoutLanguageInput
}

input LanguageCreateOneWithoutTrans_brandInput {
  create: LanguageCreateWithoutTrans_brandInput
  connect: LanguageWhereUniqueInput
}

input LanguageCreateOneWithoutTrans_catalogInput {
  create: LanguageCreateWithoutTrans_catalogInput
  connect: LanguageWhereUniqueInput
}

input LanguageCreateWithoutTrans_brandInput {
  id: ID
  _version: Int
  languageCode: String
  trans_catalog: Trans_CatalogCreateManyWithoutLanguageInput
}

input LanguageCreateWithoutTrans_catalogInput {
  id: ID
  _version: Int
  languageCode: String
  trans_brand: Trans_BrandCreateManyWithoutLanguageInput
}

"""An edge in a connection."""
type LanguageEdge {
  """The item at the end of the edge."""
  node: Language!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LanguageOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  languageCode_ASC
  languageCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LanguagePreviousValues {
  id: ID!
  _version: Int!
  languageCode: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LanguageSubscriptionPayload {
  mutation: MutationType!
  node: Language
  updatedFields: [String!]
  previousValues: LanguagePreviousValues
}

input LanguageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LanguageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LanguageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LanguageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LanguageWhereInput
}

input LanguageUpdateInput {
  _version: Int
  languageCode: String
  trans_catalog: Trans_CatalogUpdateManyWithoutLanguageInput
  trans_brand: Trans_BrandUpdateManyWithoutLanguageInput
}

input LanguageUpdateManyMutationInput {
  _version: Int
  languageCode: String
}

input LanguageUpdateOneWithoutTrans_brandInput {
  create: LanguageCreateWithoutTrans_brandInput
  connect: LanguageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LanguageUpdateWithoutTrans_brandDataInput
  upsert: LanguageUpsertWithoutTrans_brandInput
}

input LanguageUpdateOneWithoutTrans_catalogInput {
  create: LanguageCreateWithoutTrans_catalogInput
  connect: LanguageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LanguageUpdateWithoutTrans_catalogDataInput
  upsert: LanguageUpsertWithoutTrans_catalogInput
}

input LanguageUpdateWithoutTrans_brandDataInput {
  _version: Int
  languageCode: String
  trans_catalog: Trans_CatalogUpdateManyWithoutLanguageInput
}

input LanguageUpdateWithoutTrans_catalogDataInput {
  _version: Int
  languageCode: String
  trans_brand: Trans_BrandUpdateManyWithoutLanguageInput
}

input LanguageUpsertWithoutTrans_brandInput {
  update: LanguageUpdateWithoutTrans_brandDataInput!
  create: LanguageCreateWithoutTrans_brandInput!
}

input LanguageUpsertWithoutTrans_catalogInput {
  update: LanguageUpdateWithoutTrans_catalogDataInput!
  create: LanguageCreateWithoutTrans_catalogInput!
}

input LanguageWhereInput {
  """Logical AND on all given filters."""
  AND: [LanguageWhereInput!]

  """Logical OR on all given filters."""
  OR: [LanguageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LanguageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  languageCode: String

  """All values that are not equal to given value."""
  languageCode_not: String

  """All values that are contained in given list."""
  languageCode_in: [String!]

  """All values that are not contained in given list."""
  languageCode_not_in: [String!]

  """All values less than the given value."""
  languageCode_lt: String

  """All values less than or equal the given value."""
  languageCode_lte: String

  """All values greater than the given value."""
  languageCode_gt: String

  """All values greater than or equal the given value."""
  languageCode_gte: String

  """All values containing the given string."""
  languageCode_contains: String

  """All values not containing the given string."""
  languageCode_not_contains: String

  """All values starting with the given string."""
  languageCode_starts_with: String

  """All values not starting with the given string."""
  languageCode_not_starts_with: String

  """All values ending with the given string."""
  languageCode_ends_with: String

  """All values not ending with the given string."""
  languageCode_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  trans_catalog_every: Trans_CatalogWhereInput
  trans_catalog_some: Trans_CatalogWhereInput
  trans_catalog_none: Trans_CatalogWhereInput
  trans_brand_every: Trans_BrandWhereInput
  trans_brand_some: Trans_BrandWhereInput
  trans_brand_none: Trans_BrandWhereInput
}

input LanguageWhereUniqueInput {
  id: ID
  languageCode: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Manufacturer implements Node {
  id: ID!
  _version: Int!
  owner(where: AssignmentWhereInput, orderBy: AssignmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Assignment!]
  businessCover: Media
  businessAvatar: Media
  businessName: String
  businessAddress: Address
  businessPhone: String
  businessEmail: String
  businessLink: String
  businessLicense: String
  businessLicenseImages(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  enabled: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ManufacturerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ManufacturerEdge]!
  aggregate: AggregateManufacturer!
}

input ManufacturerCreateInput {
  id: ID
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  businessLicense: String
  enabled: Boolean
  owner: AssignmentCreateManyWithoutManufacturersInput
  businessCover: MediaCreateOneInput
  businessAvatar: MediaCreateOneInput
  businessAddress: AddressCreateOneInput
  businessLicenseImages: MediaCreateManyInput
}

input ManufacturerCreateManyWithoutOwnerInput {
  create: [ManufacturerCreateWithoutOwnerInput!]
  connect: [ManufacturerWhereUniqueInput!]
}

input ManufacturerCreateWithoutOwnerInput {
  id: ID
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  businessLicense: String
  enabled: Boolean
  businessCover: MediaCreateOneInput
  businessAvatar: MediaCreateOneInput
  businessAddress: AddressCreateOneInput
  businessLicenseImages: MediaCreateManyInput
}

"""An edge in a connection."""
type ManufacturerEdge {
  """The item at the end of the edge."""
  node: Manufacturer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ManufacturerOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  businessName_ASC
  businessName_DESC
  businessPhone_ASC
  businessPhone_DESC
  businessEmail_ASC
  businessEmail_DESC
  businessLink_ASC
  businessLink_DESC
  businessLicense_ASC
  businessLicense_DESC
  enabled_ASC
  enabled_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ManufacturerPreviousValues {
  id: ID!
  _version: Int!
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  businessLicense: String
  enabled: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ManufacturerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ManufacturerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ManufacturerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ManufacturerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  businessName: String

  """All values that are not equal to given value."""
  businessName_not: String

  """All values that are contained in given list."""
  businessName_in: [String!]

  """All values that are not contained in given list."""
  businessName_not_in: [String!]

  """All values less than the given value."""
  businessName_lt: String

  """All values less than or equal the given value."""
  businessName_lte: String

  """All values greater than the given value."""
  businessName_gt: String

  """All values greater than or equal the given value."""
  businessName_gte: String

  """All values containing the given string."""
  businessName_contains: String

  """All values not containing the given string."""
  businessName_not_contains: String

  """All values starting with the given string."""
  businessName_starts_with: String

  """All values not starting with the given string."""
  businessName_not_starts_with: String

  """All values ending with the given string."""
  businessName_ends_with: String

  """All values not ending with the given string."""
  businessName_not_ends_with: String
  businessPhone: String

  """All values that are not equal to given value."""
  businessPhone_not: String

  """All values that are contained in given list."""
  businessPhone_in: [String!]

  """All values that are not contained in given list."""
  businessPhone_not_in: [String!]

  """All values less than the given value."""
  businessPhone_lt: String

  """All values less than or equal the given value."""
  businessPhone_lte: String

  """All values greater than the given value."""
  businessPhone_gt: String

  """All values greater than or equal the given value."""
  businessPhone_gte: String

  """All values containing the given string."""
  businessPhone_contains: String

  """All values not containing the given string."""
  businessPhone_not_contains: String

  """All values starting with the given string."""
  businessPhone_starts_with: String

  """All values not starting with the given string."""
  businessPhone_not_starts_with: String

  """All values ending with the given string."""
  businessPhone_ends_with: String

  """All values not ending with the given string."""
  businessPhone_not_ends_with: String
  businessEmail: String

  """All values that are not equal to given value."""
  businessEmail_not: String

  """All values that are contained in given list."""
  businessEmail_in: [String!]

  """All values that are not contained in given list."""
  businessEmail_not_in: [String!]

  """All values less than the given value."""
  businessEmail_lt: String

  """All values less than or equal the given value."""
  businessEmail_lte: String

  """All values greater than the given value."""
  businessEmail_gt: String

  """All values greater than or equal the given value."""
  businessEmail_gte: String

  """All values containing the given string."""
  businessEmail_contains: String

  """All values not containing the given string."""
  businessEmail_not_contains: String

  """All values starting with the given string."""
  businessEmail_starts_with: String

  """All values not starting with the given string."""
  businessEmail_not_starts_with: String

  """All values ending with the given string."""
  businessEmail_ends_with: String

  """All values not ending with the given string."""
  businessEmail_not_ends_with: String
  businessLink: String

  """All values that are not equal to given value."""
  businessLink_not: String

  """All values that are contained in given list."""
  businessLink_in: [String!]

  """All values that are not contained in given list."""
  businessLink_not_in: [String!]

  """All values less than the given value."""
  businessLink_lt: String

  """All values less than or equal the given value."""
  businessLink_lte: String

  """All values greater than the given value."""
  businessLink_gt: String

  """All values greater than or equal the given value."""
  businessLink_gte: String

  """All values containing the given string."""
  businessLink_contains: String

  """All values not containing the given string."""
  businessLink_not_contains: String

  """All values starting with the given string."""
  businessLink_starts_with: String

  """All values not starting with the given string."""
  businessLink_not_starts_with: String

  """All values ending with the given string."""
  businessLink_ends_with: String

  """All values not ending with the given string."""
  businessLink_not_ends_with: String
  businessLicense: String

  """All values that are not equal to given value."""
  businessLicense_not: String

  """All values that are contained in given list."""
  businessLicense_in: [String!]

  """All values that are not contained in given list."""
  businessLicense_not_in: [String!]

  """All values less than the given value."""
  businessLicense_lt: String

  """All values less than or equal the given value."""
  businessLicense_lte: String

  """All values greater than the given value."""
  businessLicense_gt: String

  """All values greater than or equal the given value."""
  businessLicense_gte: String

  """All values containing the given string."""
  businessLicense_contains: String

  """All values not containing the given string."""
  businessLicense_not_contains: String

  """All values starting with the given string."""
  businessLicense_starts_with: String

  """All values not starting with the given string."""
  businessLicense_not_starts_with: String

  """All values ending with the given string."""
  businessLicense_ends_with: String

  """All values not ending with the given string."""
  businessLicense_not_ends_with: String
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ManufacturerSubscriptionPayload {
  mutation: MutationType!
  node: Manufacturer
  updatedFields: [String!]
  previousValues: ManufacturerPreviousValues
}

input ManufacturerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ManufacturerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ManufacturerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ManufacturerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ManufacturerWhereInput
}

input ManufacturerUpdateInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  businessLicense: String
  enabled: Boolean
  owner: AssignmentUpdateManyWithoutManufacturersInput
  businessCover: MediaUpdateOneInput
  businessAvatar: MediaUpdateOneInput
  businessAddress: AddressUpdateOneInput
  businessLicenseImages: MediaUpdateManyInput
}

input ManufacturerUpdateManyDataInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  businessLicense: String
  enabled: Boolean
}

input ManufacturerUpdateManyMutationInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  businessLicense: String
  enabled: Boolean
}

input ManufacturerUpdateManyWithoutOwnerInput {
  create: [ManufacturerCreateWithoutOwnerInput!]
  connect: [ManufacturerWhereUniqueInput!]
  set: [ManufacturerWhereUniqueInput!]
  disconnect: [ManufacturerWhereUniqueInput!]
  delete: [ManufacturerWhereUniqueInput!]
  update: [ManufacturerUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [ManufacturerUpdateManyWithWhereNestedInput!]
  deleteMany: [ManufacturerScalarWhereInput!]
  upsert: [ManufacturerUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ManufacturerUpdateManyWithWhereNestedInput {
  where: ManufacturerScalarWhereInput!
  data: ManufacturerUpdateManyDataInput!
}

input ManufacturerUpdateWithoutOwnerDataInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  businessLicense: String
  enabled: Boolean
  businessCover: MediaUpdateOneInput
  businessAvatar: MediaUpdateOneInput
  businessAddress: AddressUpdateOneInput
  businessLicenseImages: MediaUpdateManyInput
}

input ManufacturerUpdateWithWhereUniqueWithoutOwnerInput {
  where: ManufacturerWhereUniqueInput!
  data: ManufacturerUpdateWithoutOwnerDataInput!
}

input ManufacturerUpsertWithWhereUniqueWithoutOwnerInput {
  where: ManufacturerWhereUniqueInput!
  update: ManufacturerUpdateWithoutOwnerDataInput!
  create: ManufacturerCreateWithoutOwnerInput!
}

input ManufacturerWhereInput {
  """Logical AND on all given filters."""
  AND: [ManufacturerWhereInput!]

  """Logical OR on all given filters."""
  OR: [ManufacturerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ManufacturerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  businessName: String

  """All values that are not equal to given value."""
  businessName_not: String

  """All values that are contained in given list."""
  businessName_in: [String!]

  """All values that are not contained in given list."""
  businessName_not_in: [String!]

  """All values less than the given value."""
  businessName_lt: String

  """All values less than or equal the given value."""
  businessName_lte: String

  """All values greater than the given value."""
  businessName_gt: String

  """All values greater than or equal the given value."""
  businessName_gte: String

  """All values containing the given string."""
  businessName_contains: String

  """All values not containing the given string."""
  businessName_not_contains: String

  """All values starting with the given string."""
  businessName_starts_with: String

  """All values not starting with the given string."""
  businessName_not_starts_with: String

  """All values ending with the given string."""
  businessName_ends_with: String

  """All values not ending with the given string."""
  businessName_not_ends_with: String
  businessPhone: String

  """All values that are not equal to given value."""
  businessPhone_not: String

  """All values that are contained in given list."""
  businessPhone_in: [String!]

  """All values that are not contained in given list."""
  businessPhone_not_in: [String!]

  """All values less than the given value."""
  businessPhone_lt: String

  """All values less than or equal the given value."""
  businessPhone_lte: String

  """All values greater than the given value."""
  businessPhone_gt: String

  """All values greater than or equal the given value."""
  businessPhone_gte: String

  """All values containing the given string."""
  businessPhone_contains: String

  """All values not containing the given string."""
  businessPhone_not_contains: String

  """All values starting with the given string."""
  businessPhone_starts_with: String

  """All values not starting with the given string."""
  businessPhone_not_starts_with: String

  """All values ending with the given string."""
  businessPhone_ends_with: String

  """All values not ending with the given string."""
  businessPhone_not_ends_with: String
  businessEmail: String

  """All values that are not equal to given value."""
  businessEmail_not: String

  """All values that are contained in given list."""
  businessEmail_in: [String!]

  """All values that are not contained in given list."""
  businessEmail_not_in: [String!]

  """All values less than the given value."""
  businessEmail_lt: String

  """All values less than or equal the given value."""
  businessEmail_lte: String

  """All values greater than the given value."""
  businessEmail_gt: String

  """All values greater than or equal the given value."""
  businessEmail_gte: String

  """All values containing the given string."""
  businessEmail_contains: String

  """All values not containing the given string."""
  businessEmail_not_contains: String

  """All values starting with the given string."""
  businessEmail_starts_with: String

  """All values not starting with the given string."""
  businessEmail_not_starts_with: String

  """All values ending with the given string."""
  businessEmail_ends_with: String

  """All values not ending with the given string."""
  businessEmail_not_ends_with: String
  businessLink: String

  """All values that are not equal to given value."""
  businessLink_not: String

  """All values that are contained in given list."""
  businessLink_in: [String!]

  """All values that are not contained in given list."""
  businessLink_not_in: [String!]

  """All values less than the given value."""
  businessLink_lt: String

  """All values less than or equal the given value."""
  businessLink_lte: String

  """All values greater than the given value."""
  businessLink_gt: String

  """All values greater than or equal the given value."""
  businessLink_gte: String

  """All values containing the given string."""
  businessLink_contains: String

  """All values not containing the given string."""
  businessLink_not_contains: String

  """All values starting with the given string."""
  businessLink_starts_with: String

  """All values not starting with the given string."""
  businessLink_not_starts_with: String

  """All values ending with the given string."""
  businessLink_ends_with: String

  """All values not ending with the given string."""
  businessLink_not_ends_with: String
  businessLicense: String

  """All values that are not equal to given value."""
  businessLicense_not: String

  """All values that are contained in given list."""
  businessLicense_in: [String!]

  """All values that are not contained in given list."""
  businessLicense_not_in: [String!]

  """All values less than the given value."""
  businessLicense_lt: String

  """All values less than or equal the given value."""
  businessLicense_lte: String

  """All values greater than the given value."""
  businessLicense_gt: String

  """All values greater than or equal the given value."""
  businessLicense_gte: String

  """All values containing the given string."""
  businessLicense_contains: String

  """All values not containing the given string."""
  businessLicense_not_contains: String

  """All values starting with the given string."""
  businessLicense_starts_with: String

  """All values not starting with the given string."""
  businessLicense_not_starts_with: String

  """All values ending with the given string."""
  businessLicense_ends_with: String

  """All values not ending with the given string."""
  businessLicense_not_ends_with: String
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  owner_every: AssignmentWhereInput
  owner_some: AssignmentWhereInput
  owner_none: AssignmentWhereInput
  businessCover: MediaWhereInput
  businessAvatar: MediaWhereInput
  businessAddress: AddressWhereInput
  businessLicenseImages_every: MediaWhereInput
  businessLicenseImages_some: MediaWhereInput
  businessLicenseImages_none: MediaWhereInput
}

input ManufacturerWhereUniqueInput {
  id: ID
  businessName: String
  businessLink: String
}

type Media implements Node {
  id: ID!
  _version: Int!
  name: String
  ext: String
  mime: String
  size: Int
  hash: String
  sha256: String
  uri: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type MediaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MediaEdge]!
  aggregate: AggregateMedia!
}

input MediaCreateInput {
  id: ID
  _version: Int
  name: String
  ext: String
  mime: String
  size: Int
  hash: String
  sha256: String
  uri: String
}

input MediaCreateManyInput {
  create: [MediaCreateInput!]
  connect: [MediaWhereUniqueInput!]
}

input MediaCreateOneInput {
  create: MediaCreateInput
  connect: MediaWhereUniqueInput
}

"""An edge in a connection."""
type MediaEdge {
  """The item at the end of the edge."""
  node: Media!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MediaOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  ext_ASC
  ext_DESC
  mime_ASC
  mime_DESC
  size_ASC
  size_DESC
  hash_ASC
  hash_DESC
  sha256_ASC
  sha256_DESC
  uri_ASC
  uri_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MediaPreviousValues {
  id: ID!
  _version: Int!
  name: String
  ext: String
  mime: String
  size: Int
  hash: String
  sha256: String
  uri: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MediaScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MediaScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediaScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediaScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ext: String

  """All values that are not equal to given value."""
  ext_not: String

  """All values that are contained in given list."""
  ext_in: [String!]

  """All values that are not contained in given list."""
  ext_not_in: [String!]

  """All values less than the given value."""
  ext_lt: String

  """All values less than or equal the given value."""
  ext_lte: String

  """All values greater than the given value."""
  ext_gt: String

  """All values greater than or equal the given value."""
  ext_gte: String

  """All values containing the given string."""
  ext_contains: String

  """All values not containing the given string."""
  ext_not_contains: String

  """All values starting with the given string."""
  ext_starts_with: String

  """All values not starting with the given string."""
  ext_not_starts_with: String

  """All values ending with the given string."""
  ext_ends_with: String

  """All values not ending with the given string."""
  ext_not_ends_with: String
  mime: String

  """All values that are not equal to given value."""
  mime_not: String

  """All values that are contained in given list."""
  mime_in: [String!]

  """All values that are not contained in given list."""
  mime_not_in: [String!]

  """All values less than the given value."""
  mime_lt: String

  """All values less than or equal the given value."""
  mime_lte: String

  """All values greater than the given value."""
  mime_gt: String

  """All values greater than or equal the given value."""
  mime_gte: String

  """All values containing the given string."""
  mime_contains: String

  """All values not containing the given string."""
  mime_not_contains: String

  """All values starting with the given string."""
  mime_starts_with: String

  """All values not starting with the given string."""
  mime_not_starts_with: String

  """All values ending with the given string."""
  mime_ends_with: String

  """All values not ending with the given string."""
  mime_not_ends_with: String
  size: Int

  """All values that are not equal to given value."""
  size_not: Int

  """All values that are contained in given list."""
  size_in: [Int!]

  """All values that are not contained in given list."""
  size_not_in: [Int!]

  """All values less than the given value."""
  size_lt: Int

  """All values less than or equal the given value."""
  size_lte: Int

  """All values greater than the given value."""
  size_gt: Int

  """All values greater than or equal the given value."""
  size_gte: Int
  hash: String

  """All values that are not equal to given value."""
  hash_not: String

  """All values that are contained in given list."""
  hash_in: [String!]

  """All values that are not contained in given list."""
  hash_not_in: [String!]

  """All values less than the given value."""
  hash_lt: String

  """All values less than or equal the given value."""
  hash_lte: String

  """All values greater than the given value."""
  hash_gt: String

  """All values greater than or equal the given value."""
  hash_gte: String

  """All values containing the given string."""
  hash_contains: String

  """All values not containing the given string."""
  hash_not_contains: String

  """All values starting with the given string."""
  hash_starts_with: String

  """All values not starting with the given string."""
  hash_not_starts_with: String

  """All values ending with the given string."""
  hash_ends_with: String

  """All values not ending with the given string."""
  hash_not_ends_with: String
  sha256: String

  """All values that are not equal to given value."""
  sha256_not: String

  """All values that are contained in given list."""
  sha256_in: [String!]

  """All values that are not contained in given list."""
  sha256_not_in: [String!]

  """All values less than the given value."""
  sha256_lt: String

  """All values less than or equal the given value."""
  sha256_lte: String

  """All values greater than the given value."""
  sha256_gt: String

  """All values greater than or equal the given value."""
  sha256_gte: String

  """All values containing the given string."""
  sha256_contains: String

  """All values not containing the given string."""
  sha256_not_contains: String

  """All values starting with the given string."""
  sha256_starts_with: String

  """All values not starting with the given string."""
  sha256_not_starts_with: String

  """All values ending with the given string."""
  sha256_ends_with: String

  """All values not ending with the given string."""
  sha256_not_ends_with: String
  uri: String

  """All values that are not equal to given value."""
  uri_not: String

  """All values that are contained in given list."""
  uri_in: [String!]

  """All values that are not contained in given list."""
  uri_not_in: [String!]

  """All values less than the given value."""
  uri_lt: String

  """All values less than or equal the given value."""
  uri_lte: String

  """All values greater than the given value."""
  uri_gt: String

  """All values greater than or equal the given value."""
  uri_gte: String

  """All values containing the given string."""
  uri_contains: String

  """All values not containing the given string."""
  uri_not_contains: String

  """All values starting with the given string."""
  uri_starts_with: String

  """All values not starting with the given string."""
  uri_not_starts_with: String

  """All values ending with the given string."""
  uri_ends_with: String

  """All values not ending with the given string."""
  uri_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type MediaSubscriptionPayload {
  mutation: MutationType!
  node: Media
  updatedFields: [String!]
  previousValues: MediaPreviousValues
}

input MediaSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MediaSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediaSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediaSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MediaWhereInput
}

input MediaUpdateDataInput {
  _version: Int
  name: String
  ext: String
  mime: String
  size: Int
  hash: String
  sha256: String
  uri: String
}

input MediaUpdateInput {
  _version: Int
  name: String
  ext: String
  mime: String
  size: Int
  hash: String
  sha256: String
  uri: String
}

input MediaUpdateManyDataInput {
  _version: Int
  name: String
  ext: String
  mime: String
  size: Int
  hash: String
  sha256: String
  uri: String
}

input MediaUpdateManyInput {
  create: [MediaCreateInput!]
  connect: [MediaWhereUniqueInput!]
  set: [MediaWhereUniqueInput!]
  disconnect: [MediaWhereUniqueInput!]
  delete: [MediaWhereUniqueInput!]
  update: [MediaUpdateWithWhereUniqueNestedInput!]
  updateMany: [MediaUpdateManyWithWhereNestedInput!]
  deleteMany: [MediaScalarWhereInput!]
  upsert: [MediaUpsertWithWhereUniqueNestedInput!]
}

input MediaUpdateManyMutationInput {
  _version: Int
  name: String
  ext: String
  mime: String
  size: Int
  hash: String
  sha256: String
  uri: String
}

input MediaUpdateManyWithWhereNestedInput {
  where: MediaScalarWhereInput!
  data: MediaUpdateManyDataInput!
}

input MediaUpdateOneInput {
  create: MediaCreateInput
  connect: MediaWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MediaUpdateDataInput
  upsert: MediaUpsertNestedInput
}

input MediaUpdateWithWhereUniqueNestedInput {
  where: MediaWhereUniqueInput!
  data: MediaUpdateDataInput!
}

input MediaUpsertNestedInput {
  update: MediaUpdateDataInput!
  create: MediaCreateInput!
}

input MediaUpsertWithWhereUniqueNestedInput {
  where: MediaWhereUniqueInput!
  update: MediaUpdateDataInput!
  create: MediaCreateInput!
}

input MediaWhereInput {
  """Logical AND on all given filters."""
  AND: [MediaWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ext: String

  """All values that are not equal to given value."""
  ext_not: String

  """All values that are contained in given list."""
  ext_in: [String!]

  """All values that are not contained in given list."""
  ext_not_in: [String!]

  """All values less than the given value."""
  ext_lt: String

  """All values less than or equal the given value."""
  ext_lte: String

  """All values greater than the given value."""
  ext_gt: String

  """All values greater than or equal the given value."""
  ext_gte: String

  """All values containing the given string."""
  ext_contains: String

  """All values not containing the given string."""
  ext_not_contains: String

  """All values starting with the given string."""
  ext_starts_with: String

  """All values not starting with the given string."""
  ext_not_starts_with: String

  """All values ending with the given string."""
  ext_ends_with: String

  """All values not ending with the given string."""
  ext_not_ends_with: String
  mime: String

  """All values that are not equal to given value."""
  mime_not: String

  """All values that are contained in given list."""
  mime_in: [String!]

  """All values that are not contained in given list."""
  mime_not_in: [String!]

  """All values less than the given value."""
  mime_lt: String

  """All values less than or equal the given value."""
  mime_lte: String

  """All values greater than the given value."""
  mime_gt: String

  """All values greater than or equal the given value."""
  mime_gte: String

  """All values containing the given string."""
  mime_contains: String

  """All values not containing the given string."""
  mime_not_contains: String

  """All values starting with the given string."""
  mime_starts_with: String

  """All values not starting with the given string."""
  mime_not_starts_with: String

  """All values ending with the given string."""
  mime_ends_with: String

  """All values not ending with the given string."""
  mime_not_ends_with: String
  size: Int

  """All values that are not equal to given value."""
  size_not: Int

  """All values that are contained in given list."""
  size_in: [Int!]

  """All values that are not contained in given list."""
  size_not_in: [Int!]

  """All values less than the given value."""
  size_lt: Int

  """All values less than or equal the given value."""
  size_lte: Int

  """All values greater than the given value."""
  size_gt: Int

  """All values greater than or equal the given value."""
  size_gte: Int
  hash: String

  """All values that are not equal to given value."""
  hash_not: String

  """All values that are contained in given list."""
  hash_in: [String!]

  """All values that are not contained in given list."""
  hash_not_in: [String!]

  """All values less than the given value."""
  hash_lt: String

  """All values less than or equal the given value."""
  hash_lte: String

  """All values greater than the given value."""
  hash_gt: String

  """All values greater than or equal the given value."""
  hash_gte: String

  """All values containing the given string."""
  hash_contains: String

  """All values not containing the given string."""
  hash_not_contains: String

  """All values starting with the given string."""
  hash_starts_with: String

  """All values not starting with the given string."""
  hash_not_starts_with: String

  """All values ending with the given string."""
  hash_ends_with: String

  """All values not ending with the given string."""
  hash_not_ends_with: String
  sha256: String

  """All values that are not equal to given value."""
  sha256_not: String

  """All values that are contained in given list."""
  sha256_in: [String!]

  """All values that are not contained in given list."""
  sha256_not_in: [String!]

  """All values less than the given value."""
  sha256_lt: String

  """All values less than or equal the given value."""
  sha256_lte: String

  """All values greater than the given value."""
  sha256_gt: String

  """All values greater than or equal the given value."""
  sha256_gte: String

  """All values containing the given string."""
  sha256_contains: String

  """All values not containing the given string."""
  sha256_not_contains: String

  """All values starting with the given string."""
  sha256_starts_with: String

  """All values not starting with the given string."""
  sha256_not_starts_with: String

  """All values ending with the given string."""
  sha256_ends_with: String

  """All values not ending with the given string."""
  sha256_not_ends_with: String
  uri: String

  """All values that are not equal to given value."""
  uri_not: String

  """All values that are contained in given list."""
  uri_in: [String!]

  """All values that are not contained in given list."""
  uri_not_in: [String!]

  """All values less than the given value."""
  uri_lt: String

  """All values less than or equal the given value."""
  uri_lte: String

  """All values greater than the given value."""
  uri_gt: String

  """All values greater than or equal the given value."""
  uri_gte: String

  """All values containing the given string."""
  uri_contains: String

  """All values not containing the given string."""
  uri_not_contains: String

  """All values starting with the given string."""
  uri_starts_with: String

  """All values not starting with the given string."""
  uri_not_starts_with: String

  """All values ending with the given string."""
  uri_ends_with: String

  """All values not ending with the given string."""
  uri_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input MediaWhereUniqueInput {
  id: ID
}

type Mutation {
  createSecurityQuestion(data: SecurityQuestionCreateInput!): SecurityQuestion!
  createSecurityAnswer(data: SecurityAnswerCreateInput!): SecurityAnswer!
  createAssignment(data: AssignmentCreateInput!): Assignment!
  createPolicy(data: PolicyCreateInput!): Policy!
  createManufacturer(data: ManufacturerCreateInput!): Manufacturer!
  createBrand(data: BrandCreateInput!): Brand!
  createProductTemplate(data: ProductTemplateCreateInput!): ProductTemplate!
  createProductAttribute(data: ProductAttributeCreateInput!): ProductAttribute!
  createProductAttributeValue(data: ProductAttributeValueCreateInput!): ProductAttributeValue!
  createProductRetailer(data: ProductRetailerCreateInput!): ProductRetailer!
  createReview(data: ReviewCreateInput!): Review!
  createSupportCase(data: SupportCaseCreateInput!): SupportCase!
  createSupportCorrespondence(data: SupportCorrespondenceCreateInput!): SupportCorrespondence!
  createLanguage(data: LanguageCreateInput!): Language!
  createTrans_Catalog(data: Trans_CatalogCreateInput!): Trans_Catalog!
  createTrans_Brand(data: Trans_BrandCreateInput!): Trans_Brand!
  createProductOption(data: ProductOptionCreateInput!): ProductOption!
  createSupportStatus(data: SupportStatusCreateInput!): SupportStatus!
  createSupportCategory(data: SupportCategoryCreateInput!): SupportCategory!
  createProduct(data: ProductCreateInput!): Product!
  createCatalog(data: CatalogCreateInput!): Catalog!
  createPermission(data: PermissionCreateInput!): Permission!
  createUser(data: UserCreateInput!): User!
  createAddress(data: AddressCreateInput!): Address!
  createMedia(data: MediaCreateInput!): Media!
  createRetailer(data: RetailerCreateInput!): Retailer!
  createRole(data: RoleCreateInput!): Role!
  createDescription(data: DescriptionCreateInput!): Description!
  createSupportSeverity(data: SupportSeverityCreateInput!): SupportSeverity!
  updateSecurityQuestion(data: SecurityQuestionUpdateInput!, where: SecurityQuestionWhereUniqueInput!): SecurityQuestion
  updateSecurityAnswer(data: SecurityAnswerUpdateInput!, where: SecurityAnswerWhereUniqueInput!): SecurityAnswer
  updateAssignment(data: AssignmentUpdateInput!, where: AssignmentWhereUniqueInput!): Assignment
<<<<<<< HEAD
  updateResolversClaim(data: ResolversClaimUpdateInput!, where: ResolversClaimWhereUniqueInput!): ResolversClaim
=======
  updatePolicy(data: PolicyUpdateInput!, where: PolicyWhereUniqueInput!): Policy
>>>>>>> origin/retailer_implementation
  updateManufacturer(data: ManufacturerUpdateInput!, where: ManufacturerWhereUniqueInput!): Manufacturer
  updateBrand(data: BrandUpdateInput!, where: BrandWhereUniqueInput!): Brand
  updateProductTemplate(data: ProductTemplateUpdateInput!, where: ProductTemplateWhereUniqueInput!): ProductTemplate
  updateProductAttribute(data: ProductAttributeUpdateInput!, where: ProductAttributeWhereUniqueInput!): ProductAttribute
  updateProductAttributeValue(data: ProductAttributeValueUpdateInput!, where: ProductAttributeValueWhereUniqueInput!): ProductAttributeValue
  updateProductRetailer(data: ProductRetailerUpdateInput!, where: ProductRetailerWhereUniqueInput!): ProductRetailer
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateSupportCase(data: SupportCaseUpdateInput!, where: SupportCaseWhereUniqueInput!): SupportCase
  updateSupportCorrespondence(data: SupportCorrespondenceUpdateInput!, where: SupportCorrespondenceWhereUniqueInput!): SupportCorrespondence
  updateLanguage(data: LanguageUpdateInput!, where: LanguageWhereUniqueInput!): Language
  updateTrans_Catalog(data: Trans_CatalogUpdateInput!, where: Trans_CatalogWhereUniqueInput!): Trans_Catalog
  updateTrans_Brand(data: Trans_BrandUpdateInput!, where: Trans_BrandWhereUniqueInput!): Trans_Brand
  updateProductOption(data: ProductOptionUpdateInput!, where: ProductOptionWhereUniqueInput!): ProductOption
  updateSupportStatus(data: SupportStatusUpdateInput!, where: SupportStatusWhereUniqueInput!): SupportStatus
<<<<<<< HEAD
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateSupportCategory(data: SupportCategoryUpdateInput!, where: SupportCategoryWhereUniqueInput!): SupportCategory
=======
  updateSupportCategory(data: SupportCategoryUpdateInput!, where: SupportCategoryWhereUniqueInput!): SupportCategory
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
>>>>>>> origin/retailer_implementation
  updateCatalog(data: CatalogUpdateInput!, where: CatalogWhereUniqueInput!): Catalog
  updatePermission(data: PermissionUpdateInput!, where: PermissionWhereUniqueInput!): Permission
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateMedia(data: MediaUpdateInput!, where: MediaWhereUniqueInput!): Media
  updateRetailer(data: RetailerUpdateInput!, where: RetailerWhereUniqueInput!): Retailer
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateDescription(data: DescriptionUpdateInput!, where: DescriptionWhereUniqueInput!): Description
  updateSupportSeverity(data: SupportSeverityUpdateInput!, where: SupportSeverityWhereUniqueInput!): SupportSeverity
  deleteSecurityQuestion(where: SecurityQuestionWhereUniqueInput!): SecurityQuestion
  deleteSecurityAnswer(where: SecurityAnswerWhereUniqueInput!): SecurityAnswer
  deleteAssignment(where: AssignmentWhereUniqueInput!): Assignment
<<<<<<< HEAD
  deleteResolversClaim(where: ResolversClaimWhereUniqueInput!): ResolversClaim
=======
  deletePolicy(where: PolicyWhereUniqueInput!): Policy
>>>>>>> origin/retailer_implementation
  deleteManufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteProductTemplate(where: ProductTemplateWhereUniqueInput!): ProductTemplate
  deleteProductAttribute(where: ProductAttributeWhereUniqueInput!): ProductAttribute
  deleteProductAttributeValue(where: ProductAttributeValueWhereUniqueInput!): ProductAttributeValue
  deleteProductRetailer(where: ProductRetailerWhereUniqueInput!): ProductRetailer
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteSupportCase(where: SupportCaseWhereUniqueInput!): SupportCase
  deleteSupportCorrespondence(where: SupportCorrespondenceWhereUniqueInput!): SupportCorrespondence
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteTrans_Catalog(where: Trans_CatalogWhereUniqueInput!): Trans_Catalog
  deleteTrans_Brand(where: Trans_BrandWhereUniqueInput!): Trans_Brand
  deleteProductOption(where: ProductOptionWhereUniqueInput!): ProductOption
  deleteSupportStatus(where: SupportStatusWhereUniqueInput!): SupportStatus
<<<<<<< HEAD
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteSupportCategory(where: SupportCategoryWhereUniqueInput!): SupportCategory
=======
  deleteSupportCategory(where: SupportCategoryWhereUniqueInput!): SupportCategory
  deleteProduct(where: ProductWhereUniqueInput!): Product
>>>>>>> origin/retailer_implementation
  deleteCatalog(where: CatalogWhereUniqueInput!): Catalog
  deletePermission(where: PermissionWhereUniqueInput!): Permission
  deleteUser(where: UserWhereUniqueInput!): User
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteMedia(where: MediaWhereUniqueInput!): Media
  deleteRetailer(where: RetailerWhereUniqueInput!): Retailer
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteDescription(where: DescriptionWhereUniqueInput!): Description
  deleteSupportSeverity(where: SupportSeverityWhereUniqueInput!): SupportSeverity
  upsertSecurityQuestion(where: SecurityQuestionWhereUniqueInput!, create: SecurityQuestionCreateInput!, update: SecurityQuestionUpdateInput!): SecurityQuestion!
  upsertSecurityAnswer(where: SecurityAnswerWhereUniqueInput!, create: SecurityAnswerCreateInput!, update: SecurityAnswerUpdateInput!): SecurityAnswer!
  upsertAssignment(where: AssignmentWhereUniqueInput!, create: AssignmentCreateInput!, update: AssignmentUpdateInput!): Assignment!
<<<<<<< HEAD
  upsertResolversClaim(where: ResolversClaimWhereUniqueInput!, create: ResolversClaimCreateInput!, update: ResolversClaimUpdateInput!): ResolversClaim!
=======
  upsertPolicy(where: PolicyWhereUniqueInput!, create: PolicyCreateInput!, update: PolicyUpdateInput!): Policy!
>>>>>>> origin/retailer_implementation
  upsertManufacturer(where: ManufacturerWhereUniqueInput!, create: ManufacturerCreateInput!, update: ManufacturerUpdateInput!): Manufacturer!
  upsertBrand(where: BrandWhereUniqueInput!, create: BrandCreateInput!, update: BrandUpdateInput!): Brand!
  upsertProductTemplate(where: ProductTemplateWhereUniqueInput!, create: ProductTemplateCreateInput!, update: ProductTemplateUpdateInput!): ProductTemplate!
  upsertProductAttribute(where: ProductAttributeWhereUniqueInput!, create: ProductAttributeCreateInput!, update: ProductAttributeUpdateInput!): ProductAttribute!
  upsertProductAttributeValue(where: ProductAttributeValueWhereUniqueInput!, create: ProductAttributeValueCreateInput!, update: ProductAttributeValueUpdateInput!): ProductAttributeValue!
  upsertProductRetailer(where: ProductRetailerWhereUniqueInput!, create: ProductRetailerCreateInput!, update: ProductRetailerUpdateInput!): ProductRetailer!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  upsertSupportCase(where: SupportCaseWhereUniqueInput!, create: SupportCaseCreateInput!, update: SupportCaseUpdateInput!): SupportCase!
  upsertSupportCorrespondence(where: SupportCorrespondenceWhereUniqueInput!, create: SupportCorrespondenceCreateInput!, update: SupportCorrespondenceUpdateInput!): SupportCorrespondence!
  upsertLanguage(where: LanguageWhereUniqueInput!, create: LanguageCreateInput!, update: LanguageUpdateInput!): Language!
  upsertTrans_Catalog(where: Trans_CatalogWhereUniqueInput!, create: Trans_CatalogCreateInput!, update: Trans_CatalogUpdateInput!): Trans_Catalog!
  upsertTrans_Brand(where: Trans_BrandWhereUniqueInput!, create: Trans_BrandCreateInput!, update: Trans_BrandUpdateInput!): Trans_Brand!
  upsertProductOption(where: ProductOptionWhereUniqueInput!, create: ProductOptionCreateInput!, update: ProductOptionUpdateInput!): ProductOption!
  upsertSupportStatus(where: SupportStatusWhereUniqueInput!, create: SupportStatusCreateInput!, update: SupportStatusUpdateInput!): SupportStatus!
<<<<<<< HEAD
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertSupportCategory(where: SupportCategoryWhereUniqueInput!, create: SupportCategoryCreateInput!, update: SupportCategoryUpdateInput!): SupportCategory!
=======
  upsertSupportCategory(where: SupportCategoryWhereUniqueInput!, create: SupportCategoryCreateInput!, update: SupportCategoryUpdateInput!): SupportCategory!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
>>>>>>> origin/retailer_implementation
  upsertCatalog(where: CatalogWhereUniqueInput!, create: CatalogCreateInput!, update: CatalogUpdateInput!): Catalog!
  upsertPermission(where: PermissionWhereUniqueInput!, create: PermissionCreateInput!, update: PermissionUpdateInput!): Permission!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  upsertMedia(where: MediaWhereUniqueInput!, create: MediaCreateInput!, update: MediaUpdateInput!): Media!
  upsertRetailer(where: RetailerWhereUniqueInput!, create: RetailerCreateInput!, update: RetailerUpdateInput!): Retailer!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertDescription(where: DescriptionWhereUniqueInput!, create: DescriptionCreateInput!, update: DescriptionUpdateInput!): Description!
  upsertSupportSeverity(where: SupportSeverityWhereUniqueInput!, create: SupportSeverityCreateInput!, update: SupportSeverityUpdateInput!): SupportSeverity!
  updateManySecurityQuestions(data: SecurityQuestionUpdateManyMutationInput!, where: SecurityQuestionWhereInput): BatchPayload!
  updateManySecurityAnswers(data: SecurityAnswerUpdateManyMutationInput!, where: SecurityAnswerWhereInput): BatchPayload!
  updateManyAssignments(data: AssignmentUpdateManyMutationInput!, where: AssignmentWhereInput): BatchPayload!
<<<<<<< HEAD
  updateManyResolversClaims(data: ResolversClaimUpdateManyMutationInput!, where: ResolversClaimWhereInput): BatchPayload!
=======
  updateManyPolicies(data: PolicyUpdateManyMutationInput!, where: PolicyWhereInput): BatchPayload!
>>>>>>> origin/retailer_implementation
  updateManyManufacturers(data: ManufacturerUpdateManyMutationInput!, where: ManufacturerWhereInput): BatchPayload!
  updateManyBrands(data: BrandUpdateManyMutationInput!, where: BrandWhereInput): BatchPayload!
  updateManyProductTemplates(data: ProductTemplateUpdateManyMutationInput!, where: ProductTemplateWhereInput): BatchPayload!
  updateManyProductAttributes(data: ProductAttributeUpdateManyMutationInput!, where: ProductAttributeWhereInput): BatchPayload!
  updateManyProductAttributeValues(data: ProductAttributeValueUpdateManyMutationInput!, where: ProductAttributeValueWhereInput): BatchPayload!
  updateManyProductRetailers(data: ProductRetailerUpdateManyMutationInput!, where: ProductRetailerWhereInput): BatchPayload!
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  updateManySupportCases(data: SupportCaseUpdateManyMutationInput!, where: SupportCaseWhereInput): BatchPayload!
  updateManySupportCorrespondences(data: SupportCorrespondenceUpdateManyMutationInput!, where: SupportCorrespondenceWhereInput): BatchPayload!
  updateManyLanguages(data: LanguageUpdateManyMutationInput!, where: LanguageWhereInput): BatchPayload!
  updateManyTrans_Catalogs(data: Trans_CatalogUpdateManyMutationInput!, where: Trans_CatalogWhereInput): BatchPayload!
  updateManyTrans_Brands(data: Trans_BrandUpdateManyMutationInput!, where: Trans_BrandWhereInput): BatchPayload!
  updateManyProductOptions(data: ProductOptionUpdateManyMutationInput!, where: ProductOptionWhereInput): BatchPayload!
  updateManySupportStatuses(data: SupportStatusUpdateManyMutationInput!, where: SupportStatusWhereInput): BatchPayload!
<<<<<<< HEAD
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateManySupportCategories(data: SupportCategoryUpdateManyMutationInput!, where: SupportCategoryWhereInput): BatchPayload!
=======
  updateManySupportCategories(data: SupportCategoryUpdateManyMutationInput!, where: SupportCategoryWhereInput): BatchPayload!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
>>>>>>> origin/retailer_implementation
  updateManyCatalogs(data: CatalogUpdateManyMutationInput!, where: CatalogWhereInput): BatchPayload!
  updateManyPermissions(data: PermissionUpdateManyMutationInput!, where: PermissionWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  updateManyMedias(data: MediaUpdateManyMutationInput!, where: MediaWhereInput): BatchPayload!
  updateManyRetailers(data: RetailerUpdateManyMutationInput!, where: RetailerWhereInput): BatchPayload!
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  updateManyDescriptions(data: DescriptionUpdateManyMutationInput!, where: DescriptionWhereInput): BatchPayload!
  updateManySupportSeverities(data: SupportSeverityUpdateManyMutationInput!, where: SupportSeverityWhereInput): BatchPayload!
  deleteManySecurityQuestions(where: SecurityQuestionWhereInput): BatchPayload!
  deleteManySecurityAnswers(where: SecurityAnswerWhereInput): BatchPayload!
  deleteManyAssignments(where: AssignmentWhereInput): BatchPayload!
<<<<<<< HEAD
  deleteManyResolversClaims(where: ResolversClaimWhereInput): BatchPayload!
=======
  deleteManyPolicies(where: PolicyWhereInput): BatchPayload!
>>>>>>> origin/retailer_implementation
  deleteManyManufacturers(where: ManufacturerWhereInput): BatchPayload!
  deleteManyBrands(where: BrandWhereInput): BatchPayload!
  deleteManyProductTemplates(where: ProductTemplateWhereInput): BatchPayload!
  deleteManyProductAttributes(where: ProductAttributeWhereInput): BatchPayload!
  deleteManyProductAttributeValues(where: ProductAttributeValueWhereInput): BatchPayload!
  deleteManyProductRetailers(where: ProductRetailerWhereInput): BatchPayload!
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  deleteManySupportCases(where: SupportCaseWhereInput): BatchPayload!
  deleteManySupportCorrespondences(where: SupportCorrespondenceWhereInput): BatchPayload!
  deleteManyLanguages(where: LanguageWhereInput): BatchPayload!
  deleteManyTrans_Catalogs(where: Trans_CatalogWhereInput): BatchPayload!
  deleteManyTrans_Brands(where: Trans_BrandWhereInput): BatchPayload!
  deleteManyProductOptions(where: ProductOptionWhereInput): BatchPayload!
  deleteManySupportStatuses(where: SupportStatusWhereInput): BatchPayload!
<<<<<<< HEAD
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManySupportCategories(where: SupportCategoryWhereInput): BatchPayload!
=======
  deleteManySupportCategories(where: SupportCategoryWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
>>>>>>> origin/retailer_implementation
  deleteManyCatalogs(where: CatalogWhereInput): BatchPayload!
  deleteManyPermissions(where: PermissionWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  deleteManyMedias(where: MediaWhereInput): BatchPayload!
  deleteManyRetailers(where: RetailerWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  deleteManyDescriptions(where: DescriptionWhereInput): BatchPayload!
  deleteManySupportSeverities(where: SupportSeverityWhereInput): BatchPayload!
<<<<<<< HEAD
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Permission implements Node {
  id: ID!
  _version: Int!
  type: String
  priority: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PermissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PermissionEdge]!
  aggregate: AggregatePermission!
}

=======
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Permission implements Node {
  id: ID!
  _version: Int!
  type: String
  priority: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PermissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PermissionEdge]!
  aggregate: AggregatePermission!
}

>>>>>>> origin/retailer_implementation
input PermissionCreateInput {
  id: ID
  _version: Int
  type: String
  priority: Int
}

input PermissionCreateManyInput {
  create: [PermissionCreateInput!]
  connect: [PermissionWhereUniqueInput!]
}

"""An edge in a connection."""
type PermissionEdge {
  """The item at the end of the edge."""
  node: Permission!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PermissionOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  type_ASC
  type_DESC
  priority_ASC
  priority_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PermissionPreviousValues {
  id: ID!
  _version: Int!
  type: String
  priority: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PermissionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PermissionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PermissionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PermissionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  priority: Int

  """All values that are not equal to given value."""
  priority_not: Int

  """All values that are contained in given list."""
  priority_in: [Int!]

  """All values that are not contained in given list."""
  priority_not_in: [Int!]

  """All values less than the given value."""
  priority_lt: Int

  """All values less than or equal the given value."""
  priority_lte: Int

  """All values greater than the given value."""
  priority_gt: Int

  """All values greater than or equal the given value."""
  priority_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type PermissionSubscriptionPayload {
  mutation: MutationType!
  node: Permission
  updatedFields: [String!]
  previousValues: PermissionPreviousValues
}

input PermissionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PermissionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PermissionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PermissionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PermissionWhereInput
}

input PermissionUpdateDataInput {
  _version: Int
  type: String
  priority: Int
}

input PermissionUpdateInput {
  _version: Int
  type: String
  priority: Int
}

input PermissionUpdateManyDataInput {
  _version: Int
  type: String
  priority: Int
}

input PermissionUpdateManyInput {
  create: [PermissionCreateInput!]
  connect: [PermissionWhereUniqueInput!]
  set: [PermissionWhereUniqueInput!]
  disconnect: [PermissionWhereUniqueInput!]
  delete: [PermissionWhereUniqueInput!]
  update: [PermissionUpdateWithWhereUniqueNestedInput!]
  updateMany: [PermissionUpdateManyWithWhereNestedInput!]
  deleteMany: [PermissionScalarWhereInput!]
  upsert: [PermissionUpsertWithWhereUniqueNestedInput!]
}

input PermissionUpdateManyMutationInput {
  _version: Int
  type: String
  priority: Int
}

input PermissionUpdateManyWithWhereNestedInput {
  where: PermissionScalarWhereInput!
  data: PermissionUpdateManyDataInput!
}

input PermissionUpdateWithWhereUniqueNestedInput {
  where: PermissionWhereUniqueInput!
  data: PermissionUpdateDataInput!
}

input PermissionUpsertWithWhereUniqueNestedInput {
  where: PermissionWhereUniqueInput!
  update: PermissionUpdateDataInput!
  create: PermissionCreateInput!
<<<<<<< HEAD
}

input PermissionWhereInput {
  """Logical AND on all given filters."""
  AND: [PermissionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PermissionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PermissionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  priority: Int

  """All values that are not equal to given value."""
  priority_not: Int

  """All values that are contained in given list."""
  priority_in: [Int!]

  """All values that are not contained in given list."""
  priority_not_in: [Int!]

  """All values less than the given value."""
  priority_lt: Int

  """All values less than or equal the given value."""
  priority_lte: Int

  """All values greater than the given value."""
  priority_gt: Int

  """All values greater than or equal the given value."""
  priority_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input PermissionWhereUniqueInput {
  id: ID
  type: String
}

enum PrismaDatabase {
  default
}

type Product implements Node {
  id: ID!
  _version: Int!
  productTemplate: ProductTemplate
  productMedias(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  productRetailers(where: ProductRetailerWhereInput, orderBy: ProductRetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductRetailer!]
  sku: String
  options(where: ProductOptionWhereInput, orderBy: ProductOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductOption!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductAttribute implements Node {
  id: ID!
  _version: Int!
  name: String
  values(where: ProductAttributeValueWhereInput, orderBy: ProductAttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductAttributeValue!]
  productOption(where: ProductOptionWhereInput, orderBy: ProductOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductOption!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProductAttributeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductAttributeEdge]!
  aggregate: AggregateProductAttribute!
}

input ProductAttributeCreateInput {
  id: ID
  _version: Int
  name: String
  values: ProductAttributeValueCreateManyWithoutAttributeInput
  productOption: ProductOptionCreateManyWithoutAttributeInput
}

input ProductAttributeCreateManyWithoutValuesInput {
  create: [ProductAttributeCreateWithoutValuesInput!]
  connect: [ProductAttributeWhereUniqueInput!]
}

input ProductAttributeCreateOneWithoutProductOptionInput {
  create: ProductAttributeCreateWithoutProductOptionInput
  connect: ProductAttributeWhereUniqueInput
}

input ProductAttributeCreateWithoutProductOptionInput {
  id: ID
  _version: Int
  name: String
  values: ProductAttributeValueCreateManyWithoutAttributeInput
}

input ProductAttributeCreateWithoutValuesInput {
  id: ID
  _version: Int
  name: String
  productOption: ProductOptionCreateManyWithoutAttributeInput
}

"""An edge in a connection."""
type ProductAttributeEdge {
  """The item at the end of the edge."""
  node: ProductAttribute!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductAttributeOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductAttributePreviousValues {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductAttributeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProductAttributeSubscriptionPayload {
  mutation: MutationType!
  node: ProductAttribute
  updatedFields: [String!]
  previousValues: ProductAttributePreviousValues
}

input ProductAttributeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductAttributeWhereInput
}

input ProductAttributeUpdateInput {
  _version: Int
  name: String
  values: ProductAttributeValueUpdateManyWithoutAttributeInput
  productOption: ProductOptionUpdateManyWithoutAttributeInput
}

input ProductAttributeUpdateManyDataInput {
  _version: Int
  name: String
}

input ProductAttributeUpdateManyMutationInput {
  _version: Int
  name: String
}

input ProductAttributeUpdateManyWithoutValuesInput {
  create: [ProductAttributeCreateWithoutValuesInput!]
  connect: [ProductAttributeWhereUniqueInput!]
  set: [ProductAttributeWhereUniqueInput!]
  disconnect: [ProductAttributeWhereUniqueInput!]
  delete: [ProductAttributeWhereUniqueInput!]
  update: [ProductAttributeUpdateWithWhereUniqueWithoutValuesInput!]
  updateMany: [ProductAttributeUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductAttributeScalarWhereInput!]
  upsert: [ProductAttributeUpsertWithWhereUniqueWithoutValuesInput!]
}

input ProductAttributeUpdateManyWithWhereNestedInput {
  where: ProductAttributeScalarWhereInput!
  data: ProductAttributeUpdateManyDataInput!
}

input ProductAttributeUpdateOneRequiredWithoutProductOptionInput {
  create: ProductAttributeCreateWithoutProductOptionInput
  connect: ProductAttributeWhereUniqueInput
  update: ProductAttributeUpdateWithoutProductOptionDataInput
  upsert: ProductAttributeUpsertWithoutProductOptionInput
}

input ProductAttributeUpdateWithoutProductOptionDataInput {
  _version: Int
  name: String
  values: ProductAttributeValueUpdateManyWithoutAttributeInput
}

input ProductAttributeUpdateWithoutValuesDataInput {
  _version: Int
  name: String
  productOption: ProductOptionUpdateManyWithoutAttributeInput
}

input ProductAttributeUpdateWithWhereUniqueWithoutValuesInput {
  where: ProductAttributeWhereUniqueInput!
  data: ProductAttributeUpdateWithoutValuesDataInput!
}

input ProductAttributeUpsertWithoutProductOptionInput {
  update: ProductAttributeUpdateWithoutProductOptionDataInput!
  create: ProductAttributeCreateWithoutProductOptionInput!
}

input ProductAttributeUpsertWithWhereUniqueWithoutValuesInput {
  where: ProductAttributeWhereUniqueInput!
  update: ProductAttributeUpdateWithoutValuesDataInput!
  create: ProductAttributeCreateWithoutValuesInput!
}

type ProductAttributeValue implements Node {
  id: ID!
  _version: Int!
  attribute(where: ProductAttributeWhereInput, orderBy: ProductAttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductAttribute!]
  name: String
  productOption(where: ProductOptionWhereInput, orderBy: ProductOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductOption!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProductAttributeValueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductAttributeValueEdge]!
  aggregate: AggregateProductAttributeValue!
}

input ProductAttributeValueCreateInput {
  id: ID
  _version: Int
  name: String
  attribute: ProductAttributeCreateManyWithoutValuesInput
  productOption: ProductOptionCreateManyWithoutValueInput
}

input ProductAttributeValueCreateManyWithoutAttributeInput {
  create: [ProductAttributeValueCreateWithoutAttributeInput!]
  connect: [ProductAttributeValueWhereUniqueInput!]
}

input ProductAttributeValueCreateOneWithoutProductOptionInput {
  create: ProductAttributeValueCreateWithoutProductOptionInput
  connect: ProductAttributeValueWhereUniqueInput
}

input ProductAttributeValueCreateWithoutAttributeInput {
  id: ID
  _version: Int
  name: String
  productOption: ProductOptionCreateManyWithoutValueInput
}

input ProductAttributeValueCreateWithoutProductOptionInput {
  id: ID
  _version: Int
  name: String
  attribute: ProductAttributeCreateManyWithoutValuesInput
}

"""An edge in a connection."""
type ProductAttributeValueEdge {
  """The item at the end of the edge."""
  node: ProductAttributeValue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductAttributeValueOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductAttributeValuePreviousValues {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductAttributeValueScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeValueScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeValueScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeValueScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProductAttributeValueSubscriptionPayload {
  mutation: MutationType!
  node: ProductAttributeValue
  updatedFields: [String!]
  previousValues: ProductAttributeValuePreviousValues
}

input ProductAttributeValueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeValueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeValueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeValueSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductAttributeValueWhereInput
}

input ProductAttributeValueUpdateInput {
  _version: Int
  name: String
  attribute: ProductAttributeUpdateManyWithoutValuesInput
  productOption: ProductOptionUpdateManyWithoutValueInput
}

input ProductAttributeValueUpdateManyDataInput {
  _version: Int
  name: String
}

input ProductAttributeValueUpdateManyMutationInput {
  _version: Int
  name: String
}

input ProductAttributeValueUpdateManyWithoutAttributeInput {
  create: [ProductAttributeValueCreateWithoutAttributeInput!]
  connect: [ProductAttributeValueWhereUniqueInput!]
  set: [ProductAttributeValueWhereUniqueInput!]
  disconnect: [ProductAttributeValueWhereUniqueInput!]
  delete: [ProductAttributeValueWhereUniqueInput!]
  update: [ProductAttributeValueUpdateWithWhereUniqueWithoutAttributeInput!]
  updateMany: [ProductAttributeValueUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductAttributeValueScalarWhereInput!]
  upsert: [ProductAttributeValueUpsertWithWhereUniqueWithoutAttributeInput!]
}

input ProductAttributeValueUpdateManyWithWhereNestedInput {
  where: ProductAttributeValueScalarWhereInput!
  data: ProductAttributeValueUpdateManyDataInput!
}

input ProductAttributeValueUpdateOneRequiredWithoutProductOptionInput {
  create: ProductAttributeValueCreateWithoutProductOptionInput
  connect: ProductAttributeValueWhereUniqueInput
  update: ProductAttributeValueUpdateWithoutProductOptionDataInput
  upsert: ProductAttributeValueUpsertWithoutProductOptionInput
}

input ProductAttributeValueUpdateWithoutAttributeDataInput {
  _version: Int
  name: String
  productOption: ProductOptionUpdateManyWithoutValueInput
}

input ProductAttributeValueUpdateWithoutProductOptionDataInput {
  _version: Int
  name: String
  attribute: ProductAttributeUpdateManyWithoutValuesInput
}

input ProductAttributeValueUpdateWithWhereUniqueWithoutAttributeInput {
  where: ProductAttributeValueWhereUniqueInput!
  data: ProductAttributeValueUpdateWithoutAttributeDataInput!
}

input ProductAttributeValueUpsertWithoutProductOptionInput {
  update: ProductAttributeValueUpdateWithoutProductOptionDataInput!
  create: ProductAttributeValueCreateWithoutProductOptionInput!
}

input ProductAttributeValueUpsertWithWhereUniqueWithoutAttributeInput {
  where: ProductAttributeValueWhereUniqueInput!
  update: ProductAttributeValueUpdateWithoutAttributeDataInput!
  create: ProductAttributeValueCreateWithoutAttributeInput!
}

input ProductAttributeValueWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeValueWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeValueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeValueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  attribute_every: ProductAttributeWhereInput
  attribute_some: ProductAttributeWhereInput
  attribute_none: ProductAttributeWhereInput
  productOption_every: ProductOptionWhereInput
  productOption_some: ProductOptionWhereInput
  productOption_none: ProductOptionWhereInput
}

input ProductAttributeValueWhereUniqueInput {
  id: ID
  name: String
}

input ProductAttributeWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  values_every: ProductAttributeValueWhereInput
  values_some: ProductAttributeValueWhereInput
  values_none: ProductAttributeValueWhereInput
  productOption_every: ProductOptionWhereInput
  productOption_some: ProductOptionWhereInput
  productOption_none: ProductOptionWhereInput
}

input ProductAttributeWhereUniqueInput {
  id: ID
  name: String
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  _version: Int
  sku: String
  productTemplate: ProductTemplateCreateOneWithoutProductsInput
  productMedias: MediaCreateManyInput
  productRetailers: ProductRetailerCreateManyWithoutProductInput
  options: ProductOptionCreateManyInput
}

input ProductCreateManyWithoutProductTemplateInput {
  create: [ProductCreateWithoutProductTemplateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutProductRetailersInput {
  create: ProductCreateWithoutProductRetailersInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutProductRetailersInput {
  id: ID
  _version: Int
  sku: String
  productTemplate: ProductTemplateCreateOneWithoutProductsInput
  productMedias: MediaCreateManyInput
  options: ProductOptionCreateManyInput
}

input ProductCreateWithoutProductTemplateInput {
  id: ID
  _version: Int
  sku: String
  productMedias: MediaCreateManyInput
  productRetailers: ProductRetailerCreateManyWithoutProductInput
  options: ProductOptionCreateManyInput
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

type ProductOption implements Node {
  id: ID!
  _version: Int!
  attribute: ProductAttribute!
  value: ProductAttributeValue!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProductOptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductOptionEdge]!
  aggregate: AggregateProductOption!
}

input ProductOptionCreateInput {
  id: ID
  _version: Int
  attribute: ProductAttributeCreateOneWithoutProductOptionInput!
  value: ProductAttributeValueCreateOneWithoutProductOptionInput!
}

input ProductOptionCreateManyInput {
  create: [ProductOptionCreateInput!]
  connect: [ProductOptionWhereUniqueInput!]
}

input ProductOptionCreateManyWithoutAttributeInput {
  create: [ProductOptionCreateWithoutAttributeInput!]
  connect: [ProductOptionWhereUniqueInput!]
}

input ProductOptionCreateManyWithoutValueInput {
  create: [ProductOptionCreateWithoutValueInput!]
  connect: [ProductOptionWhereUniqueInput!]
}

input ProductOptionCreateWithoutAttributeInput {
  id: ID
  _version: Int
  value: ProductAttributeValueCreateOneWithoutProductOptionInput!
}

input ProductOptionCreateWithoutValueInput {
  id: ID
  _version: Int
  attribute: ProductAttributeCreateOneWithoutProductOptionInput!
}

"""An edge in a connection."""
type ProductOptionEdge {
  """The item at the end of the edge."""
  node: ProductOption!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductOptionOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductOptionPreviousValues {
  id: ID!
  _version: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductOptionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductOptionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductOptionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductOptionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProductOptionSubscriptionPayload {
  mutation: MutationType!
  node: ProductOption
  updatedFields: [String!]
  previousValues: ProductOptionPreviousValues
}

input ProductOptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductOptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductOptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductOptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductOptionWhereInput
}

input ProductOptionUpdateDataInput {
  _version: Int
  attribute: ProductAttributeUpdateOneRequiredWithoutProductOptionInput
  value: ProductAttributeValueUpdateOneRequiredWithoutProductOptionInput
}

input ProductOptionUpdateInput {
  _version: Int
  attribute: ProductAttributeUpdateOneRequiredWithoutProductOptionInput
  value: ProductAttributeValueUpdateOneRequiredWithoutProductOptionInput
}

input ProductOptionUpdateManyDataInput {
  _version: Int
}

input ProductOptionUpdateManyInput {
  create: [ProductOptionCreateInput!]
  connect: [ProductOptionWhereUniqueInput!]
  set: [ProductOptionWhereUniqueInput!]
  disconnect: [ProductOptionWhereUniqueInput!]
  delete: [ProductOptionWhereUniqueInput!]
  update: [ProductOptionUpdateWithWhereUniqueNestedInput!]
  updateMany: [ProductOptionUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductOptionScalarWhereInput!]
  upsert: [ProductOptionUpsertWithWhereUniqueNestedInput!]
}

input ProductOptionUpdateManyMutationInput {
  _version: Int
}

input ProductOptionUpdateManyWithoutAttributeInput {
  create: [ProductOptionCreateWithoutAttributeInput!]
  connect: [ProductOptionWhereUniqueInput!]
  set: [ProductOptionWhereUniqueInput!]
  disconnect: [ProductOptionWhereUniqueInput!]
  delete: [ProductOptionWhereUniqueInput!]
  update: [ProductOptionUpdateWithWhereUniqueWithoutAttributeInput!]
  updateMany: [ProductOptionUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductOptionScalarWhereInput!]
  upsert: [ProductOptionUpsertWithWhereUniqueWithoutAttributeInput!]
}

input ProductOptionUpdateManyWithoutValueInput {
  create: [ProductOptionCreateWithoutValueInput!]
  connect: [ProductOptionWhereUniqueInput!]
  set: [ProductOptionWhereUniqueInput!]
  disconnect: [ProductOptionWhereUniqueInput!]
  delete: [ProductOptionWhereUniqueInput!]
  update: [ProductOptionUpdateWithWhereUniqueWithoutValueInput!]
  updateMany: [ProductOptionUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductOptionScalarWhereInput!]
  upsert: [ProductOptionUpsertWithWhereUniqueWithoutValueInput!]
}

input ProductOptionUpdateManyWithWhereNestedInput {
  where: ProductOptionScalarWhereInput!
  data: ProductOptionUpdateManyDataInput!
}

input ProductOptionUpdateWithoutAttributeDataInput {
  _version: Int
  value: ProductAttributeValueUpdateOneRequiredWithoutProductOptionInput
}

input ProductOptionUpdateWithoutValueDataInput {
  _version: Int
  attribute: ProductAttributeUpdateOneRequiredWithoutProductOptionInput
}

input ProductOptionUpdateWithWhereUniqueNestedInput {
  where: ProductOptionWhereUniqueInput!
  data: ProductOptionUpdateDataInput!
}

input ProductOptionUpdateWithWhereUniqueWithoutAttributeInput {
  where: ProductOptionWhereUniqueInput!
  data: ProductOptionUpdateWithoutAttributeDataInput!
}

input ProductOptionUpdateWithWhereUniqueWithoutValueInput {
  where: ProductOptionWhereUniqueInput!
  data: ProductOptionUpdateWithoutValueDataInput!
}

input ProductOptionUpsertWithWhereUniqueNestedInput {
  where: ProductOptionWhereUniqueInput!
  update: ProductOptionUpdateDataInput!
  create: ProductOptionCreateInput!
}

input ProductOptionUpsertWithWhereUniqueWithoutAttributeInput {
  where: ProductOptionWhereUniqueInput!
  update: ProductOptionUpdateWithoutAttributeDataInput!
  create: ProductOptionCreateWithoutAttributeInput!
}

input ProductOptionUpsertWithWhereUniqueWithoutValueInput {
  where: ProductOptionWhereUniqueInput!
  update: ProductOptionUpdateWithoutValueDataInput!
  create: ProductOptionCreateWithoutValueInput!
}

input ProductOptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductOptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductOptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductOptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  attribute: ProductAttributeWhereInput
  value: ProductAttributeValueWhereInput
}

input ProductOptionWhereUniqueInput {
  id: ID
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  sku_ASC
  sku_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  _version: Int!
  sku: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductRetailer implements Node {
  id: ID!
  _version: Int!
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  productMedias(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  product: Product
  retailer: Retailer
  rating: Int
  enabled: Boolean
  approved: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProductRetailerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductRetailerEdge]!
  aggregate: AggregateProductRetailer!
}

input ProductRetailerCreateInput {
  id: ID
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaCreateManyInput
  product: ProductCreateOneWithoutProductRetailersInput
  retailer: RetailerCreateOneWithoutProductsInput
}

input ProductRetailerCreateManyWithoutProductInput {
  create: [ProductRetailerCreateWithoutProductInput!]
  connect: [ProductRetailerWhereUniqueInput!]
}

input ProductRetailerCreateManyWithoutRetailerInput {
  create: [ProductRetailerCreateWithoutRetailerInput!]
  connect: [ProductRetailerWhereUniqueInput!]
}

input ProductRetailerCreateWithoutProductInput {
  id: ID
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaCreateManyInput
  retailer: RetailerCreateOneWithoutProductsInput
}

input ProductRetailerCreateWithoutRetailerInput {
  id: ID
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaCreateManyInput
  product: ProductCreateOneWithoutProductRetailersInput
}

"""An edge in a connection."""
type ProductRetailerEdge {
  """The item at the end of the edge."""
  node: ProductRetailer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductRetailerOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  productName_ASC
  productName_DESC
  listPrice_ASC
  listPrice_DESC
  sellPrice_ASC
  sellPrice_DESC
  stockQuantity_ASC
  stockQuantity_DESC
  inStock_ASC
  inStock_DESC
  rating_ASC
  rating_DESC
  enabled_ASC
  enabled_DESC
  approved_ASC
  approved_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductRetailerPreviousValues {
  id: ID!
  _version: Int!
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductRetailerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductRetailerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductRetailerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductRetailerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  productName: String

  """All values that are not equal to given value."""
  productName_not: String

  """All values that are contained in given list."""
  productName_in: [String!]

  """All values that are not contained in given list."""
  productName_not_in: [String!]

  """All values less than the given value."""
  productName_lt: String

  """All values less than or equal the given value."""
  productName_lte: String

  """All values greater than the given value."""
  productName_gt: String

  """All values greater than or equal the given value."""
  productName_gte: String

  """All values containing the given string."""
  productName_contains: String

  """All values not containing the given string."""
  productName_not_contains: String

  """All values starting with the given string."""
  productName_starts_with: String

  """All values not starting with the given string."""
  productName_not_starts_with: String

  """All values ending with the given string."""
  productName_ends_with: String

  """All values not ending with the given string."""
  productName_not_ends_with: String
  listPrice: Int

  """All values that are not equal to given value."""
  listPrice_not: Int

  """All values that are contained in given list."""
  listPrice_in: [Int!]

  """All values that are not contained in given list."""
  listPrice_not_in: [Int!]

  """All values less than the given value."""
  listPrice_lt: Int

  """All values less than or equal the given value."""
  listPrice_lte: Int

  """All values greater than the given value."""
  listPrice_gt: Int

  """All values greater than or equal the given value."""
  listPrice_gte: Int
  sellPrice: Int

  """All values that are not equal to given value."""
  sellPrice_not: Int

  """All values that are contained in given list."""
  sellPrice_in: [Int!]

  """All values that are not contained in given list."""
  sellPrice_not_in: [Int!]

  """All values less than the given value."""
  sellPrice_lt: Int

  """All values less than or equal the given value."""
  sellPrice_lte: Int

  """All values greater than the given value."""
  sellPrice_gt: Int

  """All values greater than or equal the given value."""
  sellPrice_gte: Int
  stockQuantity: Int

  """All values that are not equal to given value."""
  stockQuantity_not: Int

  """All values that are contained in given list."""
  stockQuantity_in: [Int!]

  """All values that are not contained in given list."""
  stockQuantity_not_in: [Int!]

  """All values less than the given value."""
  stockQuantity_lt: Int

  """All values less than or equal the given value."""
  stockQuantity_lte: Int

  """All values greater than the given value."""
  stockQuantity_gt: Int

  """All values greater than or equal the given value."""
  stockQuantity_gte: Int
  inStock: Boolean

  """All values that are not equal to given value."""
  inStock_not: Boolean
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProductRetailerSubscriptionPayload {
  mutation: MutationType!
  node: ProductRetailer
  updatedFields: [String!]
  previousValues: ProductRetailerPreviousValues
}

input ProductRetailerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductRetailerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductRetailerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductRetailerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductRetailerWhereInput
}

input ProductRetailerUpdateInput {
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaUpdateManyInput
  product: ProductUpdateOneWithoutProductRetailersInput
  retailer: RetailerUpdateOneWithoutProductsInput
}

input ProductRetailerUpdateManyDataInput {
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
}

input ProductRetailerUpdateManyMutationInput {
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
}

input ProductRetailerUpdateManyWithoutProductInput {
  create: [ProductRetailerCreateWithoutProductInput!]
  connect: [ProductRetailerWhereUniqueInput!]
  set: [ProductRetailerWhereUniqueInput!]
  disconnect: [ProductRetailerWhereUniqueInput!]
  delete: [ProductRetailerWhereUniqueInput!]
  update: [ProductRetailerUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ProductRetailerUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductRetailerScalarWhereInput!]
  upsert: [ProductRetailerUpsertWithWhereUniqueWithoutProductInput!]
}

input ProductRetailerUpdateManyWithoutRetailerInput {
  create: [ProductRetailerCreateWithoutRetailerInput!]
  connect: [ProductRetailerWhereUniqueInput!]
  set: [ProductRetailerWhereUniqueInput!]
  disconnect: [ProductRetailerWhereUniqueInput!]
  delete: [ProductRetailerWhereUniqueInput!]
  update: [ProductRetailerUpdateWithWhereUniqueWithoutRetailerInput!]
  updateMany: [ProductRetailerUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductRetailerScalarWhereInput!]
  upsert: [ProductRetailerUpsertWithWhereUniqueWithoutRetailerInput!]
}

input ProductRetailerUpdateManyWithWhereNestedInput {
  where: ProductRetailerScalarWhereInput!
  data: ProductRetailerUpdateManyDataInput!
}

input ProductRetailerUpdateWithoutProductDataInput {
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaUpdateManyInput
  retailer: RetailerUpdateOneWithoutProductsInput
}

input ProductRetailerUpdateWithoutRetailerDataInput {
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaUpdateManyInput
  product: ProductUpdateOneWithoutProductRetailersInput
}

input ProductRetailerUpdateWithWhereUniqueWithoutProductInput {
  where: ProductRetailerWhereUniqueInput!
  data: ProductRetailerUpdateWithoutProductDataInput!
}

input ProductRetailerUpdateWithWhereUniqueWithoutRetailerInput {
  where: ProductRetailerWhereUniqueInput!
  data: ProductRetailerUpdateWithoutRetailerDataInput!
}

input ProductRetailerUpsertWithWhereUniqueWithoutProductInput {
  where: ProductRetailerWhereUniqueInput!
  update: ProductRetailerUpdateWithoutProductDataInput!
  create: ProductRetailerCreateWithoutProductInput!
}

input ProductRetailerUpsertWithWhereUniqueWithoutRetailerInput {
  where: ProductRetailerWhereUniqueInput!
  update: ProductRetailerUpdateWithoutRetailerDataInput!
  create: ProductRetailerCreateWithoutRetailerInput!
}

input ProductRetailerWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductRetailerWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductRetailerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductRetailerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  productName: String

  """All values that are not equal to given value."""
  productName_not: String

  """All values that are contained in given list."""
  productName_in: [String!]

  """All values that are not contained in given list."""
  productName_not_in: [String!]

  """All values less than the given value."""
  productName_lt: String

  """All values less than or equal the given value."""
  productName_lte: String

  """All values greater than the given value."""
  productName_gt: String

  """All values greater than or equal the given value."""
  productName_gte: String

  """All values containing the given string."""
  productName_contains: String

  """All values not containing the given string."""
  productName_not_contains: String

  """All values starting with the given string."""
  productName_starts_with: String

  """All values not starting with the given string."""
  productName_not_starts_with: String

  """All values ending with the given string."""
  productName_ends_with: String

  """All values not ending with the given string."""
  productName_not_ends_with: String
  listPrice: Int

  """All values that are not equal to given value."""
  listPrice_not: Int

  """All values that are contained in given list."""
  listPrice_in: [Int!]

  """All values that are not contained in given list."""
  listPrice_not_in: [Int!]

  """All values less than the given value."""
  listPrice_lt: Int

  """All values less than or equal the given value."""
  listPrice_lte: Int

  """All values greater than the given value."""
  listPrice_gt: Int

  """All values greater than or equal the given value."""
  listPrice_gte: Int
  sellPrice: Int

  """All values that are not equal to given value."""
  sellPrice_not: Int

  """All values that are contained in given list."""
  sellPrice_in: [Int!]

  """All values that are not contained in given list."""
  sellPrice_not_in: [Int!]

  """All values less than the given value."""
  sellPrice_lt: Int

  """All values less than or equal the given value."""
  sellPrice_lte: Int

  """All values greater than the given value."""
  sellPrice_gt: Int

  """All values greater than or equal the given value."""
  sellPrice_gte: Int
  stockQuantity: Int

  """All values that are not equal to given value."""
  stockQuantity_not: Int

  """All values that are contained in given list."""
  stockQuantity_in: [Int!]

  """All values that are not contained in given list."""
  stockQuantity_not_in: [Int!]

  """All values less than the given value."""
  stockQuantity_lt: Int

  """All values less than or equal the given value."""
  stockQuantity_lte: Int

  """All values greater than the given value."""
  stockQuantity_gt: Int

  """All values greater than or equal the given value."""
  stockQuantity_gte: Int
  inStock: Boolean

  """All values that are not equal to given value."""
  inStock_not: Boolean
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  productMedias_every: MediaWhereInput
  productMedias_some: MediaWhereInput
  productMedias_none: MediaWhereInput
  product: ProductWhereInput
  retailer: RetailerWhereInput
}

input ProductRetailerWhereUniqueInput {
  id: ID
  productName: String
}

input ProductScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  sku: String

  """All values that are not equal to given value."""
  sku_not: String

  """All values that are contained in given list."""
  sku_in: [String!]

  """All values that are not contained in given list."""
  sku_not_in: [String!]

  """All values less than the given value."""
  sku_lt: String

  """All values less than or equal the given value."""
  sku_lte: String

  """All values greater than the given value."""
  sku_gt: String

  """All values greater than or equal the given value."""
  sku_gte: String

  """All values containing the given string."""
  sku_contains: String

  """All values not containing the given string."""
  sku_not_contains: String

  """All values starting with the given string."""
  sku_starts_with: String

  """All values not starting with the given string."""
  sku_not_starts_with: String

  """All values ending with the given string."""
  sku_ends_with: String

  """All values not ending with the given string."""
  sku_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

type ProductTemplate implements Node {
  id: ID!
  _version: Int!
  name: String
  briefDescription: String
  catalog(where: CatalogWhereInput, orderBy: CatalogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Catalog!]
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  brand: Brand
  descriptions(where: DescriptionWhereInput, orderBy: DescriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Description!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProductTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductTemplateEdge]!
  aggregate: AggregateProductTemplate!
}

input ProductTemplateCreateInput {
  id: ID
  _version: Int
  name: String
  briefDescription: String
  catalog: CatalogCreateManyWithoutProductTemplatesInput
  products: ProductCreateManyWithoutProductTemplateInput
  brand: BrandCreateOneWithoutProductTemplatesInput
  descriptions: DescriptionCreateManyInput
}

input ProductTemplateCreateManyWithoutBrandInput {
  create: [ProductTemplateCreateWithoutBrandInput!]
  connect: [ProductTemplateWhereUniqueInput!]
}

input ProductTemplateCreateManyWithoutCatalogInput {
  create: [ProductTemplateCreateWithoutCatalogInput!]
  connect: [ProductTemplateWhereUniqueInput!]
}

input ProductTemplateCreateOneWithoutProductsInput {
  create: ProductTemplateCreateWithoutProductsInput
  connect: ProductTemplateWhereUniqueInput
}

input ProductTemplateCreateWithoutBrandInput {
  id: ID
  _version: Int
  name: String
  briefDescription: String
  catalog: CatalogCreateManyWithoutProductTemplatesInput
  products: ProductCreateManyWithoutProductTemplateInput
  descriptions: DescriptionCreateManyInput
}

input ProductTemplateCreateWithoutCatalogInput {
  id: ID
  _version: Int
  name: String
  briefDescription: String
  products: ProductCreateManyWithoutProductTemplateInput
  brand: BrandCreateOneWithoutProductTemplatesInput
  descriptions: DescriptionCreateManyInput
}

input ProductTemplateCreateWithoutProductsInput {
  id: ID
  _version: Int
  name: String
  briefDescription: String
  catalog: CatalogCreateManyWithoutProductTemplatesInput
  brand: BrandCreateOneWithoutProductTemplatesInput
  descriptions: DescriptionCreateManyInput
}

"""An edge in a connection."""
type ProductTemplateEdge {
  """The item at the end of the edge."""
  node: ProductTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductTemplateOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  briefDescription_ASC
  briefDescription_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductTemplatePreviousValues {
  id: ID!
  _version: Int!
  name: String
  briefDescription: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  briefDescription: String

  """All values that are not equal to given value."""
  briefDescription_not: String

  """All values that are contained in given list."""
  briefDescription_in: [String!]

  """All values that are not contained in given list."""
  briefDescription_not_in: [String!]

  """All values less than the given value."""
  briefDescription_lt: String

  """All values less than or equal the given value."""
  briefDescription_lte: String

  """All values greater than the given value."""
  briefDescription_gt: String

  """All values greater than or equal the given value."""
  briefDescription_gte: String

  """All values containing the given string."""
  briefDescription_contains: String

  """All values not containing the given string."""
  briefDescription_not_contains: String

  """All values starting with the given string."""
  briefDescription_starts_with: String

  """All values not starting with the given string."""
  briefDescription_not_starts_with: String

  """All values ending with the given string."""
  briefDescription_ends_with: String

  """All values not ending with the given string."""
  briefDescription_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProductTemplateSubscriptionPayload {
  mutation: MutationType!
  node: ProductTemplate
  updatedFields: [String!]
  previousValues: ProductTemplatePreviousValues
}

input ProductTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductTemplateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductTemplateWhereInput
}

input ProductTemplateUpdateInput {
  _version: Int
  name: String
  briefDescription: String
  catalog: CatalogUpdateManyWithoutProductTemplatesInput
  products: ProductUpdateManyWithoutProductTemplateInput
  brand: BrandUpdateOneWithoutProductTemplatesInput
  descriptions: DescriptionUpdateManyInput
}

input ProductTemplateUpdateManyDataInput {
  _version: Int
  name: String
  briefDescription: String
}

input ProductTemplateUpdateManyMutationInput {
  _version: Int
  name: String
  briefDescription: String
}

input ProductTemplateUpdateManyWithoutBrandInput {
  create: [ProductTemplateCreateWithoutBrandInput!]
  connect: [ProductTemplateWhereUniqueInput!]
  set: [ProductTemplateWhereUniqueInput!]
  disconnect: [ProductTemplateWhereUniqueInput!]
  delete: [ProductTemplateWhereUniqueInput!]
  update: [ProductTemplateUpdateWithWhereUniqueWithoutBrandInput!]
  updateMany: [ProductTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductTemplateScalarWhereInput!]
  upsert: [ProductTemplateUpsertWithWhereUniqueWithoutBrandInput!]
}

input ProductTemplateUpdateManyWithoutCatalogInput {
  create: [ProductTemplateCreateWithoutCatalogInput!]
  connect: [ProductTemplateWhereUniqueInput!]
  set: [ProductTemplateWhereUniqueInput!]
  disconnect: [ProductTemplateWhereUniqueInput!]
  delete: [ProductTemplateWhereUniqueInput!]
  update: [ProductTemplateUpdateWithWhereUniqueWithoutCatalogInput!]
  updateMany: [ProductTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductTemplateScalarWhereInput!]
  upsert: [ProductTemplateUpsertWithWhereUniqueWithoutCatalogInput!]
}

input ProductTemplateUpdateManyWithWhereNestedInput {
  where: ProductTemplateScalarWhereInput!
  data: ProductTemplateUpdateManyDataInput!
}

input ProductTemplateUpdateOneWithoutProductsInput {
  create: ProductTemplateCreateWithoutProductsInput
  connect: ProductTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductTemplateUpdateWithoutProductsDataInput
  upsert: ProductTemplateUpsertWithoutProductsInput
}

input ProductTemplateUpdateWithoutBrandDataInput {
  _version: Int
  name: String
  briefDescription: String
  catalog: CatalogUpdateManyWithoutProductTemplatesInput
  products: ProductUpdateManyWithoutProductTemplateInput
  descriptions: DescriptionUpdateManyInput
}

input ProductTemplateUpdateWithoutCatalogDataInput {
  _version: Int
  name: String
  briefDescription: String
  products: ProductUpdateManyWithoutProductTemplateInput
  brand: BrandUpdateOneWithoutProductTemplatesInput
  descriptions: DescriptionUpdateManyInput
}

input ProductTemplateUpdateWithoutProductsDataInput {
  _version: Int
  name: String
  briefDescription: String
  catalog: CatalogUpdateManyWithoutProductTemplatesInput
  brand: BrandUpdateOneWithoutProductTemplatesInput
  descriptions: DescriptionUpdateManyInput
}

input ProductTemplateUpdateWithWhereUniqueWithoutBrandInput {
  where: ProductTemplateWhereUniqueInput!
  data: ProductTemplateUpdateWithoutBrandDataInput!
}

input ProductTemplateUpdateWithWhereUniqueWithoutCatalogInput {
  where: ProductTemplateWhereUniqueInput!
  data: ProductTemplateUpdateWithoutCatalogDataInput!
}

input ProductTemplateUpsertWithoutProductsInput {
  update: ProductTemplateUpdateWithoutProductsDataInput!
  create: ProductTemplateCreateWithoutProductsInput!
}

input ProductTemplateUpsertWithWhereUniqueWithoutBrandInput {
  where: ProductTemplateWhereUniqueInput!
  update: ProductTemplateUpdateWithoutBrandDataInput!
  create: ProductTemplateCreateWithoutBrandInput!
}

input ProductTemplateUpsertWithWhereUniqueWithoutCatalogInput {
  where: ProductTemplateWhereUniqueInput!
  update: ProductTemplateUpdateWithoutCatalogDataInput!
  create: ProductTemplateCreateWithoutCatalogInput!
}

input ProductTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  briefDescription: String

  """All values that are not equal to given value."""
  briefDescription_not: String

  """All values that are contained in given list."""
  briefDescription_in: [String!]

  """All values that are not contained in given list."""
  briefDescription_not_in: [String!]

  """All values less than the given value."""
  briefDescription_lt: String

  """All values less than or equal the given value."""
  briefDescription_lte: String

  """All values greater than the given value."""
  briefDescription_gt: String

  """All values greater than or equal the given value."""
  briefDescription_gte: String

  """All values containing the given string."""
  briefDescription_contains: String

  """All values not containing the given string."""
  briefDescription_not_contains: String

  """All values starting with the given string."""
  briefDescription_starts_with: String

  """All values not starting with the given string."""
  briefDescription_not_starts_with: String

  """All values ending with the given string."""
  briefDescription_ends_with: String

  """All values not ending with the given string."""
  briefDescription_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  catalog_every: CatalogWhereInput
  catalog_some: CatalogWhereInput
  catalog_none: CatalogWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  brand: BrandWhereInput
  descriptions_every: DescriptionWhereInput
  descriptions_some: DescriptionWhereInput
  descriptions_none: DescriptionWhereInput
}

input ProductTemplateWhereUniqueInput {
  id: ID
}

input ProductUpdateDataInput {
  _version: Int
  sku: String
  productTemplate: ProductTemplateUpdateOneWithoutProductsInput
  productMedias: MediaUpdateManyInput
  productRetailers: ProductRetailerUpdateManyWithoutProductInput
  options: ProductOptionUpdateManyInput
}

input ProductUpdateInput {
  _version: Int
  sku: String
  productTemplate: ProductTemplateUpdateOneWithoutProductsInput
  productMedias: MediaUpdateManyInput
  productRetailers: ProductRetailerUpdateManyWithoutProductInput
  options: ProductOptionUpdateManyInput
}

input ProductUpdateManyDataInput {
  _version: Int
  sku: String
}

input ProductUpdateManyMutationInput {
  _version: Int
  sku: String
}

input ProductUpdateManyWithoutProductTemplateInput {
  create: [ProductCreateWithoutProductTemplateInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutProductTemplateInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutProductTemplateInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
}

input ProductUpdateOneWithoutProductRetailersInput {
  create: ProductCreateWithoutProductRetailersInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductUpdateWithoutProductRetailersDataInput
  upsert: ProductUpsertWithoutProductRetailersInput
}

input ProductUpdateWithoutProductRetailersDataInput {
  _version: Int
  sku: String
  productTemplate: ProductTemplateUpdateOneWithoutProductsInput
  productMedias: MediaUpdateManyInput
  options: ProductOptionUpdateManyInput
}

input ProductUpdateWithoutProductTemplateDataInput {
  _version: Int
  sku: String
  productMedias: MediaUpdateManyInput
  productRetailers: ProductRetailerUpdateManyWithoutProductInput
  options: ProductOptionUpdateManyInput
}

input ProductUpdateWithWhereUniqueWithoutProductTemplateInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutProductTemplateDataInput!
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithoutProductRetailersInput {
  update: ProductUpdateWithoutProductRetailersDataInput!
  create: ProductCreateWithoutProductRetailersInput!
}

input ProductUpsertWithWhereUniqueWithoutProductTemplateInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutProductTemplateDataInput!
  create: ProductCreateWithoutProductTemplateInput!
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  sku: String

  """All values that are not equal to given value."""
  sku_not: String

  """All values that are contained in given list."""
  sku_in: [String!]

  """All values that are not contained in given list."""
  sku_not_in: [String!]

  """All values less than the given value."""
  sku_lt: String

  """All values less than or equal the given value."""
  sku_lte: String

  """All values greater than the given value."""
  sku_gt: String

  """All values greater than or equal the given value."""
  sku_gte: String

  """All values containing the given string."""
  sku_contains: String

  """All values not containing the given string."""
  sku_not_contains: String

  """All values starting with the given string."""
  sku_starts_with: String

  """All values not starting with the given string."""
  sku_not_starts_with: String

  """All values ending with the given string."""
  sku_ends_with: String

  """All values not ending with the given string."""
  sku_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  productTemplate: ProductTemplateWhereInput
  productMedias_every: MediaWhereInput
  productMedias_some: MediaWhereInput
  productMedias_none: MediaWhereInput
  productRetailers_every: ProductRetailerWhereInput
  productRetailers_some: ProductRetailerWhereInput
  productRetailers_none: ProductRetailerWhereInput
  options_every: ProductOptionWhereInput
  options_some: ProductOptionWhereInput
  options_none: ProductOptionWhereInput
}

input ProductWhereUniqueInput {
  id: ID
  sku: String
}

type Query {
  securityQuestions(where: SecurityQuestionWhereInput, orderBy: SecurityQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SecurityQuestion]!
  securityAnswers(where: SecurityAnswerWhereInput, orderBy: SecurityAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SecurityAnswer]!
  assignments(where: AssignmentWhereInput, orderBy: AssignmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Assignment]!
  resolversClaims(where: ResolversClaimWhereInput, orderBy: ResolversClaimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResolversClaim]!
  manufacturers(where: ManufacturerWhereInput, orderBy: ManufacturerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Manufacturer]!
  brands(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Brand]!
  productTemplates(where: ProductTemplateWhereInput, orderBy: ProductTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductTemplate]!
  productAttributes(where: ProductAttributeWhereInput, orderBy: ProductAttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductAttribute]!
  productAttributeValues(where: ProductAttributeValueWhereInput, orderBy: ProductAttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductAttributeValue]!
  productRetailers(where: ProductRetailerWhereInput, orderBy: ProductRetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductRetailer]!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  supportCases(where: SupportCaseWhereInput, orderBy: SupportCaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportCase]!
  supportCorrespondences(where: SupportCorrespondenceWhereInput, orderBy: SupportCorrespondenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportCorrespondence]!
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language]!
  trans_Catalogs(where: Trans_CatalogWhereInput, orderBy: Trans_CatalogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trans_Catalog]!
  trans_Brands(where: Trans_BrandWhereInput, orderBy: Trans_BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trans_Brand]!
  productOptions(where: ProductOptionWhereInput, orderBy: ProductOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductOption]!
  supportStatuses(where: SupportStatusWhereInput, orderBy: SupportStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportStatus]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  supportCategories(where: SupportCategoryWhereInput, orderBy: SupportCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportCategory]!
  catalogs(where: CatalogWhereInput, orderBy: CatalogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Catalog]!
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  medias(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media]!
  retailers(where: RetailerWhereInput, orderBy: RetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Retailer]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  descriptions(where: DescriptionWhereInput, orderBy: DescriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Description]!
  supportSeverities(where: SupportSeverityWhereInput, orderBy: SupportSeverityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportSeverity]!
  securityQuestion(where: SecurityQuestionWhereUniqueInput!): SecurityQuestion
  securityAnswer(where: SecurityAnswerWhereUniqueInput!): SecurityAnswer
  assignment(where: AssignmentWhereUniqueInput!): Assignment
  resolversClaim(where: ResolversClaimWhereUniqueInput!): ResolversClaim
  manufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer
  brand(where: BrandWhereUniqueInput!): Brand
  productTemplate(where: ProductTemplateWhereUniqueInput!): ProductTemplate
  productAttribute(where: ProductAttributeWhereUniqueInput!): ProductAttribute
  productAttributeValue(where: ProductAttributeValueWhereUniqueInput!): ProductAttributeValue
  productRetailer(where: ProductRetailerWhereUniqueInput!): ProductRetailer
  review(where: ReviewWhereUniqueInput!): Review
  supportCase(where: SupportCaseWhereUniqueInput!): SupportCase
  supportCorrespondence(where: SupportCorrespondenceWhereUniqueInput!): SupportCorrespondence
  language(where: LanguageWhereUniqueInput!): Language
  trans_Catalog(where: Trans_CatalogWhereUniqueInput!): Trans_Catalog
  trans_Brand(where: Trans_BrandWhereUniqueInput!): Trans_Brand
  productOption(where: ProductOptionWhereUniqueInput!): ProductOption
  supportStatus(where: SupportStatusWhereUniqueInput!): SupportStatus
  product(where: ProductWhereUniqueInput!): Product
  supportCategory(where: SupportCategoryWhereUniqueInput!): SupportCategory
  catalog(where: CatalogWhereUniqueInput!): Catalog
  permission(where: PermissionWhereUniqueInput!): Permission
  user(where: UserWhereUniqueInput!): User
  address(where: AddressWhereUniqueInput!): Address
  media(where: MediaWhereUniqueInput!): Media
  retailer(where: RetailerWhereUniqueInput!): Retailer
  role(where: RoleWhereUniqueInput!): Role
  description(where: DescriptionWhereUniqueInput!): Description
  supportSeverity(where: SupportSeverityWhereUniqueInput!): SupportSeverity
  securityQuestionsConnection(where: SecurityQuestionWhereInput, orderBy: SecurityQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SecurityQuestionConnection!
  securityAnswersConnection(where: SecurityAnswerWhereInput, orderBy: SecurityAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SecurityAnswerConnection!
  assignmentsConnection(where: AssignmentWhereInput, orderBy: AssignmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AssignmentConnection!
  resolversClaimsConnection(where: ResolversClaimWhereInput, orderBy: ResolversClaimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResolversClaimConnection!
  manufacturersConnection(where: ManufacturerWhereInput, orderBy: ManufacturerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ManufacturerConnection!
  brandsConnection(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BrandConnection!
  productTemplatesConnection(where: ProductTemplateWhereInput, orderBy: ProductTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductTemplateConnection!
  productAttributesConnection(where: ProductAttributeWhereInput, orderBy: ProductAttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductAttributeConnection!
  productAttributeValuesConnection(where: ProductAttributeValueWhereInput, orderBy: ProductAttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductAttributeValueConnection!
  productRetailersConnection(where: ProductRetailerWhereInput, orderBy: ProductRetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductRetailerConnection!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  supportCasesConnection(where: SupportCaseWhereInput, orderBy: SupportCaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupportCaseConnection!
  supportCorrespondencesConnection(where: SupportCorrespondenceWhereInput, orderBy: SupportCorrespondenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupportCorrespondenceConnection!
  languagesConnection(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageConnection!
  trans_CatalogsConnection(where: Trans_CatalogWhereInput, orderBy: Trans_CatalogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Trans_CatalogConnection!
  trans_BrandsConnection(where: Trans_BrandWhereInput, orderBy: Trans_BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Trans_BrandConnection!
  productOptionsConnection(where: ProductOptionWhereInput, orderBy: ProductOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductOptionConnection!
  supportStatusesConnection(where: SupportStatusWhereInput, orderBy: SupportStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupportStatusConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  supportCategoriesConnection(where: SupportCategoryWhereInput, orderBy: SupportCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupportCategoryConnection!
  catalogsConnection(where: CatalogWhereInput, orderBy: CatalogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CatalogConnection!
  permissionsConnection(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PermissionConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  mediasConnection(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MediaConnection!
  retailersConnection(where: RetailerWhereInput, orderBy: RetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RetailerConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  descriptionsConnection(where: DescriptionWhereInput, orderBy: DescriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DescriptionConnection!
  supportSeveritiesConnection(where: SupportSeverityWhereInput, orderBy: SupportSeverityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupportSeverityConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Region {
  VI
  ZH
  JA
  KO
}

type ResolversClaim implements Node {
  id: ID!
  _version: Int!
  resolverName: String
  requiredRoles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  requiredPermissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission!]
  exceptRoles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  exceptioPermissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission!]
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ResolversClaimConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResolversClaimEdge]!
  aggregate: AggregateResolversClaim!
}

input ResolversClaimCreateInput {
  id: ID
  _version: Int
  resolverName: String
  description: String
  requiredRoles: RoleCreateManyInput
  requiredPermissions: PermissionCreateManyInput
  exceptRoles: RoleCreateManyInput
  exceptioPermissions: PermissionCreateManyInput
}

"""An edge in a connection."""
type ResolversClaimEdge {
  """The item at the end of the edge."""
  node: ResolversClaim!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ResolversClaimOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  resolverName_ASC
  resolverName_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ResolversClaimPreviousValues {
  id: ID!
  _version: Int!
  resolverName: String
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ResolversClaimSubscriptionPayload {
  mutation: MutationType!
  node: ResolversClaim
  updatedFields: [String!]
  previousValues: ResolversClaimPreviousValues
}

input ResolversClaimSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ResolversClaimSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResolversClaimSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResolversClaimSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ResolversClaimWhereInput
}

input ResolversClaimUpdateInput {
  _version: Int
  resolverName: String
  description: String
  requiredRoles: RoleUpdateManyInput
  requiredPermissions: PermissionUpdateManyInput
  exceptRoles: RoleUpdateManyInput
  exceptioPermissions: PermissionUpdateManyInput
}

input ResolversClaimUpdateManyMutationInput {
  _version: Int
  resolverName: String
  description: String
}

input ResolversClaimWhereInput {
  """Logical AND on all given filters."""
  AND: [ResolversClaimWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResolversClaimWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResolversClaimWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  resolverName: String

  """All values that are not equal to given value."""
  resolverName_not: String

  """All values that are contained in given list."""
  resolverName_in: [String!]

  """All values that are not contained in given list."""
  resolverName_not_in: [String!]

  """All values less than the given value."""
  resolverName_lt: String

  """All values less than or equal the given value."""
  resolverName_lte: String

  """All values greater than the given value."""
  resolverName_gt: String

  """All values greater than or equal the given value."""
  resolverName_gte: String

  """All values containing the given string."""
  resolverName_contains: String

  """All values not containing the given string."""
  resolverName_not_contains: String

  """All values starting with the given string."""
  resolverName_starts_with: String

  """All values not starting with the given string."""
  resolverName_not_starts_with: String

  """All values ending with the given string."""
  resolverName_ends_with: String

  """All values not ending with the given string."""
  resolverName_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  requiredRoles_every: RoleWhereInput
  requiredRoles_some: RoleWhereInput
  requiredRoles_none: RoleWhereInput
  requiredPermissions_every: PermissionWhereInput
  requiredPermissions_some: PermissionWhereInput
  requiredPermissions_none: PermissionWhereInput
  exceptRoles_every: RoleWhereInput
  exceptRoles_some: RoleWhereInput
  exceptRoles_none: RoleWhereInput
  exceptioPermissions_every: PermissionWhereInput
  exceptioPermissions_some: PermissionWhereInput
  exceptioPermissions_none: PermissionWhereInput
}

input ResolversClaimWhereUniqueInput {
  id: ID
}

type Retailer implements Node {
  id: ID!
  _version: Int!
  owner(where: AssignmentWhereInput, orderBy: AssignmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Assignment!]
  businessCover: Media
  businessAvatar: Media
  businessName: String
  businessAddress: Address
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  socialNumberImages(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  businessLicense: String
  businessLicenseImages(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  products(where: ProductRetailerWhereInput, orderBy: ProductRetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductRetailer!]
  enabled: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type RetailerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RetailerEdge]!
  aggregate: AggregateRetailer!
}

input RetailerCreateInput {
  id: ID
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  owner: AssignmentCreateManyWithoutRetailersInput
  businessCover: MediaCreateOneInput
  businessAvatar: MediaCreateOneInput
  businessAddress: AddressCreateOneInput
  socialNumberImages: MediaCreateManyInput
  businessLicenseImages: MediaCreateManyInput
  products: ProductRetailerCreateManyWithoutRetailerInput
}

input RetailerCreateManyWithoutOwnerInput {
  create: [RetailerCreateWithoutOwnerInput!]
  connect: [RetailerWhereUniqueInput!]
}

input RetailerCreateOneInput {
  create: RetailerCreateInput
  connect: RetailerWhereUniqueInput
}

input RetailerCreateOneWithoutProductsInput {
  create: RetailerCreateWithoutProductsInput
  connect: RetailerWhereUniqueInput
}

input RetailerCreateWithoutOwnerInput {
  id: ID
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  businessCover: MediaCreateOneInput
  businessAvatar: MediaCreateOneInput
  businessAddress: AddressCreateOneInput
  socialNumberImages: MediaCreateManyInput
  businessLicenseImages: MediaCreateManyInput
  products: ProductRetailerCreateManyWithoutRetailerInput
}

input RetailerCreateWithoutProductsInput {
  id: ID
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  owner: AssignmentCreateManyWithoutRetailersInput
  businessCover: MediaCreateOneInput
  businessAvatar: MediaCreateOneInput
  businessAddress: AddressCreateOneInput
  socialNumberImages: MediaCreateManyInput
  businessLicenseImages: MediaCreateManyInput
}

"""An edge in a connection."""
type RetailerEdge {
  """The item at the end of the edge."""
  node: Retailer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RetailerOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  businessName_ASC
  businessName_DESC
  businessPhone_ASC
  businessPhone_DESC
  businessEmail_ASC
  businessEmail_DESC
  businessLink_ASC
  businessLink_DESC
  socialNumber_ASC
  socialNumber_DESC
  businessLicense_ASC
  businessLicense_DESC
  bankAccNumber_ASC
  bankAccNumber_DESC
  bankAccName_ASC
  bankAccName_DESC
  bankName_ASC
  bankName_DESC
  bankBranch_ASC
  bankBranch_DESC
  swiftCode_ASC
  swiftCode_DESC
  enabled_ASC
  enabled_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RetailerPreviousValues {
  id: ID!
  _version: Int!
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RetailerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RetailerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RetailerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RetailerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  businessName: String

  """All values that are not equal to given value."""
  businessName_not: String

  """All values that are contained in given list."""
  businessName_in: [String!]

  """All values that are not contained in given list."""
  businessName_not_in: [String!]

  """All values less than the given value."""
  businessName_lt: String

  """All values less than or equal the given value."""
  businessName_lte: String

  """All values greater than the given value."""
  businessName_gt: String

  """All values greater than or equal the given value."""
  businessName_gte: String

  """All values containing the given string."""
  businessName_contains: String

  """All values not containing the given string."""
  businessName_not_contains: String

  """All values starting with the given string."""
  businessName_starts_with: String

  """All values not starting with the given string."""
  businessName_not_starts_with: String

  """All values ending with the given string."""
  businessName_ends_with: String

  """All values not ending with the given string."""
  businessName_not_ends_with: String
  businessPhone: String

  """All values that are not equal to given value."""
  businessPhone_not: String

  """All values that are contained in given list."""
  businessPhone_in: [String!]

  """All values that are not contained in given list."""
  businessPhone_not_in: [String!]

  """All values less than the given value."""
  businessPhone_lt: String

  """All values less than or equal the given value."""
  businessPhone_lte: String

  """All values greater than the given value."""
  businessPhone_gt: String

  """All values greater than or equal the given value."""
  businessPhone_gte: String

  """All values containing the given string."""
  businessPhone_contains: String

  """All values not containing the given string."""
  businessPhone_not_contains: String

  """All values starting with the given string."""
  businessPhone_starts_with: String

  """All values not starting with the given string."""
  businessPhone_not_starts_with: String

  """All values ending with the given string."""
  businessPhone_ends_with: String

  """All values not ending with the given string."""
  businessPhone_not_ends_with: String
  businessEmail: String

  """All values that are not equal to given value."""
  businessEmail_not: String

  """All values that are contained in given list."""
  businessEmail_in: [String!]

  """All values that are not contained in given list."""
  businessEmail_not_in: [String!]

  """All values less than the given value."""
  businessEmail_lt: String

  """All values less than or equal the given value."""
  businessEmail_lte: String

  """All values greater than the given value."""
  businessEmail_gt: String

  """All values greater than or equal the given value."""
  businessEmail_gte: String

  """All values containing the given string."""
  businessEmail_contains: String

  """All values not containing the given string."""
  businessEmail_not_contains: String

  """All values starting with the given string."""
  businessEmail_starts_with: String

  """All values not starting with the given string."""
  businessEmail_not_starts_with: String

  """All values ending with the given string."""
  businessEmail_ends_with: String

  """All values not ending with the given string."""
  businessEmail_not_ends_with: String
  businessLink: String

  """All values that are not equal to given value."""
  businessLink_not: String

  """All values that are contained in given list."""
  businessLink_in: [String!]

  """All values that are not contained in given list."""
  businessLink_not_in: [String!]

  """All values less than the given value."""
  businessLink_lt: String

  """All values less than or equal the given value."""
  businessLink_lte: String

  """All values greater than the given value."""
  businessLink_gt: String

  """All values greater than or equal the given value."""
  businessLink_gte: String

  """All values containing the given string."""
  businessLink_contains: String

  """All values not containing the given string."""
  businessLink_not_contains: String

  """All values starting with the given string."""
  businessLink_starts_with: String

  """All values not starting with the given string."""
  businessLink_not_starts_with: String

  """All values ending with the given string."""
  businessLink_ends_with: String

  """All values not ending with the given string."""
  businessLink_not_ends_with: String
  socialNumber: String

  """All values that are not equal to given value."""
  socialNumber_not: String

  """All values that are contained in given list."""
  socialNumber_in: [String!]

  """All values that are not contained in given list."""
  socialNumber_not_in: [String!]

  """All values less than the given value."""
  socialNumber_lt: String

  """All values less than or equal the given value."""
  socialNumber_lte: String

  """All values greater than the given value."""
  socialNumber_gt: String

  """All values greater than or equal the given value."""
  socialNumber_gte: String

  """All values containing the given string."""
  socialNumber_contains: String

  """All values not containing the given string."""
  socialNumber_not_contains: String

  """All values starting with the given string."""
  socialNumber_starts_with: String

  """All values not starting with the given string."""
  socialNumber_not_starts_with: String

  """All values ending with the given string."""
  socialNumber_ends_with: String

  """All values not ending with the given string."""
  socialNumber_not_ends_with: String
  businessLicense: String

  """All values that are not equal to given value."""
  businessLicense_not: String

  """All values that are contained in given list."""
  businessLicense_in: [String!]

  """All values that are not contained in given list."""
  businessLicense_not_in: [String!]

  """All values less than the given value."""
  businessLicense_lt: String

  """All values less than or equal the given value."""
  businessLicense_lte: String

  """All values greater than the given value."""
  businessLicense_gt: String

  """All values greater than or equal the given value."""
  businessLicense_gte: String

  """All values containing the given string."""
  businessLicense_contains: String

  """All values not containing the given string."""
  businessLicense_not_contains: String

  """All values starting with the given string."""
  businessLicense_starts_with: String

  """All values not starting with the given string."""
  businessLicense_not_starts_with: String

  """All values ending with the given string."""
  businessLicense_ends_with: String

  """All values not ending with the given string."""
  businessLicense_not_ends_with: String
  bankAccNumber: String

  """All values that are not equal to given value."""
  bankAccNumber_not: String

  """All values that are contained in given list."""
  bankAccNumber_in: [String!]

  """All values that are not contained in given list."""
  bankAccNumber_not_in: [String!]

  """All values less than the given value."""
  bankAccNumber_lt: String

  """All values less than or equal the given value."""
  bankAccNumber_lte: String

  """All values greater than the given value."""
  bankAccNumber_gt: String

  """All values greater than or equal the given value."""
  bankAccNumber_gte: String

  """All values containing the given string."""
  bankAccNumber_contains: String

  """All values not containing the given string."""
  bankAccNumber_not_contains: String

  """All values starting with the given string."""
  bankAccNumber_starts_with: String

  """All values not starting with the given string."""
  bankAccNumber_not_starts_with: String

  """All values ending with the given string."""
  bankAccNumber_ends_with: String

  """All values not ending with the given string."""
  bankAccNumber_not_ends_with: String
  bankAccName: String

  """All values that are not equal to given value."""
  bankAccName_not: String

  """All values that are contained in given list."""
  bankAccName_in: [String!]

  """All values that are not contained in given list."""
  bankAccName_not_in: [String!]

  """All values less than the given value."""
  bankAccName_lt: String

  """All values less than or equal the given value."""
  bankAccName_lte: String

  """All values greater than the given value."""
  bankAccName_gt: String

  """All values greater than or equal the given value."""
  bankAccName_gte: String

  """All values containing the given string."""
  bankAccName_contains: String

  """All values not containing the given string."""
  bankAccName_not_contains: String

  """All values starting with the given string."""
  bankAccName_starts_with: String

  """All values not starting with the given string."""
  bankAccName_not_starts_with: String

  """All values ending with the given string."""
  bankAccName_ends_with: String

  """All values not ending with the given string."""
  bankAccName_not_ends_with: String
  bankName: String

  """All values that are not equal to given value."""
  bankName_not: String

  """All values that are contained in given list."""
  bankName_in: [String!]

  """All values that are not contained in given list."""
  bankName_not_in: [String!]

  """All values less than the given value."""
  bankName_lt: String

  """All values less than or equal the given value."""
  bankName_lte: String

  """All values greater than the given value."""
  bankName_gt: String

  """All values greater than or equal the given value."""
  bankName_gte: String

  """All values containing the given string."""
  bankName_contains: String

  """All values not containing the given string."""
  bankName_not_contains: String

  """All values starting with the given string."""
  bankName_starts_with: String

  """All values not starting with the given string."""
  bankName_not_starts_with: String

  """All values ending with the given string."""
  bankName_ends_with: String

  """All values not ending with the given string."""
  bankName_not_ends_with: String
  bankBranch: String

  """All values that are not equal to given value."""
  bankBranch_not: String

  """All values that are contained in given list."""
  bankBranch_in: [String!]

  """All values that are not contained in given list."""
  bankBranch_not_in: [String!]

  """All values less than the given value."""
  bankBranch_lt: String

  """All values less than or equal the given value."""
  bankBranch_lte: String

  """All values greater than the given value."""
  bankBranch_gt: String

  """All values greater than or equal the given value."""
  bankBranch_gte: String

  """All values containing the given string."""
  bankBranch_contains: String

  """All values not containing the given string."""
  bankBranch_not_contains: String

  """All values starting with the given string."""
  bankBranch_starts_with: String

  """All values not starting with the given string."""
  bankBranch_not_starts_with: String

  """All values ending with the given string."""
  bankBranch_ends_with: String

  """All values not ending with the given string."""
  bankBranch_not_ends_with: String
  swiftCode: String

  """All values that are not equal to given value."""
  swiftCode_not: String

  """All values that are contained in given list."""
  swiftCode_in: [String!]

  """All values that are not contained in given list."""
  swiftCode_not_in: [String!]

  """All values less than the given value."""
  swiftCode_lt: String

  """All values less than or equal the given value."""
  swiftCode_lte: String

  """All values greater than the given value."""
  swiftCode_gt: String

  """All values greater than or equal the given value."""
  swiftCode_gte: String

  """All values containing the given string."""
  swiftCode_contains: String

  """All values not containing the given string."""
  swiftCode_not_contains: String

  """All values starting with the given string."""
  swiftCode_starts_with: String

  """All values not starting with the given string."""
  swiftCode_not_starts_with: String

  """All values ending with the given string."""
  swiftCode_ends_with: String

  """All values not ending with the given string."""
  swiftCode_not_ends_with: String
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type RetailerSubscriptionPayload {
  mutation: MutationType!
  node: Retailer
  updatedFields: [String!]
  previousValues: RetailerPreviousValues
}

input RetailerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RetailerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RetailerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RetailerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RetailerWhereInput
}

input RetailerUpdateDataInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  owner: AssignmentUpdateManyWithoutRetailersInput
  businessCover: MediaUpdateOneInput
  businessAvatar: MediaUpdateOneInput
  businessAddress: AddressUpdateOneInput
  socialNumberImages: MediaUpdateManyInput
  businessLicenseImages: MediaUpdateManyInput
  products: ProductRetailerUpdateManyWithoutRetailerInput
}

input RetailerUpdateInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  owner: AssignmentUpdateManyWithoutRetailersInput
  businessCover: MediaUpdateOneInput
  businessAvatar: MediaUpdateOneInput
  businessAddress: AddressUpdateOneInput
  socialNumberImages: MediaUpdateManyInput
  businessLicenseImages: MediaUpdateManyInput
  products: ProductRetailerUpdateManyWithoutRetailerInput
}

input RetailerUpdateManyDataInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
}

input RetailerUpdateManyMutationInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
}

input RetailerUpdateManyWithoutOwnerInput {
  create: [RetailerCreateWithoutOwnerInput!]
  connect: [RetailerWhereUniqueInput!]
  set: [RetailerWhereUniqueInput!]
  disconnect: [RetailerWhereUniqueInput!]
  delete: [RetailerWhereUniqueInput!]
  update: [RetailerUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [RetailerUpdateManyWithWhereNestedInput!]
  deleteMany: [RetailerScalarWhereInput!]
  upsert: [RetailerUpsertWithWhereUniqueWithoutOwnerInput!]
}

input RetailerUpdateManyWithWhereNestedInput {
  where: RetailerScalarWhereInput!
  data: RetailerUpdateManyDataInput!
}

input RetailerUpdateOneInput {
  create: RetailerCreateInput
  connect: RetailerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RetailerUpdateDataInput
  upsert: RetailerUpsertNestedInput
}

input RetailerUpdateOneWithoutProductsInput {
  create: RetailerCreateWithoutProductsInput
  connect: RetailerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RetailerUpdateWithoutProductsDataInput
  upsert: RetailerUpsertWithoutProductsInput
}

input RetailerUpdateWithoutOwnerDataInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  businessCover: MediaUpdateOneInput
  businessAvatar: MediaUpdateOneInput
  businessAddress: AddressUpdateOneInput
  socialNumberImages: MediaUpdateManyInput
  businessLicenseImages: MediaUpdateManyInput
  products: ProductRetailerUpdateManyWithoutRetailerInput
}

input RetailerUpdateWithoutProductsDataInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  owner: AssignmentUpdateManyWithoutRetailersInput
  businessCover: MediaUpdateOneInput
  businessAvatar: MediaUpdateOneInput
  businessAddress: AddressUpdateOneInput
  socialNumberImages: MediaUpdateManyInput
  businessLicenseImages: MediaUpdateManyInput
}

input RetailerUpdateWithWhereUniqueWithoutOwnerInput {
  where: RetailerWhereUniqueInput!
  data: RetailerUpdateWithoutOwnerDataInput!
}

input RetailerUpsertNestedInput {
  update: RetailerUpdateDataInput!
  create: RetailerCreateInput!
}

input RetailerUpsertWithoutProductsInput {
  update: RetailerUpdateWithoutProductsDataInput!
  create: RetailerCreateWithoutProductsInput!
}

input RetailerUpsertWithWhereUniqueWithoutOwnerInput {
  where: RetailerWhereUniqueInput!
  update: RetailerUpdateWithoutOwnerDataInput!
  create: RetailerCreateWithoutOwnerInput!
}

input RetailerWhereInput {
  """Logical AND on all given filters."""
  AND: [RetailerWhereInput!]

  """Logical OR on all given filters."""
  OR: [RetailerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RetailerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  businessName: String

  """All values that are not equal to given value."""
  businessName_not: String

  """All values that are contained in given list."""
  businessName_in: [String!]

  """All values that are not contained in given list."""
  businessName_not_in: [String!]

  """All values less than the given value."""
  businessName_lt: String

  """All values less than or equal the given value."""
  businessName_lte: String

  """All values greater than the given value."""
  businessName_gt: String

  """All values greater than or equal the given value."""
  businessName_gte: String

  """All values containing the given string."""
  businessName_contains: String

  """All values not containing the given string."""
  businessName_not_contains: String

  """All values starting with the given string."""
  businessName_starts_with: String

  """All values not starting with the given string."""
  businessName_not_starts_with: String

  """All values ending with the given string."""
  businessName_ends_with: String

  """All values not ending with the given string."""
  businessName_not_ends_with: String
  businessPhone: String

  """All values that are not equal to given value."""
  businessPhone_not: String

  """All values that are contained in given list."""
  businessPhone_in: [String!]

  """All values that are not contained in given list."""
  businessPhone_not_in: [String!]

  """All values less than the given value."""
  businessPhone_lt: String

  """All values less than or equal the given value."""
  businessPhone_lte: String

  """All values greater than the given value."""
  businessPhone_gt: String

  """All values greater than or equal the given value."""
  businessPhone_gte: String

  """All values containing the given string."""
  businessPhone_contains: String

  """All values not containing the given string."""
  businessPhone_not_contains: String

  """All values starting with the given string."""
  businessPhone_starts_with: String

  """All values not starting with the given string."""
  businessPhone_not_starts_with: String

  """All values ending with the given string."""
  businessPhone_ends_with: String

  """All values not ending with the given string."""
  businessPhone_not_ends_with: String
  businessEmail: String

  """All values that are not equal to given value."""
  businessEmail_not: String

  """All values that are contained in given list."""
  businessEmail_in: [String!]

  """All values that are not contained in given list."""
  businessEmail_not_in: [String!]

  """All values less than the given value."""
  businessEmail_lt: String

  """All values less than or equal the given value."""
  businessEmail_lte: String

  """All values greater than the given value."""
  businessEmail_gt: String

  """All values greater than or equal the given value."""
  businessEmail_gte: String

  """All values containing the given string."""
  businessEmail_contains: String

  """All values not containing the given string."""
  businessEmail_not_contains: String

  """All values starting with the given string."""
  businessEmail_starts_with: String

  """All values not starting with the given string."""
  businessEmail_not_starts_with: String

  """All values ending with the given string."""
  businessEmail_ends_with: String

  """All values not ending with the given string."""
  businessEmail_not_ends_with: String
  businessLink: String

  """All values that are not equal to given value."""
  businessLink_not: String

  """All values that are contained in given list."""
  businessLink_in: [String!]

  """All values that are not contained in given list."""
  businessLink_not_in: [String!]

  """All values less than the given value."""
  businessLink_lt: String

  """All values less than or equal the given value."""
  businessLink_lte: String

  """All values greater than the given value."""
  businessLink_gt: String

  """All values greater than or equal the given value."""
  businessLink_gte: String

  """All values containing the given string."""
  businessLink_contains: String

  """All values not containing the given string."""
  businessLink_not_contains: String

  """All values starting with the given string."""
  businessLink_starts_with: String

  """All values not starting with the given string."""
  businessLink_not_starts_with: String

  """All values ending with the given string."""
  businessLink_ends_with: String

  """All values not ending with the given string."""
  businessLink_not_ends_with: String
  socialNumber: String

  """All values that are not equal to given value."""
  socialNumber_not: String

  """All values that are contained in given list."""
  socialNumber_in: [String!]

  """All values that are not contained in given list."""
  socialNumber_not_in: [String!]

  """All values less than the given value."""
  socialNumber_lt: String

  """All values less than or equal the given value."""
  socialNumber_lte: String

  """All values greater than the given value."""
  socialNumber_gt: String

  """All values greater than or equal the given value."""
  socialNumber_gte: String

  """All values containing the given string."""
  socialNumber_contains: String

  """All values not containing the given string."""
  socialNumber_not_contains: String

  """All values starting with the given string."""
  socialNumber_starts_with: String

  """All values not starting with the given string."""
  socialNumber_not_starts_with: String

  """All values ending with the given string."""
  socialNumber_ends_with: String

  """All values not ending with the given string."""
  socialNumber_not_ends_with: String
  businessLicense: String

  """All values that are not equal to given value."""
  businessLicense_not: String

  """All values that are contained in given list."""
  businessLicense_in: [String!]

  """All values that are not contained in given list."""
  businessLicense_not_in: [String!]

  """All values less than the given value."""
  businessLicense_lt: String

  """All values less than or equal the given value."""
  businessLicense_lte: String

  """All values greater than the given value."""
  businessLicense_gt: String

  """All values greater than or equal the given value."""
  businessLicense_gte: String

  """All values containing the given string."""
  businessLicense_contains: String

  """All values not containing the given string."""
  businessLicense_not_contains: String

  """All values starting with the given string."""
  businessLicense_starts_with: String

  """All values not starting with the given string."""
  businessLicense_not_starts_with: String

  """All values ending with the given string."""
  businessLicense_ends_with: String

  """All values not ending with the given string."""
  businessLicense_not_ends_with: String
  bankAccNumber: String

  """All values that are not equal to given value."""
  bankAccNumber_not: String

  """All values that are contained in given list."""
  bankAccNumber_in: [String!]

  """All values that are not contained in given list."""
  bankAccNumber_not_in: [String!]

  """All values less than the given value."""
  bankAccNumber_lt: String

  """All values less than or equal the given value."""
  bankAccNumber_lte: String

  """All values greater than the given value."""
  bankAccNumber_gt: String

  """All values greater than or equal the given value."""
  bankAccNumber_gte: String

  """All values containing the given string."""
  bankAccNumber_contains: String

  """All values not containing the given string."""
  bankAccNumber_not_contains: String

  """All values starting with the given string."""
  bankAccNumber_starts_with: String

  """All values not starting with the given string."""
  bankAccNumber_not_starts_with: String

  """All values ending with the given string."""
  bankAccNumber_ends_with: String

  """All values not ending with the given string."""
  bankAccNumber_not_ends_with: String
  bankAccName: String

  """All values that are not equal to given value."""
  bankAccName_not: String

  """All values that are contained in given list."""
  bankAccName_in: [String!]

  """All values that are not contained in given list."""
  bankAccName_not_in: [String!]

  """All values less than the given value."""
  bankAccName_lt: String

  """All values less than or equal the given value."""
  bankAccName_lte: String

  """All values greater than the given value."""
  bankAccName_gt: String

  """All values greater than or equal the given value."""
  bankAccName_gte: String

  """All values containing the given string."""
  bankAccName_contains: String

  """All values not containing the given string."""
  bankAccName_not_contains: String

  """All values starting with the given string."""
  bankAccName_starts_with: String

  """All values not starting with the given string."""
  bankAccName_not_starts_with: String

  """All values ending with the given string."""
  bankAccName_ends_with: String

  """All values not ending with the given string."""
  bankAccName_not_ends_with: String
  bankName: String

  """All values that are not equal to given value."""
  bankName_not: String

  """All values that are contained in given list."""
  bankName_in: [String!]

  """All values that are not contained in given list."""
  bankName_not_in: [String!]

  """All values less than the given value."""
  bankName_lt: String

  """All values less than or equal the given value."""
  bankName_lte: String

  """All values greater than the given value."""
  bankName_gt: String

  """All values greater than or equal the given value."""
  bankName_gte: String

  """All values containing the given string."""
  bankName_contains: String

  """All values not containing the given string."""
  bankName_not_contains: String

  """All values starting with the given string."""
  bankName_starts_with: String

  """All values not starting with the given string."""
  bankName_not_starts_with: String

  """All values ending with the given string."""
  bankName_ends_with: String

  """All values not ending with the given string."""
  bankName_not_ends_with: String
  bankBranch: String

  """All values that are not equal to given value."""
  bankBranch_not: String

  """All values that are contained in given list."""
  bankBranch_in: [String!]

  """All values that are not contained in given list."""
  bankBranch_not_in: [String!]

  """All values less than the given value."""
  bankBranch_lt: String

  """All values less than or equal the given value."""
  bankBranch_lte: String

  """All values greater than the given value."""
  bankBranch_gt: String

  """All values greater than or equal the given value."""
  bankBranch_gte: String

  """All values containing the given string."""
  bankBranch_contains: String

  """All values not containing the given string."""
  bankBranch_not_contains: String

  """All values starting with the given string."""
  bankBranch_starts_with: String

  """All values not starting with the given string."""
  bankBranch_not_starts_with: String

  """All values ending with the given string."""
  bankBranch_ends_with: String

  """All values not ending with the given string."""
  bankBranch_not_ends_with: String
  swiftCode: String

  """All values that are not equal to given value."""
  swiftCode_not: String

  """All values that are contained in given list."""
  swiftCode_in: [String!]

  """All values that are not contained in given list."""
  swiftCode_not_in: [String!]

  """All values less than the given value."""
  swiftCode_lt: String

  """All values less than or equal the given value."""
  swiftCode_lte: String

  """All values greater than the given value."""
  swiftCode_gt: String

  """All values greater than or equal the given value."""
  swiftCode_gte: String

  """All values containing the given string."""
  swiftCode_contains: String

  """All values not containing the given string."""
  swiftCode_not_contains: String

  """All values starting with the given string."""
  swiftCode_starts_with: String

  """All values not starting with the given string."""
  swiftCode_not_starts_with: String

  """All values ending with the given string."""
  swiftCode_ends_with: String

  """All values not ending with the given string."""
  swiftCode_not_ends_with: String
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  owner_every: AssignmentWhereInput
  owner_some: AssignmentWhereInput
  owner_none: AssignmentWhereInput
  businessCover: MediaWhereInput
  businessAvatar: MediaWhereInput
  businessAddress: AddressWhereInput
  socialNumberImages_every: MediaWhereInput
  socialNumberImages_some: MediaWhereInput
  socialNumberImages_none: MediaWhereInput
  businessLicenseImages_every: MediaWhereInput
  businessLicenseImages_some: MediaWhereInput
  businessLicenseImages_none: MediaWhereInput
  products_every: ProductRetailerWhereInput
  products_some: ProductRetailerWhereInput
  products_none: ProductRetailerWhereInput
}

input RetailerWhereUniqueInput {
  id: ID
  businessName: String
  businessLink: String
}

type Review implements Node {
  id: ID!
  _version: Int!
  productId: String
  user: User
  title: String!
  body: String!
  stars: Int!
  contentMedia(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  id: ID
  _version: Int
  productId: String
  title: String!
  body: String!
  stars: Int!
  user: UserCreateOneWithoutReviewsInput
  contentMedia: MediaCreateManyInput
}

input ReviewCreateManyWithoutUserInput {
  create: [ReviewCreateWithoutUserInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutUserInput {
  id: ID
  _version: Int
  productId: String
  title: String!
  body: String!
  stars: Int!
  contentMedia: MediaCreateManyInput
}

"""An edge in a connection."""
type ReviewEdge {
  """The item at the end of the edge."""
  node: Review!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  productId_ASC
  productId_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  stars_ASC
  stars_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReviewPreviousValues {
  id: ID!
  _version: Int!
  productId: String
  title: String!
  body: String!
  stars: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ReviewScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  productId: String

  """All values that are not equal to given value."""
  productId_not: String

  """All values that are contained in given list."""
  productId_in: [String!]

  """All values that are not contained in given list."""
  productId_not_in: [String!]

  """All values less than the given value."""
  productId_lt: String

  """All values less than or equal the given value."""
  productId_lte: String

  """All values greater than the given value."""
  productId_gt: String

  """All values greater than or equal the given value."""
  productId_gte: String

  """All values containing the given string."""
  productId_contains: String

  """All values not containing the given string."""
  productId_not_contains: String

  """All values starting with the given string."""
  productId_starts_with: String

  """All values not starting with the given string."""
  productId_not_starts_with: String

  """All values ending with the given string."""
  productId_ends_with: String

  """All values not ending with the given string."""
  productId_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  stars: Int

  """All values that are not equal to given value."""
  stars_not: Int

  """All values that are contained in given list."""
  stars_in: [Int!]

  """All values that are not contained in given list."""
  stars_not_in: [Int!]

  """All values less than the given value."""
  stars_lt: Int

  """All values less than or equal the given value."""
  stars_lte: Int

  """All values greater than the given value."""
  stars_gt: Int

  """All values greater than or equal the given value."""
  stars_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
}

input ReviewUpdateInput {
  _version: Int
  productId: String
  title: String
  body: String
  stars: Int
  user: UserUpdateOneWithoutReviewsInput
  contentMedia: MediaUpdateManyInput
}

input ReviewUpdateManyDataInput {
  _version: Int
  productId: String
  title: String
  body: String
  stars: Int
}

input ReviewUpdateManyMutationInput {
  _version: Int
  productId: String
  title: String
  body: String
  stars: Int
}

input ReviewUpdateManyWithoutUserInput {
  create: [ReviewCreateWithoutUserInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [ReviewScalarWhereInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutUserInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyDataInput!
}

input ReviewUpdateWithoutUserDataInput {
  _version: Int
  productId: String
  title: String
  body: String
  stars: Int
  contentMedia: MediaUpdateManyInput
}

input ReviewUpdateWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutUserDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutUserDataInput!
  create: ReviewCreateWithoutUserInput!
}

input ReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewWhereInput!]
=======
}

input PermissionWhereInput {
  """Logical AND on all given filters."""
  AND: [PermissionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PermissionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PermissionWhereInput!]
>>>>>>> origin/retailer_implementation
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
<<<<<<< HEAD
  productId: String

  """All values that are not equal to given value."""
  productId_not: String

  """All values that are contained in given list."""
  productId_in: [String!]

  """All values that are not contained in given list."""
  productId_not_in: [String!]

  """All values less than the given value."""
  productId_lt: String

  """All values less than or equal the given value."""
  productId_lte: String

  """All values greater than the given value."""
  productId_gt: String

  """All values greater than or equal the given value."""
  productId_gte: String

  """All values containing the given string."""
  productId_contains: String

  """All values not containing the given string."""
  productId_not_contains: String

  """All values starting with the given string."""
  productId_starts_with: String

  """All values not starting with the given string."""
  productId_not_starts_with: String

  """All values ending with the given string."""
  productId_ends_with: String

  """All values not ending with the given string."""
  productId_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  stars: Int

  """All values that are not equal to given value."""
  stars_not: Int

  """All values that are contained in given list."""
  stars_in: [Int!]

  """All values that are not contained in given list."""
  stars_not_in: [Int!]

  """All values less than the given value."""
  stars_lt: Int

  """All values less than or equal the given value."""
  stars_lte: Int

  """All values greater than the given value."""
  stars_gt: Int

  """All values greater than or equal the given value."""
  stars_gte: Int
=======
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  priority: Int

  """All values that are not equal to given value."""
  priority_not: Int

  """All values that are contained in given list."""
  priority_in: [Int!]

  """All values that are not contained in given list."""
  priority_not_in: [Int!]

  """All values less than the given value."""
  priority_lt: Int

  """All values less than or equal the given value."""
  priority_lte: Int

  """All values greater than the given value."""
  priority_gt: Int

  """All values greater than or equal the given value."""
  priority_gte: Int
>>>>>>> origin/retailer_implementation
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  contentMedia_every: MediaWhereInput
  contentMedia_some: MediaWhereInput
  contentMedia_none: MediaWhereInput
}

<<<<<<< HEAD
input ReviewWhereUniqueInput {
  id: ID
}

type Role implements Node {
  id: ID!
  _version: Int!
  name: String
  description: String
  type: String
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  id: ID
  _version: Int
  name: String
  description: String
  type: String
  permissions: PermissionCreateManyInput
}

input RoleCreateManyInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RolePreviousValues {
  id: ID!
  _version: Int!
  name: String
  description: String
  type: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RoleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

=======
input PermissionWhereUniqueInput {
  id: ID
  type: String
}

type Policy implements Node {
  id: ID!
  _version: Int!
  resolver: String
  requiredPermissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission!]
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PolicyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PolicyEdge]!
  aggregate: AggregatePolicy!
}

input PolicyCreateInput {
  id: ID
  _version: Int
  resolver: String
  description: String
  requiredPermissions: PermissionCreateManyInput
}

"""An edge in a connection."""
type PolicyEdge {
  """The item at the end of the edge."""
  node: Policy!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PolicyOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  resolver_ASC
  resolver_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PolicyPreviousValues {
  id: ID!
  _version: Int!
  resolver: String
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PolicySubscriptionPayload {
  mutation: MutationType!
  node: Policy
  updatedFields: [String!]
  previousValues: PolicyPreviousValues
}

input PolicySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PolicySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PolicySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PolicySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PolicyWhereInput
}

input PolicyUpdateInput {
  _version: Int
  resolver: String
  description: String
  requiredPermissions: PermissionUpdateManyInput
}

input PolicyUpdateManyMutationInput {
  _version: Int
  resolver: String
  description: String
}

input PolicyWhereInput {
  """Logical AND on all given filters."""
  AND: [PolicyWhereInput!]

  """Logical OR on all given filters."""
  OR: [PolicyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PolicyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

>>>>>>> origin/retailer_implementation
  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
<<<<<<< HEAD
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
=======
  resolver: String

  """All values that are not equal to given value."""
  resolver_not: String

  """All values that are contained in given list."""
  resolver_in: [String!]

  """All values that are not contained in given list."""
  resolver_not_in: [String!]

  """All values less than the given value."""
  resolver_lt: String

  """All values less than or equal the given value."""
  resolver_lte: String

  """All values greater than the given value."""
  resolver_gt: String

  """All values greater than or equal the given value."""
  resolver_gte: String

  """All values containing the given string."""
  resolver_contains: String

  """All values not containing the given string."""
  resolver_not_contains: String

  """All values starting with the given string."""
  resolver_starts_with: String

  """All values not starting with the given string."""
  resolver_not_starts_with: String

  """All values ending with the given string."""
  resolver_ends_with: String

  """All values not ending with the given string."""
  resolver_not_ends_with: String
>>>>>>> origin/retailer_implementation
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String
<<<<<<< HEAD

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
=======

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
>>>>>>> origin/retailer_implementation
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateDataInput {
  _version: Int
  name: String
  description: String
  type: String
  permissions: PermissionUpdateManyInput
}

input RoleUpdateInput {
  _version: Int
  name: String
  description: String
  type: String
  permissions: PermissionUpdateManyInput
}

input RoleUpdateManyDataInput {
  _version: Int
  name: String
  description: String
  type: String
}

input RoleUpdateManyInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueNestedInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleScalarWhereInput!]
  upsert: [RoleUpsertWithWhereUniqueNestedInput!]
}

input RoleUpdateManyMutationInput {
  _version: Int
  name: String
  description: String
  type: String
}

input RoleUpdateManyWithWhereNestedInput {
  where: RoleScalarWhereInput!
  data: RoleUpdateManyDataInput!
}

<<<<<<< HEAD
input RoleUpdateWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateDataInput!
}

input RoleUpsertWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateDataInput!
  create: RoleCreateInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleWhereInput!]
=======
  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  requiredPermissions_every: PermissionWhereInput
  requiredPermissions_some: PermissionWhereInput
  requiredPermissions_none: PermissionWhereInput
}

input PolicyWhereUniqueInput {
  id: ID
}

type Product implements Node {
  id: ID!
  _version: Int!
  productTemplate: ProductTemplate
  productMedias(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  productRetailers(where: ProductRetailerWhereInput, orderBy: ProductRetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductRetailer!]
  sku: String
  options(where: ProductOptionWhereInput, orderBy: ProductOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductOption!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductAttribute implements Node {
  id: ID!
  _version: Int!
  name: String
  values(where: ProductAttributeValueWhereInput, orderBy: ProductAttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductAttributeValue!]
  productOption(where: ProductOptionWhereInput, orderBy: ProductOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductOption!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProductAttributeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductAttributeEdge]!
  aggregate: AggregateProductAttribute!
}

input ProductAttributeCreateInput {
  id: ID
  _version: Int
  name: String
  values: ProductAttributeValueCreateManyWithoutAttributeInput
  productOption: ProductOptionCreateManyWithoutAttributeInput
}

input ProductAttributeCreateManyWithoutValuesInput {
  create: [ProductAttributeCreateWithoutValuesInput!]
  connect: [ProductAttributeWhereUniqueInput!]
}

input ProductAttributeCreateOneWithoutProductOptionInput {
  create: ProductAttributeCreateWithoutProductOptionInput
  connect: ProductAttributeWhereUniqueInput
}

input ProductAttributeCreateWithoutProductOptionInput {
  id: ID
  _version: Int
  name: String
  values: ProductAttributeValueCreateManyWithoutAttributeInput
}

input ProductAttributeCreateWithoutValuesInput {
  id: ID
  _version: Int
  name: String
  productOption: ProductOptionCreateManyWithoutAttributeInput
}

"""An edge in a connection."""
type ProductAttributeEdge {
  """The item at the end of the edge."""
  node: ProductAttribute!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductAttributeOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductAttributePreviousValues {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductAttributeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeScalarWhereInput!]
>>>>>>> origin/retailer_implementation
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
<<<<<<< HEAD
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
=======
>>>>>>> origin/retailer_implementation
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  permissions_every: PermissionWhereInput
  permissions_some: PermissionWhereInput
  permissions_none: PermissionWhereInput
}

<<<<<<< HEAD
input RoleWhereUniqueInput {
  id: ID
  name: String
}

type SecurityAnswer implements Node {
  id: ID!
  _version: Int!
  answer: String
  user: User
  securityQuestion: SecurityQuestion
=======
type ProductAttributeSubscriptionPayload {
  mutation: MutationType!
  node: ProductAttribute
  updatedFields: [String!]
  previousValues: ProductAttributePreviousValues
}

input ProductAttributeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductAttributeWhereInput
}

input ProductAttributeUpdateInput {
  _version: Int
  name: String
  values: ProductAttributeValueUpdateManyWithoutAttributeInput
  productOption: ProductOptionUpdateManyWithoutAttributeInput
}

input ProductAttributeUpdateManyDataInput {
  _version: Int
  name: String
}

input ProductAttributeUpdateManyMutationInput {
  _version: Int
  name: String
}

input ProductAttributeUpdateManyWithoutValuesInput {
  create: [ProductAttributeCreateWithoutValuesInput!]
  connect: [ProductAttributeWhereUniqueInput!]
  set: [ProductAttributeWhereUniqueInput!]
  disconnect: [ProductAttributeWhereUniqueInput!]
  delete: [ProductAttributeWhereUniqueInput!]
  update: [ProductAttributeUpdateWithWhereUniqueWithoutValuesInput!]
  updateMany: [ProductAttributeUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductAttributeScalarWhereInput!]
  upsert: [ProductAttributeUpsertWithWhereUniqueWithoutValuesInput!]
}

input ProductAttributeUpdateManyWithWhereNestedInput {
  where: ProductAttributeScalarWhereInput!
  data: ProductAttributeUpdateManyDataInput!
}

input ProductAttributeUpdateOneRequiredWithoutProductOptionInput {
  create: ProductAttributeCreateWithoutProductOptionInput
  connect: ProductAttributeWhereUniqueInput
  update: ProductAttributeUpdateWithoutProductOptionDataInput
  upsert: ProductAttributeUpsertWithoutProductOptionInput
}

input ProductAttributeUpdateWithoutProductOptionDataInput {
  _version: Int
  name: String
  values: ProductAttributeValueUpdateManyWithoutAttributeInput
}

input ProductAttributeUpdateWithoutValuesDataInput {
  _version: Int
  name: String
  productOption: ProductOptionUpdateManyWithoutAttributeInput
}

input ProductAttributeUpdateWithWhereUniqueWithoutValuesInput {
  where: ProductAttributeWhereUniqueInput!
  data: ProductAttributeUpdateWithoutValuesDataInput!
}

input ProductAttributeUpsertWithoutProductOptionInput {
  update: ProductAttributeUpdateWithoutProductOptionDataInput!
  create: ProductAttributeCreateWithoutProductOptionInput!
}

input ProductAttributeUpsertWithWhereUniqueWithoutValuesInput {
  where: ProductAttributeWhereUniqueInput!
  update: ProductAttributeUpdateWithoutValuesDataInput!
  create: ProductAttributeCreateWithoutValuesInput!
}

type ProductAttributeValue implements Node {
  id: ID!
  _version: Int!
  attribute(where: ProductAttributeWhereInput, orderBy: ProductAttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductAttribute!]
  name: String
  productOption(where: ProductOptionWhereInput, orderBy: ProductOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductOption!]
>>>>>>> origin/retailer_implementation
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
<<<<<<< HEAD
type SecurityAnswerConnection {
=======
type ProductAttributeValueConnection {
>>>>>>> origin/retailer_implementation
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
<<<<<<< HEAD
  edges: [SecurityAnswerEdge]!
  aggregate: AggregateSecurityAnswer!
}

input SecurityAnswerCreateInput {
  id: ID
  _version: Int
  answer: String
  user: UserCreateOneWithoutSecurityAnswersInput
  securityQuestion: SecurityQuestionCreateOneWithoutSecurityAnswersInput
}

input SecurityAnswerCreateManyWithoutSecurityQuestionInput {
  create: [SecurityAnswerCreateWithoutSecurityQuestionInput!]
  connect: [SecurityAnswerWhereUniqueInput!]
}

input SecurityAnswerCreateManyWithoutUserInput {
  create: [SecurityAnswerCreateWithoutUserInput!]
  connect: [SecurityAnswerWhereUniqueInput!]
}

input SecurityAnswerCreateWithoutSecurityQuestionInput {
  id: ID
  _version: Int
  answer: String
  user: UserCreateOneWithoutSecurityAnswersInput
}

input SecurityAnswerCreateWithoutUserInput {
  id: ID
  _version: Int
  answer: String
  securityQuestion: SecurityQuestionCreateOneWithoutSecurityAnswersInput
}

"""An edge in a connection."""
type SecurityAnswerEdge {
  """The item at the end of the edge."""
  node: SecurityAnswer!
=======
  edges: [ProductAttributeValueEdge]!
  aggregate: AggregateProductAttributeValue!
}

input ProductAttributeValueCreateInput {
  id: ID
  _version: Int
  name: String
  attribute: ProductAttributeCreateManyWithoutValuesInput
  productOption: ProductOptionCreateManyWithoutValueInput
}

input ProductAttributeValueCreateManyWithoutAttributeInput {
  create: [ProductAttributeValueCreateWithoutAttributeInput!]
  connect: [ProductAttributeValueWhereUniqueInput!]
}

input ProductAttributeValueCreateOneWithoutProductOptionInput {
  create: ProductAttributeValueCreateWithoutProductOptionInput
  connect: ProductAttributeValueWhereUniqueInput
}

input ProductAttributeValueCreateWithoutAttributeInput {
  id: ID
  _version: Int
  name: String
  productOption: ProductOptionCreateManyWithoutValueInput
}

input ProductAttributeValueCreateWithoutProductOptionInput {
  id: ID
  _version: Int
  name: String
  attribute: ProductAttributeCreateManyWithoutValuesInput
}

"""An edge in a connection."""
type ProductAttributeValueEdge {
  """The item at the end of the edge."""
  node: ProductAttributeValue!
>>>>>>> origin/retailer_implementation

  """A cursor for use in pagination."""
  cursor: String!
}

<<<<<<< HEAD
enum SecurityAnswerOrderByInput {
=======
enum ProductAttributeValueOrderByInput {
>>>>>>> origin/retailer_implementation
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
<<<<<<< HEAD
  answer_ASC
  answer_DESC
=======
  name_ASC
  name_DESC
>>>>>>> origin/retailer_implementation
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

<<<<<<< HEAD
type SecurityAnswerPreviousValues {
  id: ID!
  _version: Int!
  answer: String
=======
type ProductAttributeValuePreviousValues {
  id: ID!
  _version: Int!
  name: String
>>>>>>> origin/retailer_implementation
  createdAt: DateTime!
  updatedAt: DateTime!
}

<<<<<<< HEAD
input SecurityAnswerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityAnswerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityAnswerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityAnswerScalarWhereInput!]
=======
input ProductAttributeValueScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeValueScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeValueScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeValueScalarWhereInput!]
>>>>>>> origin/retailer_implementation
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
<<<<<<< HEAD
  answer: String

  """All values that are not equal to given value."""
  answer_not: String

  """All values that are contained in given list."""
  answer_in: [String!]

  """All values that are not contained in given list."""
  answer_not_in: [String!]

  """All values less than the given value."""
  answer_lt: String

  """All values less than or equal the given value."""
  answer_lte: String

  """All values greater than the given value."""
  answer_gt: String

  """All values greater than or equal the given value."""
  answer_gte: String

  """All values containing the given string."""
  answer_contains: String

  """All values not containing the given string."""
  answer_not_contains: String

  """All values starting with the given string."""
  answer_starts_with: String

  """All values not starting with the given string."""
  answer_not_starts_with: String

  """All values ending with the given string."""
  answer_ends_with: String

  """All values not ending with the given string."""
  answer_not_ends_with: String
=======
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
>>>>>>> origin/retailer_implementation
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

<<<<<<< HEAD
type SecurityAnswerSubscriptionPayload {
  mutation: MutationType!
  node: SecurityAnswer
  updatedFields: [String!]
  previousValues: SecurityAnswerPreviousValues
}

input SecurityAnswerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityAnswerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityAnswerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityAnswerSubscriptionWhereInput!]
=======
type ProductAttributeValueSubscriptionPayload {
  mutation: MutationType!
  node: ProductAttributeValue
  updatedFields: [String!]
  previousValues: ProductAttributeValuePreviousValues
}

input ProductAttributeValueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeValueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeValueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeValueSubscriptionWhereInput!]
>>>>>>> origin/retailer_implementation

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
<<<<<<< HEAD
  node: SecurityAnswerWhereInput
}

input SecurityAnswerUpdateInput {
  _version: Int
  answer: String
  user: UserUpdateOneWithoutSecurityAnswersInput
  securityQuestion: SecurityQuestionUpdateOneWithoutSecurityAnswersInput
}

input SecurityAnswerUpdateManyDataInput {
  _version: Int
  answer: String
}

input SecurityAnswerUpdateManyMutationInput {
  _version: Int
  answer: String
}

input SecurityAnswerUpdateManyWithoutSecurityQuestionInput {
  create: [SecurityAnswerCreateWithoutSecurityQuestionInput!]
  connect: [SecurityAnswerWhereUniqueInput!]
  set: [SecurityAnswerWhereUniqueInput!]
  disconnect: [SecurityAnswerWhereUniqueInput!]
  delete: [SecurityAnswerWhereUniqueInput!]
  update: [SecurityAnswerUpdateWithWhereUniqueWithoutSecurityQuestionInput!]
  updateMany: [SecurityAnswerUpdateManyWithWhereNestedInput!]
  deleteMany: [SecurityAnswerScalarWhereInput!]
  upsert: [SecurityAnswerUpsertWithWhereUniqueWithoutSecurityQuestionInput!]
}

input SecurityAnswerUpdateManyWithoutUserInput {
  create: [SecurityAnswerCreateWithoutUserInput!]
  connect: [SecurityAnswerWhereUniqueInput!]
  set: [SecurityAnswerWhereUniqueInput!]
  disconnect: [SecurityAnswerWhereUniqueInput!]
  delete: [SecurityAnswerWhereUniqueInput!]
  update: [SecurityAnswerUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SecurityAnswerUpdateManyWithWhereNestedInput!]
  deleteMany: [SecurityAnswerScalarWhereInput!]
  upsert: [SecurityAnswerUpsertWithWhereUniqueWithoutUserInput!]
}

input SecurityAnswerUpdateManyWithWhereNestedInput {
  where: SecurityAnswerScalarWhereInput!
  data: SecurityAnswerUpdateManyDataInput!
}

input SecurityAnswerUpdateWithoutSecurityQuestionDataInput {
  _version: Int
  answer: String
  user: UserUpdateOneWithoutSecurityAnswersInput
}

input SecurityAnswerUpdateWithoutUserDataInput {
  _version: Int
  answer: String
  securityQuestion: SecurityQuestionUpdateOneWithoutSecurityAnswersInput
}

input SecurityAnswerUpdateWithWhereUniqueWithoutSecurityQuestionInput {
  where: SecurityAnswerWhereUniqueInput!
  data: SecurityAnswerUpdateWithoutSecurityQuestionDataInput!
}

input SecurityAnswerUpdateWithWhereUniqueWithoutUserInput {
  where: SecurityAnswerWhereUniqueInput!
  data: SecurityAnswerUpdateWithoutUserDataInput!
}

input SecurityAnswerUpsertWithWhereUniqueWithoutSecurityQuestionInput {
  where: SecurityAnswerWhereUniqueInput!
  update: SecurityAnswerUpdateWithoutSecurityQuestionDataInput!
  create: SecurityAnswerCreateWithoutSecurityQuestionInput!
}

input SecurityAnswerUpsertWithWhereUniqueWithoutUserInput {
  where: SecurityAnswerWhereUniqueInput!
  update: SecurityAnswerUpdateWithoutUserDataInput!
  create: SecurityAnswerCreateWithoutUserInput!
}

input SecurityAnswerWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityAnswerWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityAnswerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityAnswerWhereInput!]
=======
  node: ProductAttributeValueWhereInput
}

input ProductAttributeValueUpdateInput {
  _version: Int
  name: String
  attribute: ProductAttributeUpdateManyWithoutValuesInput
  productOption: ProductOptionUpdateManyWithoutValueInput
}

input ProductAttributeValueUpdateManyDataInput {
  _version: Int
  name: String
}

input ProductAttributeValueUpdateManyMutationInput {
  _version: Int
  name: String
}

input ProductAttributeValueUpdateManyWithoutAttributeInput {
  create: [ProductAttributeValueCreateWithoutAttributeInput!]
  connect: [ProductAttributeValueWhereUniqueInput!]
  set: [ProductAttributeValueWhereUniqueInput!]
  disconnect: [ProductAttributeValueWhereUniqueInput!]
  delete: [ProductAttributeValueWhereUniqueInput!]
  update: [ProductAttributeValueUpdateWithWhereUniqueWithoutAttributeInput!]
  updateMany: [ProductAttributeValueUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductAttributeValueScalarWhereInput!]
  upsert: [ProductAttributeValueUpsertWithWhereUniqueWithoutAttributeInput!]
}

input ProductAttributeValueUpdateManyWithWhereNestedInput {
  where: ProductAttributeValueScalarWhereInput!
  data: ProductAttributeValueUpdateManyDataInput!
}

input ProductAttributeValueUpdateOneRequiredWithoutProductOptionInput {
  create: ProductAttributeValueCreateWithoutProductOptionInput
  connect: ProductAttributeValueWhereUniqueInput
  update: ProductAttributeValueUpdateWithoutProductOptionDataInput
  upsert: ProductAttributeValueUpsertWithoutProductOptionInput
}

input ProductAttributeValueUpdateWithoutAttributeDataInput {
  _version: Int
  name: String
  productOption: ProductOptionUpdateManyWithoutValueInput
}

input ProductAttributeValueUpdateWithoutProductOptionDataInput {
  _version: Int
  name: String
  attribute: ProductAttributeUpdateManyWithoutValuesInput
}

input ProductAttributeValueUpdateWithWhereUniqueWithoutAttributeInput {
  where: ProductAttributeValueWhereUniqueInput!
  data: ProductAttributeValueUpdateWithoutAttributeDataInput!
}

input ProductAttributeValueUpsertWithoutProductOptionInput {
  update: ProductAttributeValueUpdateWithoutProductOptionDataInput!
  create: ProductAttributeValueCreateWithoutProductOptionInput!
}

input ProductAttributeValueUpsertWithWhereUniqueWithoutAttributeInput {
  where: ProductAttributeValueWhereUniqueInput!
  update: ProductAttributeValueUpdateWithoutAttributeDataInput!
  create: ProductAttributeValueCreateWithoutAttributeInput!
}

input ProductAttributeValueWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeValueWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeValueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeValueWhereInput!]
>>>>>>> origin/retailer_implementation
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
<<<<<<< HEAD
  answer: String

  """All values that are not equal to given value."""
  answer_not: String

  """All values that are contained in given list."""
  answer_in: [String!]

  """All values that are not contained in given list."""
  answer_not_in: [String!]

  """All values less than the given value."""
  answer_lt: String

  """All values less than or equal the given value."""
  answer_lte: String

  """All values greater than the given value."""
  answer_gt: String

  """All values greater than or equal the given value."""
  answer_gte: String

  """All values containing the given string."""
  answer_contains: String

  """All values not containing the given string."""
  answer_not_contains: String

  """All values starting with the given string."""
  answer_starts_with: String

  """All values not starting with the given string."""
  answer_not_starts_with: String

  """All values ending with the given string."""
  answer_ends_with: String

  """All values not ending with the given string."""
  answer_not_ends_with: String
=======
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
>>>>>>> origin/retailer_implementation
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  securityQuestion: SecurityQuestionWhereInput
}

input SecurityAnswerWhereUniqueInput {
  id: ID
}

type SecurityQuestion implements Node {
  id: ID!
  _version: Int!
  question: String
  securityAnswers(where: SecurityAnswerWhereInput, orderBy: SecurityAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SecurityAnswer!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SecurityQuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SecurityQuestionEdge]!
  aggregate: AggregateSecurityQuestion!
}

input SecurityQuestionCreateInput {
  id: ID
  _version: Int
  question: String
  securityAnswers: SecurityAnswerCreateManyWithoutSecurityQuestionInput
}

input SecurityQuestionCreateOneWithoutSecurityAnswersInput {
  create: SecurityQuestionCreateWithoutSecurityAnswersInput
  connect: SecurityQuestionWhereUniqueInput
}

input SecurityQuestionCreateWithoutSecurityAnswersInput {
  id: ID
  _version: Int
  question: String
}

"""An edge in a connection."""
type SecurityQuestionEdge {
  """The item at the end of the edge."""
  node: SecurityQuestion!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SecurityQuestionOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  question_ASC
  question_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SecurityQuestionPreviousValues {
  id: ID!
  _version: Int!
  question: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SecurityQuestionSubscriptionPayload {
  mutation: MutationType!
  node: SecurityQuestion
  updatedFields: [String!]
  previousValues: SecurityQuestionPreviousValues
}

input SecurityQuestionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityQuestionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityQuestionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityQuestionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SecurityQuestionWhereInput
}

input SecurityQuestionUpdateInput {
  _version: Int
  question: String
  securityAnswers: SecurityAnswerUpdateManyWithoutSecurityQuestionInput
}

input SecurityQuestionUpdateManyMutationInput {
  _version: Int
  question: String
}

input SecurityQuestionUpdateOneWithoutSecurityAnswersInput {
  create: SecurityQuestionCreateWithoutSecurityAnswersInput
  connect: SecurityQuestionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SecurityQuestionUpdateWithoutSecurityAnswersDataInput
  upsert: SecurityQuestionUpsertWithoutSecurityAnswersInput
}

<<<<<<< HEAD
input SecurityQuestionUpdateWithoutSecurityAnswersDataInput {
  _version: Int
  question: String
}

input SecurityQuestionUpsertWithoutSecurityAnswersInput {
  update: SecurityQuestionUpdateWithoutSecurityAnswersDataInput!
  create: SecurityQuestionCreateWithoutSecurityAnswersInput!
}

input SecurityQuestionWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityQuestionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityQuestionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityQuestionWhereInput!]
=======
  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  attribute_every: ProductAttributeWhereInput
  attribute_some: ProductAttributeWhereInput
  attribute_none: ProductAttributeWhereInput
  productOption_every: ProductOptionWhereInput
  productOption_some: ProductOptionWhereInput
  productOption_none: ProductOptionWhereInput
}

input ProductAttributeValueWhereUniqueInput {
  id: ID
  name: String
}

input ProductAttributeWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductAttributeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductAttributeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductAttributeWhereInput!]
>>>>>>> origin/retailer_implementation
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
<<<<<<< HEAD
  question: String

  """All values that are not equal to given value."""
  question_not: String

  """All values that are contained in given list."""
  question_in: [String!]

  """All values that are not contained in given list."""
  question_not_in: [String!]

  """All values less than the given value."""
  question_lt: String

  """All values less than or equal the given value."""
  question_lte: String

  """All values greater than the given value."""
  question_gt: String

  """All values greater than or equal the given value."""
  question_gte: String

  """All values containing the given string."""
  question_contains: String

  """All values not containing the given string."""
  question_not_contains: String

  """All values starting with the given string."""
  question_starts_with: String

  """All values not starting with the given string."""
  question_not_starts_with: String

  """All values ending with the given string."""
  question_ends_with: String

  """All values not ending with the given string."""
  question_not_ends_with: String
=======
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
>>>>>>> origin/retailer_implementation
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
<<<<<<< HEAD
  securityAnswers_every: SecurityAnswerWhereInput
  securityAnswers_some: SecurityAnswerWhereInput
  securityAnswers_none: SecurityAnswerWhereInput
}

input SecurityQuestionWhereUniqueInput {
=======
  values_every: ProductAttributeValueWhereInput
  values_some: ProductAttributeValueWhereInput
  values_none: ProductAttributeValueWhereInput
  productOption_every: ProductOptionWhereInput
  productOption_some: ProductOptionWhereInput
  productOption_none: ProductOptionWhereInput
}

input ProductAttributeWhereUniqueInput {
>>>>>>> origin/retailer_implementation
  id: ID
  name: String
}

<<<<<<< HEAD
type Subscription {
  securityQuestion(where: SecurityQuestionSubscriptionWhereInput): SecurityQuestionSubscriptionPayload
  securityAnswer(where: SecurityAnswerSubscriptionWhereInput): SecurityAnswerSubscriptionPayload
  assignment(where: AssignmentSubscriptionWhereInput): AssignmentSubscriptionPayload
  resolversClaim(where: ResolversClaimSubscriptionWhereInput): ResolversClaimSubscriptionPayload
  manufacturer(where: ManufacturerSubscriptionWhereInput): ManufacturerSubscriptionPayload
  brand(where: BrandSubscriptionWhereInput): BrandSubscriptionPayload
  productTemplate(where: ProductTemplateSubscriptionWhereInput): ProductTemplateSubscriptionPayload
  productAttribute(where: ProductAttributeSubscriptionWhereInput): ProductAttributeSubscriptionPayload
  productAttributeValue(where: ProductAttributeValueSubscriptionWhereInput): ProductAttributeValueSubscriptionPayload
  productRetailer(where: ProductRetailerSubscriptionWhereInput): ProductRetailerSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  supportCase(where: SupportCaseSubscriptionWhereInput): SupportCaseSubscriptionPayload
  supportCorrespondence(where: SupportCorrespondenceSubscriptionWhereInput): SupportCorrespondenceSubscriptionPayload
  language(where: LanguageSubscriptionWhereInput): LanguageSubscriptionPayload
  trans_Catalog(where: Trans_CatalogSubscriptionWhereInput): Trans_CatalogSubscriptionPayload
  trans_Brand(where: Trans_BrandSubscriptionWhereInput): Trans_BrandSubscriptionPayload
  productOption(where: ProductOptionSubscriptionWhereInput): ProductOptionSubscriptionPayload
  supportStatus(where: SupportStatusSubscriptionWhereInput): SupportStatusSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  supportCategory(where: SupportCategorySubscriptionWhereInput): SupportCategorySubscriptionPayload
  catalog(where: CatalogSubscriptionWhereInput): CatalogSubscriptionPayload
  permission(where: PermissionSubscriptionWhereInput): PermissionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  media(where: MediaSubscriptionWhereInput): MediaSubscriptionPayload
  retailer(where: RetailerSubscriptionWhereInput): RetailerSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  description(where: DescriptionSubscriptionWhereInput): DescriptionSubscriptionPayload
  supportSeverity(where: SupportSeveritySubscriptionWhereInput): SupportSeveritySubscriptionPayload
}

type SupportCase implements Node {
  id: ID!
  _version: Int!
  subject: String
  status: SupportStatus
  severity: SupportSeverity
  catergory: SupportCategory
  openByUser: User
  retailerId: String
  manufacturerId: String
  productId: String
  correspondence(where: SupportCorrespondenceWhereInput, orderBy: SupportCorrespondenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportCorrespondence!]
=======
"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  _version: Int
  sku: String
  productTemplate: ProductTemplateCreateOneWithoutProductsInput
  productMedias: MediaCreateManyInput
  productRetailers: ProductRetailerCreateManyWithoutProductInput
  options: ProductOptionCreateManyInput
}

input ProductCreateManyWithoutProductTemplateInput {
  create: [ProductCreateWithoutProductTemplateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutProductRetailersInput {
  create: ProductCreateWithoutProductRetailersInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutProductRetailersInput {
  id: ID
  _version: Int
  sku: String
  productTemplate: ProductTemplateCreateOneWithoutProductsInput
  productMedias: MediaCreateManyInput
  options: ProductOptionCreateManyInput
}

input ProductCreateWithoutProductTemplateInput {
  id: ID
  _version: Int
  sku: String
  productMedias: MediaCreateManyInput
  productRetailers: ProductRetailerCreateManyWithoutProductInput
  options: ProductOptionCreateManyInput
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

type ProductOption implements Node {
  id: ID!
  _version: Int!
  attribute: ProductAttribute!
  value: ProductAttributeValue!
>>>>>>> origin/retailer_implementation
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
<<<<<<< HEAD
type SupportCaseConnection {
=======
type ProductOptionConnection {
>>>>>>> origin/retailer_implementation
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
<<<<<<< HEAD
  edges: [SupportCaseEdge]!
  aggregate: AggregateSupportCase!
}

input SupportCaseCreateInput {
  id: ID
  _version: Int
  subject: String
  retailerId: String
  manufacturerId: String
  productId: String
  status: SupportStatusCreateOneInput
  severity: SupportSeverityCreateOneInput
  catergory: SupportCategoryCreateOneInput
  openByUser: UserCreateOneInput
  correspondence: SupportCorrespondenceCreateManyWithoutSupportCaseInput
}

input SupportCaseCreateOneWithoutCorrespondenceInput {
  create: SupportCaseCreateWithoutCorrespondenceInput
  connect: SupportCaseWhereUniqueInput
}

input SupportCaseCreateWithoutCorrespondenceInput {
  id: ID
  _version: Int
  subject: String
  retailerId: String
  manufacturerId: String
  productId: String
  status: SupportStatusCreateOneInput
  severity: SupportSeverityCreateOneInput
  catergory: SupportCategoryCreateOneInput
  openByUser: UserCreateOneInput
}

"""An edge in a connection."""
type SupportCaseEdge {
  """The item at the end of the edge."""
  node: SupportCase!
=======
  edges: [ProductOptionEdge]!
  aggregate: AggregateProductOption!
}

input ProductOptionCreateInput {
  id: ID
  _version: Int
  attribute: ProductAttributeCreateOneWithoutProductOptionInput!
  value: ProductAttributeValueCreateOneWithoutProductOptionInput!
}

input ProductOptionCreateManyInput {
  create: [ProductOptionCreateInput!]
  connect: [ProductOptionWhereUniqueInput!]
}

input ProductOptionCreateManyWithoutAttributeInput {
  create: [ProductOptionCreateWithoutAttributeInput!]
  connect: [ProductOptionWhereUniqueInput!]
}

input ProductOptionCreateManyWithoutValueInput {
  create: [ProductOptionCreateWithoutValueInput!]
  connect: [ProductOptionWhereUniqueInput!]
}

input ProductOptionCreateWithoutAttributeInput {
  id: ID
  _version: Int
  value: ProductAttributeValueCreateOneWithoutProductOptionInput!
}

input ProductOptionCreateWithoutValueInput {
  id: ID
  _version: Int
  attribute: ProductAttributeCreateOneWithoutProductOptionInput!
}

"""An edge in a connection."""
type ProductOptionEdge {
  """The item at the end of the edge."""
  node: ProductOption!
>>>>>>> origin/retailer_implementation

  """A cursor for use in pagination."""
  cursor: String!
}

<<<<<<< HEAD
enum SupportCaseOrderByInput {
=======
enum ProductOptionOrderByInput {
>>>>>>> origin/retailer_implementation
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
<<<<<<< HEAD
  subject_ASC
  subject_DESC
  retailerId_ASC
  retailerId_DESC
  manufacturerId_ASC
  manufacturerId_DESC
  productId_ASC
  productId_DESC
=======
>>>>>>> origin/retailer_implementation
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

<<<<<<< HEAD
type SupportCasePreviousValues {
  id: ID!
  _version: Int!
  subject: String
  retailerId: String
  manufacturerId: String
  productId: String
=======
type ProductOptionPreviousValues {
  id: ID!
  _version: Int!
>>>>>>> origin/retailer_implementation
  createdAt: DateTime!
  updatedAt: DateTime!
}

<<<<<<< HEAD
type SupportCaseSubscriptionPayload {
  mutation: MutationType!
  node: SupportCase
  updatedFields: [String!]
  previousValues: SupportCasePreviousValues
}

input SupportCaseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportCaseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportCaseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportCaseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SupportCaseWhereInput
}

input SupportCaseUpdateInput {
  _version: Int
  subject: String
  retailerId: String
  manufacturerId: String
  productId: String
  status: SupportStatusUpdateOneInput
  severity: SupportSeverityUpdateOneInput
  catergory: SupportCategoryUpdateOneInput
  openByUser: UserUpdateOneInput
  correspondence: SupportCorrespondenceUpdateManyWithoutSupportCaseInput
}

input SupportCaseUpdateManyMutationInput {
  _version: Int
  subject: String
  retailerId: String
  manufacturerId: String
  productId: String
}

input SupportCaseUpdateOneWithoutCorrespondenceInput {
  create: SupportCaseCreateWithoutCorrespondenceInput
  connect: SupportCaseWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SupportCaseUpdateWithoutCorrespondenceDataInput
  upsert: SupportCaseUpsertWithoutCorrespondenceInput
}

input SupportCaseUpdateWithoutCorrespondenceDataInput {
  _version: Int
  subject: String
  retailerId: String
  manufacturerId: String
  productId: String
  status: SupportStatusUpdateOneInput
  severity: SupportSeverityUpdateOneInput
  catergory: SupportCategoryUpdateOneInput
  openByUser: UserUpdateOneInput
}

input SupportCaseUpsertWithoutCorrespondenceInput {
  update: SupportCaseUpdateWithoutCorrespondenceDataInput!
  create: SupportCaseCreateWithoutCorrespondenceInput!
}

input SupportCaseWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportCaseWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportCaseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportCaseWhereInput!]
=======
input ProductOptionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductOptionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductOptionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductOptionScalarWhereInput!]
>>>>>>> origin/retailer_implementation
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
<<<<<<< HEAD
  subject: String

  """All values that are not equal to given value."""
  subject_not: String

  """All values that are contained in given list."""
  subject_in: [String!]

  """All values that are not contained in given list."""
  subject_not_in: [String!]

  """All values less than the given value."""
  subject_lt: String

  """All values less than or equal the given value."""
  subject_lte: String

  """All values greater than the given value."""
  subject_gt: String

  """All values greater than or equal the given value."""
  subject_gte: String

  """All values containing the given string."""
  subject_contains: String

  """All values not containing the given string."""
  subject_not_contains: String

  """All values starting with the given string."""
  subject_starts_with: String

  """All values not starting with the given string."""
  subject_not_starts_with: String

  """All values ending with the given string."""
  subject_ends_with: String

  """All values not ending with the given string."""
  subject_not_ends_with: String
  retailerId: String

  """All values that are not equal to given value."""
  retailerId_not: String

  """All values that are contained in given list."""
  retailerId_in: [String!]

  """All values that are not contained in given list."""
  retailerId_not_in: [String!]

  """All values less than the given value."""
  retailerId_lt: String

  """All values less than or equal the given value."""
  retailerId_lte: String

  """All values greater than the given value."""
  retailerId_gt: String

  """All values greater than or equal the given value."""
  retailerId_gte: String

  """All values containing the given string."""
  retailerId_contains: String

  """All values not containing the given string."""
  retailerId_not_contains: String

  """All values starting with the given string."""
  retailerId_starts_with: String

  """All values not starting with the given string."""
  retailerId_not_starts_with: String

  """All values ending with the given string."""
  retailerId_ends_with: String

  """All values not ending with the given string."""
  retailerId_not_ends_with: String
  manufacturerId: String

  """All values that are not equal to given value."""
  manufacturerId_not: String

  """All values that are contained in given list."""
  manufacturerId_in: [String!]

  """All values that are not contained in given list."""
  manufacturerId_not_in: [String!]

  """All values less than the given value."""
  manufacturerId_lt: String

  """All values less than or equal the given value."""
  manufacturerId_lte: String

  """All values greater than the given value."""
  manufacturerId_gt: String

  """All values greater than or equal the given value."""
  manufacturerId_gte: String

  """All values containing the given string."""
  manufacturerId_contains: String

  """All values not containing the given string."""
  manufacturerId_not_contains: String

  """All values starting with the given string."""
  manufacturerId_starts_with: String

  """All values not starting with the given string."""
  manufacturerId_not_starts_with: String

  """All values ending with the given string."""
  manufacturerId_ends_with: String

  """All values not ending with the given string."""
  manufacturerId_not_ends_with: String
  productId: String

  """All values that are not equal to given value."""
  productId_not: String

  """All values that are contained in given list."""
  productId_in: [String!]

  """All values that are not contained in given list."""
  productId_not_in: [String!]

  """All values less than the given value."""
  productId_lt: String

  """All values less than or equal the given value."""
  productId_lte: String

  """All values greater than the given value."""
  productId_gt: String

  """All values greater than or equal the given value."""
  productId_gte: String

  """All values containing the given string."""
  productId_contains: String

  """All values not containing the given string."""
  productId_not_contains: String

  """All values starting with the given string."""
  productId_starts_with: String

  """All values not starting with the given string."""
  productId_not_starts_with: String

  """All values ending with the given string."""
  productId_ends_with: String

  """All values not ending with the given string."""
  productId_not_ends_with: String
=======
>>>>>>> origin/retailer_implementation
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  status: SupportStatusWhereInput
  severity: SupportSeverityWhereInput
  catergory: SupportCategoryWhereInput
  openByUser: UserWhereInput
  correspondence_every: SupportCorrespondenceWhereInput
  correspondence_some: SupportCorrespondenceWhereInput
  correspondence_none: SupportCorrespondenceWhereInput
}

<<<<<<< HEAD
input SupportCaseWhereUniqueInput {
  id: ID
}

type SupportCategory implements Node {
  id: ID!
  _version: Int!
  name: String
  parentId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SupportCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SupportCategoryEdge]!
  aggregate: AggregateSupportCategory!
}

input SupportCategoryCreateInput {
  id: ID
  _version: Int
  name: String
  parentId: String
}

input SupportCategoryCreateOneInput {
  create: SupportCategoryCreateInput
  connect: SupportCategoryWhereUniqueInput
}

"""An edge in a connection."""
type SupportCategoryEdge {
  """The item at the end of the edge."""
  node: SupportCategory!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SupportCategoryOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  parentId_ASC
  parentId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SupportCategoryPreviousValues {
  id: ID!
  _version: Int!
  name: String
  parentId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SupportCategorySubscriptionPayload {
  mutation: MutationType!
  node: SupportCategory
  updatedFields: [String!]
  previousValues: SupportCategoryPreviousValues
}

input SupportCategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportCategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportCategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportCategorySubscriptionWhereInput!]
=======
type ProductOptionSubscriptionPayload {
  mutation: MutationType!
  node: ProductOption
  updatedFields: [String!]
  previousValues: ProductOptionPreviousValues
}

input ProductOptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductOptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductOptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductOptionSubscriptionWhereInput!]
>>>>>>> origin/retailer_implementation

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
<<<<<<< HEAD
  node: SupportCategoryWhereInput
}

input SupportCategoryUpdateDataInput {
  _version: Int
  name: String
  parentId: String
}

input SupportCategoryUpdateInput {
  _version: Int
  name: String
  parentId: String
}

input SupportCategoryUpdateManyMutationInput {
  _version: Int
  name: String
  parentId: String
}

input SupportCategoryUpdateOneInput {
  create: SupportCategoryCreateInput
  connect: SupportCategoryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SupportCategoryUpdateDataInput
  upsert: SupportCategoryUpsertNestedInput
}

input SupportCategoryUpsertNestedInput {
  update: SupportCategoryUpdateDataInput!
  create: SupportCategoryCreateInput!
}

input SupportCategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportCategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportCategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportCategoryWhereInput!]
=======
  node: ProductOptionWhereInput
}

input ProductOptionUpdateDataInput {
  _version: Int
  attribute: ProductAttributeUpdateOneRequiredWithoutProductOptionInput
  value: ProductAttributeValueUpdateOneRequiredWithoutProductOptionInput
}

input ProductOptionUpdateInput {
  _version: Int
  attribute: ProductAttributeUpdateOneRequiredWithoutProductOptionInput
  value: ProductAttributeValueUpdateOneRequiredWithoutProductOptionInput
}

input ProductOptionUpdateManyDataInput {
  _version: Int
}

input ProductOptionUpdateManyInput {
  create: [ProductOptionCreateInput!]
  connect: [ProductOptionWhereUniqueInput!]
  set: [ProductOptionWhereUniqueInput!]
  disconnect: [ProductOptionWhereUniqueInput!]
  delete: [ProductOptionWhereUniqueInput!]
  update: [ProductOptionUpdateWithWhereUniqueNestedInput!]
  updateMany: [ProductOptionUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductOptionScalarWhereInput!]
  upsert: [ProductOptionUpsertWithWhereUniqueNestedInput!]
}

input ProductOptionUpdateManyMutationInput {
  _version: Int
}

input ProductOptionUpdateManyWithoutAttributeInput {
  create: [ProductOptionCreateWithoutAttributeInput!]
  connect: [ProductOptionWhereUniqueInput!]
  set: [ProductOptionWhereUniqueInput!]
  disconnect: [ProductOptionWhereUniqueInput!]
  delete: [ProductOptionWhereUniqueInput!]
  update: [ProductOptionUpdateWithWhereUniqueWithoutAttributeInput!]
  updateMany: [ProductOptionUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductOptionScalarWhereInput!]
  upsert: [ProductOptionUpsertWithWhereUniqueWithoutAttributeInput!]
}

input ProductOptionUpdateManyWithoutValueInput {
  create: [ProductOptionCreateWithoutValueInput!]
  connect: [ProductOptionWhereUniqueInput!]
  set: [ProductOptionWhereUniqueInput!]
  disconnect: [ProductOptionWhereUniqueInput!]
  delete: [ProductOptionWhereUniqueInput!]
  update: [ProductOptionUpdateWithWhereUniqueWithoutValueInput!]
  updateMany: [ProductOptionUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductOptionScalarWhereInput!]
  upsert: [ProductOptionUpsertWithWhereUniqueWithoutValueInput!]
}

input ProductOptionUpdateManyWithWhereNestedInput {
  where: ProductOptionScalarWhereInput!
  data: ProductOptionUpdateManyDataInput!
}

input ProductOptionUpdateWithoutAttributeDataInput {
  _version: Int
  value: ProductAttributeValueUpdateOneRequiredWithoutProductOptionInput
}

input ProductOptionUpdateWithoutValueDataInput {
  _version: Int
  attribute: ProductAttributeUpdateOneRequiredWithoutProductOptionInput
}

input ProductOptionUpdateWithWhereUniqueNestedInput {
  where: ProductOptionWhereUniqueInput!
  data: ProductOptionUpdateDataInput!
}

input ProductOptionUpdateWithWhereUniqueWithoutAttributeInput {
  where: ProductOptionWhereUniqueInput!
  data: ProductOptionUpdateWithoutAttributeDataInput!
}

input ProductOptionUpdateWithWhereUniqueWithoutValueInput {
  where: ProductOptionWhereUniqueInput!
  data: ProductOptionUpdateWithoutValueDataInput!
}

input ProductOptionUpsertWithWhereUniqueNestedInput {
  where: ProductOptionWhereUniqueInput!
  update: ProductOptionUpdateDataInput!
  create: ProductOptionCreateInput!
}

input ProductOptionUpsertWithWhereUniqueWithoutAttributeInput {
  where: ProductOptionWhereUniqueInput!
  update: ProductOptionUpdateWithoutAttributeDataInput!
  create: ProductOptionCreateWithoutAttributeInput!
}

input ProductOptionUpsertWithWhereUniqueWithoutValueInput {
  where: ProductOptionWhereUniqueInput!
  update: ProductOptionUpdateWithoutValueDataInput!
  create: ProductOptionCreateWithoutValueInput!
}

input ProductOptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductOptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductOptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductOptionWhereInput!]
>>>>>>> origin/retailer_implementation
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
<<<<<<< HEAD
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  parentId: String

  """All values that are not equal to given value."""
  parentId_not: String

  """All values that are contained in given list."""
  parentId_in: [String!]

  """All values that are not contained in given list."""
  parentId_not_in: [String!]

  """All values less than the given value."""
  parentId_lt: String

  """All values less than or equal the given value."""
  parentId_lte: String

  """All values greater than the given value."""
  parentId_gt: String

  """All values greater than or equal the given value."""
  parentId_gte: String

  """All values containing the given string."""
  parentId_contains: String

  """All values not containing the given string."""
  parentId_not_contains: String

  """All values starting with the given string."""
  parentId_starts_with: String

  """All values not starting with the given string."""
  parentId_not_starts_with: String

  """All values ending with the given string."""
  parentId_ends_with: String

  """All values not ending with the given string."""
  parentId_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
=======
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
>>>>>>> origin/retailer_implementation
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
<<<<<<< HEAD
}

input SupportCategoryWhereUniqueInput {
  id: ID
  name: String
}

type SupportCorrespondence implements Node {
  id: ID!
  _version: Int!
  supportCase: SupportCase
  respondedBy: User
  note: String
  data: Json
=======
  attribute: ProductAttributeWhereInput
  value: ProductAttributeValueWhereInput
}

input ProductOptionWhereUniqueInput {
  id: ID
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  sku_ASC
  sku_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  _version: Int!
  sku: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductRetailer implements Node {
  id: ID!
  _version: Int!
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  productMedias(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  product: Product
  retailer: Retailer
  rating: Int
  enabled: Boolean
  approved: Boolean
>>>>>>> origin/retailer_implementation
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
<<<<<<< HEAD
type SupportCorrespondenceConnection {
=======
type ProductRetailerConnection {
>>>>>>> origin/retailer_implementation
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
<<<<<<< HEAD
  edges: [SupportCorrespondenceEdge]!
  aggregate: AggregateSupportCorrespondence!
}

input SupportCorrespondenceCreateInput {
  id: ID
  _version: Int
  note: String
  data: Json
  supportCase: SupportCaseCreateOneWithoutCorrespondenceInput
  respondedBy: UserCreateOneInput
}

input SupportCorrespondenceCreateManyWithoutSupportCaseInput {
  create: [SupportCorrespondenceCreateWithoutSupportCaseInput!]
  connect: [SupportCorrespondenceWhereUniqueInput!]
}

input SupportCorrespondenceCreateWithoutSupportCaseInput {
  id: ID
  _version: Int
  note: String
  data: Json
  respondedBy: UserCreateOneInput
}

"""An edge in a connection."""
type SupportCorrespondenceEdge {
  """The item at the end of the edge."""
  node: SupportCorrespondence!
=======
  edges: [ProductRetailerEdge]!
  aggregate: AggregateProductRetailer!
}

input ProductRetailerCreateInput {
  id: ID
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaCreateManyInput
  product: ProductCreateOneWithoutProductRetailersInput
  retailer: RetailerCreateOneWithoutProductsInput
}

input ProductRetailerCreateManyWithoutProductInput {
  create: [ProductRetailerCreateWithoutProductInput!]
  connect: [ProductRetailerWhereUniqueInput!]
}

input ProductRetailerCreateManyWithoutRetailerInput {
  create: [ProductRetailerCreateWithoutRetailerInput!]
  connect: [ProductRetailerWhereUniqueInput!]
}

input ProductRetailerCreateWithoutProductInput {
  id: ID
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaCreateManyInput
  retailer: RetailerCreateOneWithoutProductsInput
}

input ProductRetailerCreateWithoutRetailerInput {
  id: ID
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaCreateManyInput
  product: ProductCreateOneWithoutProductRetailersInput
}

"""An edge in a connection."""
type ProductRetailerEdge {
  """The item at the end of the edge."""
  node: ProductRetailer!
>>>>>>> origin/retailer_implementation

  """A cursor for use in pagination."""
  cursor: String!
}

<<<<<<< HEAD
enum SupportCorrespondenceOrderByInput {
=======
enum ProductRetailerOrderByInput {
>>>>>>> origin/retailer_implementation
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
<<<<<<< HEAD
  note_ASC
  note_DESC
  data_ASC
  data_DESC
=======
  productName_ASC
  productName_DESC
  listPrice_ASC
  listPrice_DESC
  sellPrice_ASC
  sellPrice_DESC
  stockQuantity_ASC
  stockQuantity_DESC
  inStock_ASC
  inStock_DESC
  rating_ASC
  rating_DESC
  enabled_ASC
  enabled_DESC
  approved_ASC
  approved_DESC
>>>>>>> origin/retailer_implementation
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

<<<<<<< HEAD
type SupportCorrespondencePreviousValues {
  id: ID!
  _version: Int!
  note: String
  data: Json
=======
type ProductRetailerPreviousValues {
  id: ID!
  _version: Int!
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
>>>>>>> origin/retailer_implementation
  createdAt: DateTime!
  updatedAt: DateTime!
}

<<<<<<< HEAD
input SupportCorrespondenceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportCorrespondenceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportCorrespondenceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportCorrespondenceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
=======
input ProductRetailerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductRetailerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductRetailerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductRetailerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  productName: String

  """All values that are not equal to given value."""
  productName_not: String

  """All values that are contained in given list."""
  productName_in: [String!]

  """All values that are not contained in given list."""
  productName_not_in: [String!]

  """All values less than the given value."""
  productName_lt: String

  """All values less than or equal the given value."""
  productName_lte: String

  """All values greater than the given value."""
  productName_gt: String

  """All values greater than or equal the given value."""
  productName_gte: String

  """All values containing the given string."""
  productName_contains: String

  """All values not containing the given string."""
  productName_not_contains: String

  """All values starting with the given string."""
  productName_starts_with: String

  """All values not starting with the given string."""
  productName_not_starts_with: String

  """All values ending with the given string."""
  productName_ends_with: String

  """All values not ending with the given string."""
  productName_not_ends_with: String
  listPrice: Int

  """All values that are not equal to given value."""
  listPrice_not: Int

  """All values that are contained in given list."""
  listPrice_in: [Int!]

  """All values that are not contained in given list."""
  listPrice_not_in: [Int!]

  """All values less than the given value."""
  listPrice_lt: Int

  """All values less than or equal the given value."""
  listPrice_lte: Int

  """All values greater than the given value."""
  listPrice_gt: Int

  """All values greater than or equal the given value."""
  listPrice_gte: Int
  sellPrice: Int

  """All values that are not equal to given value."""
  sellPrice_not: Int

  """All values that are contained in given list."""
  sellPrice_in: [Int!]

  """All values that are not contained in given list."""
  sellPrice_not_in: [Int!]

  """All values less than the given value."""
  sellPrice_lt: Int

  """All values less than or equal the given value."""
  sellPrice_lte: Int

  """All values greater than the given value."""
  sellPrice_gt: Int

  """All values greater than or equal the given value."""
  sellPrice_gte: Int
  stockQuantity: Int

  """All values that are not equal to given value."""
  stockQuantity_not: Int

  """All values that are contained in given list."""
  stockQuantity_in: [Int!]

  """All values that are not contained in given list."""
  stockQuantity_not_in: [Int!]

  """All values less than the given value."""
  stockQuantity_lt: Int

  """All values less than or equal the given value."""
  stockQuantity_lte: Int

  """All values greater than the given value."""
  stockQuantity_gt: Int

  """All values greater than or equal the given value."""
  stockQuantity_gte: Int
  inStock: Boolean

  """All values that are not equal to given value."""
  inStock_not: Boolean
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
>>>>>>> origin/retailer_implementation
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

<<<<<<< HEAD
type SupportCorrespondenceSubscriptionPayload {
  mutation: MutationType!
  node: SupportCorrespondence
  updatedFields: [String!]
  previousValues: SupportCorrespondencePreviousValues
}

input SupportCorrespondenceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportCorrespondenceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportCorrespondenceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportCorrespondenceSubscriptionWhereInput!]
=======
type ProductRetailerSubscriptionPayload {
  mutation: MutationType!
  node: ProductRetailer
  updatedFields: [String!]
  previousValues: ProductRetailerPreviousValues
}

input ProductRetailerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductRetailerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductRetailerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductRetailerSubscriptionWhereInput!]
>>>>>>> origin/retailer_implementation

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
<<<<<<< HEAD
  node: SupportCorrespondenceWhereInput
}

input SupportCorrespondenceUpdateInput {
  _version: Int
  note: String
  data: Json
  supportCase: SupportCaseUpdateOneWithoutCorrespondenceInput
  respondedBy: UserUpdateOneInput
}

input SupportCorrespondenceUpdateManyDataInput {
  _version: Int
  note: String
  data: Json
}

input SupportCorrespondenceUpdateManyMutationInput {
  _version: Int
  note: String
  data: Json
}

input SupportCorrespondenceUpdateManyWithoutSupportCaseInput {
  create: [SupportCorrespondenceCreateWithoutSupportCaseInput!]
  connect: [SupportCorrespondenceWhereUniqueInput!]
  set: [SupportCorrespondenceWhereUniqueInput!]
  disconnect: [SupportCorrespondenceWhereUniqueInput!]
  delete: [SupportCorrespondenceWhereUniqueInput!]
  update: [SupportCorrespondenceUpdateWithWhereUniqueWithoutSupportCaseInput!]
  updateMany: [SupportCorrespondenceUpdateManyWithWhereNestedInput!]
  deleteMany: [SupportCorrespondenceScalarWhereInput!]
  upsert: [SupportCorrespondenceUpsertWithWhereUniqueWithoutSupportCaseInput!]
}

input SupportCorrespondenceUpdateManyWithWhereNestedInput {
  where: SupportCorrespondenceScalarWhereInput!
  data: SupportCorrespondenceUpdateManyDataInput!
}

input SupportCorrespondenceUpdateWithoutSupportCaseDataInput {
  _version: Int
  note: String
  data: Json
  respondedBy: UserUpdateOneInput
}

input SupportCorrespondenceUpdateWithWhereUniqueWithoutSupportCaseInput {
  where: SupportCorrespondenceWhereUniqueInput!
  data: SupportCorrespondenceUpdateWithoutSupportCaseDataInput!
}

input SupportCorrespondenceUpsertWithWhereUniqueWithoutSupportCaseInput {
  where: SupportCorrespondenceWhereUniqueInput!
  update: SupportCorrespondenceUpdateWithoutSupportCaseDataInput!
  create: SupportCorrespondenceCreateWithoutSupportCaseInput!
}

input SupportCorrespondenceWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportCorrespondenceWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportCorrespondenceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportCorrespondenceWhereInput!]
=======
  node: ProductRetailerWhereInput
}

input ProductRetailerUpdateInput {
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaUpdateManyInput
  product: ProductUpdateOneWithoutProductRetailersInput
  retailer: RetailerUpdateOneWithoutProductsInput
}

input ProductRetailerUpdateManyDataInput {
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
}

input ProductRetailerUpdateManyMutationInput {
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
}

input ProductRetailerUpdateManyWithoutProductInput {
  create: [ProductRetailerCreateWithoutProductInput!]
  connect: [ProductRetailerWhereUniqueInput!]
  set: [ProductRetailerWhereUniqueInput!]
  disconnect: [ProductRetailerWhereUniqueInput!]
  delete: [ProductRetailerWhereUniqueInput!]
  update: [ProductRetailerUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ProductRetailerUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductRetailerScalarWhereInput!]
  upsert: [ProductRetailerUpsertWithWhereUniqueWithoutProductInput!]
}

input ProductRetailerUpdateManyWithoutRetailerInput {
  create: [ProductRetailerCreateWithoutRetailerInput!]
  connect: [ProductRetailerWhereUniqueInput!]
  set: [ProductRetailerWhereUniqueInput!]
  disconnect: [ProductRetailerWhereUniqueInput!]
  delete: [ProductRetailerWhereUniqueInput!]
  update: [ProductRetailerUpdateWithWhereUniqueWithoutRetailerInput!]
  updateMany: [ProductRetailerUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductRetailerScalarWhereInput!]
  upsert: [ProductRetailerUpsertWithWhereUniqueWithoutRetailerInput!]
}

input ProductRetailerUpdateManyWithWhereNestedInput {
  where: ProductRetailerScalarWhereInput!
  data: ProductRetailerUpdateManyDataInput!
}

input ProductRetailerUpdateWithoutProductDataInput {
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaUpdateManyInput
  retailer: RetailerUpdateOneWithoutProductsInput
}

input ProductRetailerUpdateWithoutRetailerDataInput {
  _version: Int
  productName: String
  listPrice: Int
  sellPrice: Int
  stockQuantity: Int
  inStock: Boolean
  rating: Int
  enabled: Boolean
  approved: Boolean
  productMedias: MediaUpdateManyInput
  product: ProductUpdateOneWithoutProductRetailersInput
}

input ProductRetailerUpdateWithWhereUniqueWithoutProductInput {
  where: ProductRetailerWhereUniqueInput!
  data: ProductRetailerUpdateWithoutProductDataInput!
}

input ProductRetailerUpdateWithWhereUniqueWithoutRetailerInput {
  where: ProductRetailerWhereUniqueInput!
  data: ProductRetailerUpdateWithoutRetailerDataInput!
}

input ProductRetailerUpsertWithWhereUniqueWithoutProductInput {
  where: ProductRetailerWhereUniqueInput!
  update: ProductRetailerUpdateWithoutProductDataInput!
  create: ProductRetailerCreateWithoutProductInput!
}

input ProductRetailerUpsertWithWhereUniqueWithoutRetailerInput {
  where: ProductRetailerWhereUniqueInput!
  update: ProductRetailerUpdateWithoutRetailerDataInput!
  create: ProductRetailerCreateWithoutRetailerInput!
}

input ProductRetailerWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductRetailerWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductRetailerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductRetailerWhereInput!]
>>>>>>> origin/retailer_implementation
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID
<<<<<<< HEAD

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
=======

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  productName: String

  """All values that are not equal to given value."""
  productName_not: String

  """All values that are contained in given list."""
  productName_in: [String!]

  """All values that are not contained in given list."""
  productName_not_in: [String!]

  """All values less than the given value."""
  productName_lt: String

  """All values less than or equal the given value."""
  productName_lte: String

  """All values greater than the given value."""
  productName_gt: String

  """All values greater than or equal the given value."""
  productName_gte: String

  """All values containing the given string."""
  productName_contains: String

  """All values not containing the given string."""
  productName_not_contains: String

  """All values starting with the given string."""
  productName_starts_with: String

  """All values not starting with the given string."""
  productName_not_starts_with: String

  """All values ending with the given string."""
  productName_ends_with: String

  """All values not ending with the given string."""
  productName_not_ends_with: String
  listPrice: Int

  """All values that are not equal to given value."""
  listPrice_not: Int

  """All values that are contained in given list."""
  listPrice_in: [Int!]

  """All values that are not contained in given list."""
  listPrice_not_in: [Int!]

  """All values less than the given value."""
  listPrice_lt: Int

  """All values less than or equal the given value."""
  listPrice_lte: Int

  """All values greater than the given value."""
  listPrice_gt: Int

  """All values greater than or equal the given value."""
  listPrice_gte: Int
  sellPrice: Int

  """All values that are not equal to given value."""
  sellPrice_not: Int

  """All values that are contained in given list."""
  sellPrice_in: [Int!]

  """All values that are not contained in given list."""
  sellPrice_not_in: [Int!]

  """All values less than the given value."""
  sellPrice_lt: Int

  """All values less than or equal the given value."""
  sellPrice_lte: Int

  """All values greater than the given value."""
  sellPrice_gt: Int

  """All values greater than or equal the given value."""
  sellPrice_gte: Int
  stockQuantity: Int

  """All values that are not equal to given value."""
  stockQuantity_not: Int

  """All values that are contained in given list."""
  stockQuantity_in: [Int!]

  """All values that are not contained in given list."""
  stockQuantity_not_in: [Int!]

  """All values less than the given value."""
  stockQuantity_lt: Int

  """All values less than or equal the given value."""
  stockQuantity_lte: Int

  """All values greater than the given value."""
  stockQuantity_gt: Int

  """All values greater than or equal the given value."""
  stockQuantity_gte: Int
  inStock: Boolean

  """All values that are not equal to given value."""
  inStock_not: Boolean
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
>>>>>>> origin/retailer_implementation
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
<<<<<<< HEAD
  supportCase: SupportCaseWhereInput
  respondedBy: UserWhereInput
}

input SupportCorrespondenceWhereUniqueInput {
  id: ID
}

type SupportSeverity implements Node {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SupportSeverityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SupportSeverityEdge]!
  aggregate: AggregateSupportSeverity!
}

input SupportSeverityCreateInput {
  id: ID
  _version: Int
  name: String
}

input SupportSeverityCreateOneInput {
  create: SupportSeverityCreateInput
  connect: SupportSeverityWhereUniqueInput
}

"""An edge in a connection."""
type SupportSeverityEdge {
  """The item at the end of the edge."""
  node: SupportSeverity!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SupportSeverityOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SupportSeverityPreviousValues {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SupportSeveritySubscriptionPayload {
  mutation: MutationType!
  node: SupportSeverity
  updatedFields: [String!]
  previousValues: SupportSeverityPreviousValues
}

input SupportSeveritySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportSeveritySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportSeveritySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportSeveritySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SupportSeverityWhereInput
}

input SupportSeverityUpdateDataInput {
  _version: Int
  name: String
}

input SupportSeverityUpdateInput {
  _version: Int
  name: String
}

input SupportSeverityUpdateManyMutationInput {
  _version: Int
  name: String
}

input SupportSeverityUpdateOneInput {
  create: SupportSeverityCreateInput
  connect: SupportSeverityWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SupportSeverityUpdateDataInput
  upsert: SupportSeverityUpsertNestedInput
}

input SupportSeverityUpsertNestedInput {
  update: SupportSeverityUpdateDataInput!
  create: SupportSeverityCreateInput!
}

input SupportSeverityWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportSeverityWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportSeverityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportSeverityWhereInput!]
=======
  productMedias_every: MediaWhereInput
  productMedias_some: MediaWhereInput
  productMedias_none: MediaWhereInput
  product: ProductWhereInput
  retailer: RetailerWhereInput
}

input ProductRetailerWhereUniqueInput {
  id: ID
  productName: String
}

input ProductScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductScalarWhereInput!]
>>>>>>> origin/retailer_implementation
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  sku: String

  """All values that are not equal to given value."""
  sku_not: String

  """All values that are contained in given list."""
  sku_in: [String!]

  """All values that are not contained in given list."""
  sku_not_in: [String!]

  """All values less than the given value."""
  sku_lt: String

  """All values less than or equal the given value."""
  sku_lte: String

  """All values greater than the given value."""
  sku_gt: String

  """All values greater than or equal the given value."""
  sku_gte: String

  """All values containing the given string."""
  sku_contains: String

  """All values not containing the given string."""
  sku_not_contains: String

  """All values starting with the given string."""
  sku_starts_with: String

  """All values not starting with the given string."""
  sku_not_starts_with: String

  """All values ending with the given string."""
  sku_ends_with: String

  """All values not ending with the given string."""
<<<<<<< HEAD
  name_not_ends_with: String
=======
  sku_not_ends_with: String
>>>>>>> origin/retailer_implementation
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input SupportSeverityWhereUniqueInput {
  id: ID
  name: String
}

type SupportStatus implements Node {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SupportStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SupportStatusEdge]!
  aggregate: AggregateSupportStatus!
}

input SupportStatusCreateInput {
  id: ID
  _version: Int
  name: String
}

input SupportStatusCreateOneInput {
  create: SupportStatusCreateInput
  connect: SupportStatusWhereUniqueInput
}

"""An edge in a connection."""
type SupportStatusEdge {
  """The item at the end of the edge."""
  node: SupportStatus!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SupportStatusOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

<<<<<<< HEAD
type SupportStatusPreviousValues {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SupportStatusSubscriptionPayload {
  mutation: MutationType!
  node: SupportStatus
  updatedFields: [String!]
  previousValues: SupportStatusPreviousValues
}

input SupportStatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportStatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportStatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportStatusSubscriptionWhereInput!]
=======
type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]
>>>>>>> origin/retailer_implementation

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
<<<<<<< HEAD
  node: SupportStatusWhereInput
}

input SupportStatusUpdateDataInput {
  _version: Int
  name: String
}

input SupportStatusUpdateInput {
  _version: Int
  name: String
}

input SupportStatusUpdateManyMutationInput {
  _version: Int
  name: String
}

input SupportStatusUpdateOneInput {
  create: SupportStatusCreateInput
  connect: SupportStatusWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SupportStatusUpdateDataInput
  upsert: SupportStatusUpsertNestedInput
}

input SupportStatusUpsertNestedInput {
  update: SupportStatusUpdateDataInput!
  create: SupportStatusCreateInput!
}

input SupportStatusWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportStatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportStatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportStatusWhereInput!]
=======
  node: ProductWhereInput
}

type ProductTemplate implements Node {
  id: ID!
  _version: Int!
  name: String
  briefDescription: String
  catalog(where: CatalogWhereInput, orderBy: CatalogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Catalog!]
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  brand: Brand
  descriptions(where: DescriptionWhereInput, orderBy: DescriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Description!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProductTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductTemplateEdge]!
  aggregate: AggregateProductTemplate!
}

input ProductTemplateCreateInput {
  id: ID
  _version: Int
  name: String
  briefDescription: String
  catalog: CatalogCreateManyWithoutProductTemplatesInput
  products: ProductCreateManyWithoutProductTemplateInput
  brand: BrandCreateOneWithoutProductTemplatesInput
  descriptions: DescriptionCreateManyInput
}

input ProductTemplateCreateManyWithoutBrandInput {
  create: [ProductTemplateCreateWithoutBrandInput!]
  connect: [ProductTemplateWhereUniqueInput!]
}

input ProductTemplateCreateManyWithoutCatalogInput {
  create: [ProductTemplateCreateWithoutCatalogInput!]
  connect: [ProductTemplateWhereUniqueInput!]
}

input ProductTemplateCreateOneWithoutProductsInput {
  create: ProductTemplateCreateWithoutProductsInput
  connect: ProductTemplateWhereUniqueInput
}

input ProductTemplateCreateWithoutBrandInput {
  id: ID
  _version: Int
  name: String
  briefDescription: String
  catalog: CatalogCreateManyWithoutProductTemplatesInput
  products: ProductCreateManyWithoutProductTemplateInput
  descriptions: DescriptionCreateManyInput
}

input ProductTemplateCreateWithoutCatalogInput {
  id: ID
  _version: Int
  name: String
  briefDescription: String
  products: ProductCreateManyWithoutProductTemplateInput
  brand: BrandCreateOneWithoutProductTemplatesInput
  descriptions: DescriptionCreateManyInput
}

input ProductTemplateCreateWithoutProductsInput {
  id: ID
  _version: Int
  name: String
  briefDescription: String
  catalog: CatalogCreateManyWithoutProductTemplatesInput
  brand: BrandCreateOneWithoutProductTemplatesInput
  descriptions: DescriptionCreateManyInput
}

"""An edge in a connection."""
type ProductTemplateEdge {
  """The item at the end of the edge."""
  node: ProductTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductTemplateOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  briefDescription_ASC
  briefDescription_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductTemplatePreviousValues {
  id: ID!
  _version: Int!
  name: String
  briefDescription: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductTemplateScalarWhereInput!]
>>>>>>> origin/retailer_implementation
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
<<<<<<< HEAD
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input SupportStatusWhereUniqueInput {
  id: ID
  name: String
}

type Trans_Brand implements Node {
  id: ID!
  _version: Int!
  language: Language
  brand: Brand
  brandName: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type Trans_BrandConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [Trans_BrandEdge]!
  aggregate: AggregateTrans_Brand!
}

input Trans_BrandCreateInput {
  id: ID
  _version: Int
  brandName: String
  language: LanguageCreateOneWithoutTrans_brandInput
  brand: BrandCreateOneWithoutTrans_brandNameInput
}

input Trans_BrandCreateManyWithoutBrandInput {
  create: [Trans_BrandCreateWithoutBrandInput!]
  connect: [Trans_BrandWhereUniqueInput!]
}

input Trans_BrandCreateManyWithoutLanguageInput {
  create: [Trans_BrandCreateWithoutLanguageInput!]
  connect: [Trans_BrandWhereUniqueInput!]
}

input Trans_BrandCreateWithoutBrandInput {
  id: ID
  _version: Int
  brandName: String
  language: LanguageCreateOneWithoutTrans_brandInput
}

input Trans_BrandCreateWithoutLanguageInput {
  id: ID
  _version: Int
  brandName: String
  brand: BrandCreateOneWithoutTrans_brandNameInput
}

"""An edge in a connection."""
type Trans_BrandEdge {
  """The item at the end of the edge."""
  node: Trans_Brand!

  """A cursor for use in pagination."""
  cursor: String!
}

enum Trans_BrandOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  brandName_ASC
  brandName_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Trans_BrandPreviousValues {
  id: ID!
  _version: Int!
  brandName: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input Trans_BrandScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [Trans_BrandScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [Trans_BrandScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Trans_BrandScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  brandName: String

  """All values that are not equal to given value."""
  brandName_not: String

  """All values that are contained in given list."""
  brandName_in: [String!]

  """All values that are not contained in given list."""
  brandName_not_in: [String!]

  """All values less than the given value."""
  brandName_lt: String

  """All values less than or equal the given value."""
  brandName_lte: String

  """All values greater than the given value."""
  brandName_gt: String

  """All values greater than or equal the given value."""
  brandName_gte: String

  """All values containing the given string."""
  brandName_contains: String

  """All values not containing the given string."""
  brandName_not_contains: String

  """All values starting with the given string."""
  brandName_starts_with: String

  """All values not starting with the given string."""
  brandName_not_starts_with: String

  """All values ending with the given string."""
  brandName_ends_with: String

  """All values not ending with the given string."""
  brandName_not_ends_with: String
=======
  briefDescription: String

  """All values that are not equal to given value."""
  briefDescription_not: String

  """All values that are contained in given list."""
  briefDescription_in: [String!]

  """All values that are not contained in given list."""
  briefDescription_not_in: [String!]

  """All values less than the given value."""
  briefDescription_lt: String

  """All values less than or equal the given value."""
  briefDescription_lte: String

  """All values greater than the given value."""
  briefDescription_gt: String

  """All values greater than or equal the given value."""
  briefDescription_gte: String

  """All values containing the given string."""
  briefDescription_contains: String

  """All values not containing the given string."""
  briefDescription_not_contains: String

  """All values starting with the given string."""
  briefDescription_starts_with: String

  """All values not starting with the given string."""
  briefDescription_not_starts_with: String

  """All values ending with the given string."""
  briefDescription_ends_with: String

  """All values not ending with the given string."""
  briefDescription_not_ends_with: String
>>>>>>> origin/retailer_implementation
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

<<<<<<< HEAD
type Trans_BrandSubscriptionPayload {
  mutation: MutationType!
  node: Trans_Brand
  updatedFields: [String!]
  previousValues: Trans_BrandPreviousValues
}

input Trans_BrandSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [Trans_BrandSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [Trans_BrandSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Trans_BrandSubscriptionWhereInput!]
=======
type ProductTemplateSubscriptionPayload {
  mutation: MutationType!
  node: ProductTemplate
  updatedFields: [String!]
  previousValues: ProductTemplatePreviousValues
}

input ProductTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductTemplateSubscriptionWhereInput!]
>>>>>>> origin/retailer_implementation

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
<<<<<<< HEAD
  node: Trans_BrandWhereInput
}

input Trans_BrandUpdateInput {
  _version: Int
  brandName: String
  language: LanguageUpdateOneWithoutTrans_brandInput
  brand: BrandUpdateOneWithoutTrans_brandNameInput
}

input Trans_BrandUpdateManyDataInput {
  _version: Int
  brandName: String
}

input Trans_BrandUpdateManyMutationInput {
  _version: Int
  brandName: String
}

input Trans_BrandUpdateManyWithoutBrandInput {
  create: [Trans_BrandCreateWithoutBrandInput!]
  connect: [Trans_BrandWhereUniqueInput!]
  set: [Trans_BrandWhereUniqueInput!]
  disconnect: [Trans_BrandWhereUniqueInput!]
  delete: [Trans_BrandWhereUniqueInput!]
  update: [Trans_BrandUpdateWithWhereUniqueWithoutBrandInput!]
  updateMany: [Trans_BrandUpdateManyWithWhereNestedInput!]
  deleteMany: [Trans_BrandScalarWhereInput!]
  upsert: [Trans_BrandUpsertWithWhereUniqueWithoutBrandInput!]
}

input Trans_BrandUpdateManyWithoutLanguageInput {
  create: [Trans_BrandCreateWithoutLanguageInput!]
  connect: [Trans_BrandWhereUniqueInput!]
  set: [Trans_BrandWhereUniqueInput!]
  disconnect: [Trans_BrandWhereUniqueInput!]
  delete: [Trans_BrandWhereUniqueInput!]
  update: [Trans_BrandUpdateWithWhereUniqueWithoutLanguageInput!]
  updateMany: [Trans_BrandUpdateManyWithWhereNestedInput!]
  deleteMany: [Trans_BrandScalarWhereInput!]
  upsert: [Trans_BrandUpsertWithWhereUniqueWithoutLanguageInput!]
}

input Trans_BrandUpdateManyWithWhereNestedInput {
  where: Trans_BrandScalarWhereInput!
  data: Trans_BrandUpdateManyDataInput!
}

input Trans_BrandUpdateWithoutBrandDataInput {
  _version: Int
  brandName: String
  language: LanguageUpdateOneWithoutTrans_brandInput
}

input Trans_BrandUpdateWithoutLanguageDataInput {
  _version: Int
  brandName: String
  brand: BrandUpdateOneWithoutTrans_brandNameInput
}

input Trans_BrandUpdateWithWhereUniqueWithoutBrandInput {
  where: Trans_BrandWhereUniqueInput!
  data: Trans_BrandUpdateWithoutBrandDataInput!
}

input Trans_BrandUpdateWithWhereUniqueWithoutLanguageInput {
  where: Trans_BrandWhereUniqueInput!
  data: Trans_BrandUpdateWithoutLanguageDataInput!
}

input Trans_BrandUpsertWithWhereUniqueWithoutBrandInput {
  where: Trans_BrandWhereUniqueInput!
  update: Trans_BrandUpdateWithoutBrandDataInput!
  create: Trans_BrandCreateWithoutBrandInput!
}

input Trans_BrandUpsertWithWhereUniqueWithoutLanguageInput {
  where: Trans_BrandWhereUniqueInput!
  update: Trans_BrandUpdateWithoutLanguageDataInput!
  create: Trans_BrandCreateWithoutLanguageInput!
}

input Trans_BrandWhereInput {
  """Logical AND on all given filters."""
  AND: [Trans_BrandWhereInput!]

  """Logical OR on all given filters."""
  OR: [Trans_BrandWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Trans_BrandWhereInput!]
=======
  node: ProductTemplateWhereInput
}

input ProductTemplateUpdateInput {
  _version: Int
  name: String
  briefDescription: String
  catalog: CatalogUpdateManyWithoutProductTemplatesInput
  products: ProductUpdateManyWithoutProductTemplateInput
  brand: BrandUpdateOneWithoutProductTemplatesInput
  descriptions: DescriptionUpdateManyInput
}

input ProductTemplateUpdateManyDataInput {
  _version: Int
  name: String
  briefDescription: String
}

input ProductTemplateUpdateManyMutationInput {
  _version: Int
  name: String
  briefDescription: String
}

input ProductTemplateUpdateManyWithoutBrandInput {
  create: [ProductTemplateCreateWithoutBrandInput!]
  connect: [ProductTemplateWhereUniqueInput!]
  set: [ProductTemplateWhereUniqueInput!]
  disconnect: [ProductTemplateWhereUniqueInput!]
  delete: [ProductTemplateWhereUniqueInput!]
  update: [ProductTemplateUpdateWithWhereUniqueWithoutBrandInput!]
  updateMany: [ProductTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductTemplateScalarWhereInput!]
  upsert: [ProductTemplateUpsertWithWhereUniqueWithoutBrandInput!]
}

input ProductTemplateUpdateManyWithoutCatalogInput {
  create: [ProductTemplateCreateWithoutCatalogInput!]
  connect: [ProductTemplateWhereUniqueInput!]
  set: [ProductTemplateWhereUniqueInput!]
  disconnect: [ProductTemplateWhereUniqueInput!]
  delete: [ProductTemplateWhereUniqueInput!]
  update: [ProductTemplateUpdateWithWhereUniqueWithoutCatalogInput!]
  updateMany: [ProductTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductTemplateScalarWhereInput!]
  upsert: [ProductTemplateUpsertWithWhereUniqueWithoutCatalogInput!]
}

input ProductTemplateUpdateManyWithWhereNestedInput {
  where: ProductTemplateScalarWhereInput!
  data: ProductTemplateUpdateManyDataInput!
}

input ProductTemplateUpdateOneWithoutProductsInput {
  create: ProductTemplateCreateWithoutProductsInput
  connect: ProductTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductTemplateUpdateWithoutProductsDataInput
  upsert: ProductTemplateUpsertWithoutProductsInput
}

input ProductTemplateUpdateWithoutBrandDataInput {
  _version: Int
  name: String
  briefDescription: String
  catalog: CatalogUpdateManyWithoutProductTemplatesInput
  products: ProductUpdateManyWithoutProductTemplateInput
  descriptions: DescriptionUpdateManyInput
}

input ProductTemplateUpdateWithoutCatalogDataInput {
  _version: Int
  name: String
  briefDescription: String
  products: ProductUpdateManyWithoutProductTemplateInput
  brand: BrandUpdateOneWithoutProductTemplatesInput
  descriptions: DescriptionUpdateManyInput
}

input ProductTemplateUpdateWithoutProductsDataInput {
  _version: Int
  name: String
  briefDescription: String
  catalog: CatalogUpdateManyWithoutProductTemplatesInput
  brand: BrandUpdateOneWithoutProductTemplatesInput
  descriptions: DescriptionUpdateManyInput
}

input ProductTemplateUpdateWithWhereUniqueWithoutBrandInput {
  where: ProductTemplateWhereUniqueInput!
  data: ProductTemplateUpdateWithoutBrandDataInput!
}

input ProductTemplateUpdateWithWhereUniqueWithoutCatalogInput {
  where: ProductTemplateWhereUniqueInput!
  data: ProductTemplateUpdateWithoutCatalogDataInput!
}

input ProductTemplateUpsertWithoutProductsInput {
  update: ProductTemplateUpdateWithoutProductsDataInput!
  create: ProductTemplateCreateWithoutProductsInput!
}

input ProductTemplateUpsertWithWhereUniqueWithoutBrandInput {
  where: ProductTemplateWhereUniqueInput!
  update: ProductTemplateUpdateWithoutBrandDataInput!
  create: ProductTemplateCreateWithoutBrandInput!
}

input ProductTemplateUpsertWithWhereUniqueWithoutCatalogInput {
  where: ProductTemplateWhereUniqueInput!
  update: ProductTemplateUpdateWithoutCatalogDataInput!
  create: ProductTemplateCreateWithoutCatalogInput!
}

input ProductTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductTemplateWhereInput!]
>>>>>>> origin/retailer_implementation
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
<<<<<<< HEAD
  brandName: String

  """All values that are not equal to given value."""
  brandName_not: String

  """All values that are contained in given list."""
  brandName_in: [String!]

  """All values that are not contained in given list."""
  brandName_not_in: [String!]

  """All values less than the given value."""
  brandName_lt: String

  """All values less than or equal the given value."""
  brandName_lte: String

  """All values greater than the given value."""
  brandName_gt: String

  """All values greater than or equal the given value."""
  brandName_gte: String

  """All values containing the given string."""
  brandName_contains: String

  """All values not containing the given string."""
  brandName_not_contains: String

  """All values starting with the given string."""
  brandName_starts_with: String

  """All values not starting with the given string."""
  brandName_not_starts_with: String

  """All values ending with the given string."""
  brandName_ends_with: String

  """All values not ending with the given string."""
  brandName_not_ends_with: String
=======
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  briefDescription: String

  """All values that are not equal to given value."""
  briefDescription_not: String

  """All values that are contained in given list."""
  briefDescription_in: [String!]

  """All values that are not contained in given list."""
  briefDescription_not_in: [String!]

  """All values less than the given value."""
  briefDescription_lt: String

  """All values less than or equal the given value."""
  briefDescription_lte: String

  """All values greater than the given value."""
  briefDescription_gt: String

  """All values greater than or equal the given value."""
  briefDescription_gte: String

  """All values containing the given string."""
  briefDescription_contains: String

  """All values not containing the given string."""
  briefDescription_not_contains: String

  """All values starting with the given string."""
  briefDescription_starts_with: String

  """All values not starting with the given string."""
  briefDescription_not_starts_with: String

  """All values ending with the given string."""
  briefDescription_ends_with: String

  """All values not ending with the given string."""
  briefDescription_not_ends_with: String
>>>>>>> origin/retailer_implementation
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
<<<<<<< HEAD
  language: LanguageWhereInput
  brand: BrandWhereInput
}

input Trans_BrandWhereUniqueInput {
  id: ID
}

type Trans_Catalog implements Node {
  id: ID!
  _version: Int!
  language: Language
  catalog: Catalog
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type Trans_CatalogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [Trans_CatalogEdge]!
  aggregate: AggregateTrans_Catalog!
}

input Trans_CatalogCreateInput {
  id: ID
  _version: Int
  name: String
  language: LanguageCreateOneWithoutTrans_catalogInput
  catalog: CatalogCreateOneWithoutTrans_nameInput
}

input Trans_CatalogCreateManyWithoutCatalogInput {
  create: [Trans_CatalogCreateWithoutCatalogInput!]
  connect: [Trans_CatalogWhereUniqueInput!]
}

input Trans_CatalogCreateManyWithoutLanguageInput {
  create: [Trans_CatalogCreateWithoutLanguageInput!]
  connect: [Trans_CatalogWhereUniqueInput!]
}

input Trans_CatalogCreateWithoutCatalogInput {
  id: ID
  _version: Int
  name: String
  language: LanguageCreateOneWithoutTrans_catalogInput
}

input Trans_CatalogCreateWithoutLanguageInput {
  id: ID
  _version: Int
  name: String
  catalog: CatalogCreateOneWithoutTrans_nameInput
}

"""An edge in a connection."""
type Trans_CatalogEdge {
  """The item at the end of the edge."""
  node: Trans_Catalog!

  """A cursor for use in pagination."""
  cursor: String!
}

enum Trans_CatalogOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Trans_CatalogPreviousValues {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input Trans_CatalogScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [Trans_CatalogScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [Trans_CatalogScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Trans_CatalogScalarWhereInput!]
=======
  catalog_every: CatalogWhereInput
  catalog_some: CatalogWhereInput
  catalog_none: CatalogWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  brand: BrandWhereInput
  descriptions_every: DescriptionWhereInput
  descriptions_some: DescriptionWhereInput
  descriptions_none: DescriptionWhereInput
}

input ProductTemplateWhereUniqueInput {
  id: ID
}

input ProductUpdateDataInput {
  _version: Int
  sku: String
  productTemplate: ProductTemplateUpdateOneWithoutProductsInput
  productMedias: MediaUpdateManyInput
  productRetailers: ProductRetailerUpdateManyWithoutProductInput
  options: ProductOptionUpdateManyInput
}

input ProductUpdateInput {
  _version: Int
  sku: String
  productTemplate: ProductTemplateUpdateOneWithoutProductsInput
  productMedias: MediaUpdateManyInput
  productRetailers: ProductRetailerUpdateManyWithoutProductInput
  options: ProductOptionUpdateManyInput
}

input ProductUpdateManyDataInput {
  _version: Int
  sku: String
}

input ProductUpdateManyMutationInput {
  _version: Int
  sku: String
}

input ProductUpdateManyWithoutProductTemplateInput {
  create: [ProductCreateWithoutProductTemplateInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutProductTemplateInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutProductTemplateInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
}

input ProductUpdateOneWithoutProductRetailersInput {
  create: ProductCreateWithoutProductRetailersInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductUpdateWithoutProductRetailersDataInput
  upsert: ProductUpsertWithoutProductRetailersInput
}

input ProductUpdateWithoutProductRetailersDataInput {
  _version: Int
  sku: String
  productTemplate: ProductTemplateUpdateOneWithoutProductsInput
  productMedias: MediaUpdateManyInput
  options: ProductOptionUpdateManyInput
}

input ProductUpdateWithoutProductTemplateDataInput {
  _version: Int
  sku: String
  productMedias: MediaUpdateManyInput
  productRetailers: ProductRetailerUpdateManyWithoutProductInput
  options: ProductOptionUpdateManyInput
}

input ProductUpdateWithWhereUniqueWithoutProductTemplateInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutProductTemplateDataInput!
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithoutProductRetailersInput {
  update: ProductUpdateWithoutProductRetailersDataInput!
  create: ProductCreateWithoutProductRetailersInput!
}

input ProductUpsertWithWhereUniqueWithoutProductTemplateInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutProductTemplateDataInput!
  create: ProductCreateWithoutProductTemplateInput!
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
>>>>>>> origin/retailer_implementation
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
<<<<<<< HEAD
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
=======
  sku: String

  """All values that are not equal to given value."""
  sku_not: String

  """All values that are contained in given list."""
  sku_in: [String!]

  """All values that are not contained in given list."""
  sku_not_in: [String!]

  """All values less than the given value."""
  sku_lt: String

  """All values less than or equal the given value."""
  sku_lte: String

  """All values greater than the given value."""
  sku_gt: String

  """All values greater than or equal the given value."""
  sku_gte: String

  """All values containing the given string."""
  sku_contains: String

  """All values not containing the given string."""
  sku_not_contains: String

  """All values starting with the given string."""
  sku_starts_with: String

  """All values not starting with the given string."""
  sku_not_starts_with: String

  """All values ending with the given string."""
  sku_ends_with: String

  """All values not ending with the given string."""
  sku_not_ends_with: String
>>>>>>> origin/retailer_implementation
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
<<<<<<< HEAD
}

type Trans_CatalogSubscriptionPayload {
  mutation: MutationType!
  node: Trans_Catalog
  updatedFields: [String!]
  previousValues: Trans_CatalogPreviousValues
}

input Trans_CatalogSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [Trans_CatalogSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [Trans_CatalogSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Trans_CatalogSubscriptionWhereInput!]
=======
  productTemplate: ProductTemplateWhereInput
  productMedias_every: MediaWhereInput
  productMedias_some: MediaWhereInput
  productMedias_none: MediaWhereInput
  productRetailers_every: ProductRetailerWhereInput
  productRetailers_some: ProductRetailerWhereInput
  productRetailers_none: ProductRetailerWhereInput
  options_every: ProductOptionWhereInput
  options_some: ProductOptionWhereInput
  options_none: ProductOptionWhereInput
}

input ProductWhereUniqueInput {
  id: ID
  sku: String
}

type Query {
  securityQuestions(where: SecurityQuestionWhereInput, orderBy: SecurityQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SecurityQuestion]!
  securityAnswers(where: SecurityAnswerWhereInput, orderBy: SecurityAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SecurityAnswer]!
  assignments(where: AssignmentWhereInput, orderBy: AssignmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Assignment]!
  policies(where: PolicyWhereInput, orderBy: PolicyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Policy]!
  manufacturers(where: ManufacturerWhereInput, orderBy: ManufacturerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Manufacturer]!
  brands(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Brand]!
  productTemplates(where: ProductTemplateWhereInput, orderBy: ProductTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductTemplate]!
  productAttributes(where: ProductAttributeWhereInput, orderBy: ProductAttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductAttribute]!
  productAttributeValues(where: ProductAttributeValueWhereInput, orderBy: ProductAttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductAttributeValue]!
  productRetailers(where: ProductRetailerWhereInput, orderBy: ProductRetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductRetailer]!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  supportCases(where: SupportCaseWhereInput, orderBy: SupportCaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportCase]!
  supportCorrespondences(where: SupportCorrespondenceWhereInput, orderBy: SupportCorrespondenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportCorrespondence]!
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language]!
  trans_Catalogs(where: Trans_CatalogWhereInput, orderBy: Trans_CatalogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trans_Catalog]!
  trans_Brands(where: Trans_BrandWhereInput, orderBy: Trans_BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trans_Brand]!
  productOptions(where: ProductOptionWhereInput, orderBy: ProductOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductOption]!
  supportStatuses(where: SupportStatusWhereInput, orderBy: SupportStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportStatus]!
  supportCategories(where: SupportCategoryWhereInput, orderBy: SupportCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportCategory]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  catalogs(where: CatalogWhereInput, orderBy: CatalogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Catalog]!
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  medias(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media]!
  retailers(where: RetailerWhereInput, orderBy: RetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Retailer]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  descriptions(where: DescriptionWhereInput, orderBy: DescriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Description]!
  supportSeverities(where: SupportSeverityWhereInput, orderBy: SupportSeverityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportSeverity]!
  securityQuestion(where: SecurityQuestionWhereUniqueInput!): SecurityQuestion
  securityAnswer(where: SecurityAnswerWhereUniqueInput!): SecurityAnswer
  assignment(where: AssignmentWhereUniqueInput!): Assignment
  policy(where: PolicyWhereUniqueInput!): Policy
  manufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer
  brand(where: BrandWhereUniqueInput!): Brand
  productTemplate(where: ProductTemplateWhereUniqueInput!): ProductTemplate
  productAttribute(where: ProductAttributeWhereUniqueInput!): ProductAttribute
  productAttributeValue(where: ProductAttributeValueWhereUniqueInput!): ProductAttributeValue
  productRetailer(where: ProductRetailerWhereUniqueInput!): ProductRetailer
  review(where: ReviewWhereUniqueInput!): Review
  supportCase(where: SupportCaseWhereUniqueInput!): SupportCase
  supportCorrespondence(where: SupportCorrespondenceWhereUniqueInput!): SupportCorrespondence
  language(where: LanguageWhereUniqueInput!): Language
  trans_Catalog(where: Trans_CatalogWhereUniqueInput!): Trans_Catalog
  trans_Brand(where: Trans_BrandWhereUniqueInput!): Trans_Brand
  productOption(where: ProductOptionWhereUniqueInput!): ProductOption
  supportStatus(where: SupportStatusWhereUniqueInput!): SupportStatus
  supportCategory(where: SupportCategoryWhereUniqueInput!): SupportCategory
  product(where: ProductWhereUniqueInput!): Product
  catalog(where: CatalogWhereUniqueInput!): Catalog
  permission(where: PermissionWhereUniqueInput!): Permission
  user(where: UserWhereUniqueInput!): User
  address(where: AddressWhereUniqueInput!): Address
  media(where: MediaWhereUniqueInput!): Media
  retailer(where: RetailerWhereUniqueInput!): Retailer
  role(where: RoleWhereUniqueInput!): Role
  description(where: DescriptionWhereUniqueInput!): Description
  supportSeverity(where: SupportSeverityWhereUniqueInput!): SupportSeverity
  securityQuestionsConnection(where: SecurityQuestionWhereInput, orderBy: SecurityQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SecurityQuestionConnection!
  securityAnswersConnection(where: SecurityAnswerWhereInput, orderBy: SecurityAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SecurityAnswerConnection!
  assignmentsConnection(where: AssignmentWhereInput, orderBy: AssignmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AssignmentConnection!
  policiesConnection(where: PolicyWhereInput, orderBy: PolicyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PolicyConnection!
  manufacturersConnection(where: ManufacturerWhereInput, orderBy: ManufacturerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ManufacturerConnection!
  brandsConnection(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BrandConnection!
  productTemplatesConnection(where: ProductTemplateWhereInput, orderBy: ProductTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductTemplateConnection!
  productAttributesConnection(where: ProductAttributeWhereInput, orderBy: ProductAttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductAttributeConnection!
  productAttributeValuesConnection(where: ProductAttributeValueWhereInput, orderBy: ProductAttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductAttributeValueConnection!
  productRetailersConnection(where: ProductRetailerWhereInput, orderBy: ProductRetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductRetailerConnection!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  supportCasesConnection(where: SupportCaseWhereInput, orderBy: SupportCaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupportCaseConnection!
  supportCorrespondencesConnection(where: SupportCorrespondenceWhereInput, orderBy: SupportCorrespondenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupportCorrespondenceConnection!
  languagesConnection(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageConnection!
  trans_CatalogsConnection(where: Trans_CatalogWhereInput, orderBy: Trans_CatalogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Trans_CatalogConnection!
  trans_BrandsConnection(where: Trans_BrandWhereInput, orderBy: Trans_BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Trans_BrandConnection!
  productOptionsConnection(where: ProductOptionWhereInput, orderBy: ProductOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductOptionConnection!
  supportStatusesConnection(where: SupportStatusWhereInput, orderBy: SupportStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupportStatusConnection!
  supportCategoriesConnection(where: SupportCategoryWhereInput, orderBy: SupportCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupportCategoryConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  catalogsConnection(where: CatalogWhereInput, orderBy: CatalogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CatalogConnection!
  permissionsConnection(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PermissionConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  mediasConnection(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MediaConnection!
  retailersConnection(where: RetailerWhereInput, orderBy: RetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RetailerConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  descriptionsConnection(where: DescriptionWhereInput, orderBy: DescriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DescriptionConnection!
  supportSeveritiesConnection(where: SupportSeverityWhereInput, orderBy: SupportSeverityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupportSeverityConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Region {
  VI
  ZH
  JA
  KO
}

type Retailer implements Node {
  id: ID!
  _version: Int!
  owner(where: AssignmentWhereInput, orderBy: AssignmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Assignment!]
  businessCover: Media
  businessAvatar: Media
  businessName: String
  businessAddress: Address
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  socialNumberImages(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  businessLicense: String
  businessLicenseImages(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  products(where: ProductRetailerWhereInput, orderBy: ProductRetailerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductRetailer!]
  enabled: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type RetailerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RetailerEdge]!
  aggregate: AggregateRetailer!
}

input RetailerCreateInput {
  id: ID
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  owner: AssignmentCreateManyWithoutRetailersInput
  businessCover: MediaCreateOneInput
  businessAvatar: MediaCreateOneInput
  businessAddress: AddressCreateOneInput
  socialNumberImages: MediaCreateManyInput
  businessLicenseImages: MediaCreateManyInput
  products: ProductRetailerCreateManyWithoutRetailerInput
}

input RetailerCreateManyWithoutOwnerInput {
  create: [RetailerCreateWithoutOwnerInput!]
  connect: [RetailerWhereUniqueInput!]
}

input RetailerCreateOneInput {
  create: RetailerCreateInput
  connect: RetailerWhereUniqueInput
}

input RetailerCreateOneWithoutProductsInput {
  create: RetailerCreateWithoutProductsInput
  connect: RetailerWhereUniqueInput
}

input RetailerCreateWithoutOwnerInput {
  id: ID
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  businessCover: MediaCreateOneInput
  businessAvatar: MediaCreateOneInput
  businessAddress: AddressCreateOneInput
  socialNumberImages: MediaCreateManyInput
  businessLicenseImages: MediaCreateManyInput
  products: ProductRetailerCreateManyWithoutRetailerInput
}

input RetailerCreateWithoutProductsInput {
  id: ID
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  owner: AssignmentCreateManyWithoutRetailersInput
  businessCover: MediaCreateOneInput
  businessAvatar: MediaCreateOneInput
  businessAddress: AddressCreateOneInput
  socialNumberImages: MediaCreateManyInput
  businessLicenseImages: MediaCreateManyInput
}

"""An edge in a connection."""
type RetailerEdge {
  """The item at the end of the edge."""
  node: Retailer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RetailerOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  businessName_ASC
  businessName_DESC
  businessPhone_ASC
  businessPhone_DESC
  businessEmail_ASC
  businessEmail_DESC
  businessLink_ASC
  businessLink_DESC
  socialNumber_ASC
  socialNumber_DESC
  businessLicense_ASC
  businessLicense_DESC
  bankAccNumber_ASC
  bankAccNumber_DESC
  bankAccName_ASC
  bankAccName_DESC
  bankName_ASC
  bankName_DESC
  bankBranch_ASC
  bankBranch_DESC
  swiftCode_ASC
  swiftCode_DESC
  enabled_ASC
  enabled_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RetailerPreviousValues {
  id: ID!
  _version: Int!
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RetailerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RetailerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RetailerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RetailerScalarWhereInput!]
  id: ID
>>>>>>> origin/retailer_implementation

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  businessName: String

  """All values that are not equal to given value."""
  businessName_not: String

  """All values that are contained in given list."""
  businessName_in: [String!]

  """All values that are not contained in given list."""
  businessName_not_in: [String!]

  """All values less than the given value."""
  businessName_lt: String

  """All values less than or equal the given value."""
  businessName_lte: String

  """All values greater than the given value."""
  businessName_gt: String

  """All values greater than or equal the given value."""
  businessName_gte: String

  """All values containing the given string."""
  businessName_contains: String

  """All values not containing the given string."""
  businessName_not_contains: String

  """All values starting with the given string."""
  businessName_starts_with: String

  """All values not starting with the given string."""
  businessName_not_starts_with: String

  """All values ending with the given string."""
  businessName_ends_with: String

  """All values not ending with the given string."""
  businessName_not_ends_with: String
  businessPhone: String

  """All values that are not equal to given value."""
  businessPhone_not: String

  """All values that are contained in given list."""
  businessPhone_in: [String!]

  """All values that are not contained in given list."""
  businessPhone_not_in: [String!]

  """All values less than the given value."""
  businessPhone_lt: String

  """All values less than or equal the given value."""
  businessPhone_lte: String

  """All values greater than the given value."""
  businessPhone_gt: String

  """All values greater than or equal the given value."""
  businessPhone_gte: String

  """All values containing the given string."""
  businessPhone_contains: String

  """All values not containing the given string."""
  businessPhone_not_contains: String

  """All values starting with the given string."""
  businessPhone_starts_with: String

  """All values not starting with the given string."""
  businessPhone_not_starts_with: String

  """All values ending with the given string."""
  businessPhone_ends_with: String

  """All values not ending with the given string."""
  businessPhone_not_ends_with: String
  businessEmail: String

  """All values that are not equal to given value."""
  businessEmail_not: String

  """All values that are contained in given list."""
  businessEmail_in: [String!]

  """All values that are not contained in given list."""
  businessEmail_not_in: [String!]

  """All values less than the given value."""
  businessEmail_lt: String

  """All values less than or equal the given value."""
  businessEmail_lte: String

  """All values greater than the given value."""
  businessEmail_gt: String

  """All values greater than or equal the given value."""
  businessEmail_gte: String

  """All values containing the given string."""
  businessEmail_contains: String

  """All values not containing the given string."""
  businessEmail_not_contains: String

  """All values starting with the given string."""
  businessEmail_starts_with: String

  """All values not starting with the given string."""
  businessEmail_not_starts_with: String

  """All values ending with the given string."""
  businessEmail_ends_with: String

  """All values not ending with the given string."""
  businessEmail_not_ends_with: String
  businessLink: String

  """All values that are not equal to given value."""
  businessLink_not: String

  """All values that are contained in given list."""
  businessLink_in: [String!]

  """All values that are not contained in given list."""
  businessLink_not_in: [String!]

  """All values less than the given value."""
  businessLink_lt: String

  """All values less than or equal the given value."""
  businessLink_lte: String

  """All values greater than the given value."""
  businessLink_gt: String

  """All values greater than or equal the given value."""
  businessLink_gte: String

  """All values containing the given string."""
  businessLink_contains: String

  """All values not containing the given string."""
  businessLink_not_contains: String

  """All values starting with the given string."""
  businessLink_starts_with: String

  """All values not starting with the given string."""
  businessLink_not_starts_with: String

  """All values ending with the given string."""
  businessLink_ends_with: String

  """All values not ending with the given string."""
  businessLink_not_ends_with: String
  socialNumber: String

  """All values that are not equal to given value."""
  socialNumber_not: String

  """All values that are contained in given list."""
  socialNumber_in: [String!]

  """All values that are not contained in given list."""
  socialNumber_not_in: [String!]

  """All values less than the given value."""
  socialNumber_lt: String

  """All values less than or equal the given value."""
  socialNumber_lte: String

  """All values greater than the given value."""
  socialNumber_gt: String

  """All values greater than or equal the given value."""
  socialNumber_gte: String

  """All values containing the given string."""
  socialNumber_contains: String

  """All values not containing the given string."""
  socialNumber_not_contains: String

  """All values starting with the given string."""
  socialNumber_starts_with: String

  """All values not starting with the given string."""
  socialNumber_not_starts_with: String

  """All values ending with the given string."""
  socialNumber_ends_with: String

  """All values not ending with the given string."""
  socialNumber_not_ends_with: String
  businessLicense: String

  """All values that are not equal to given value."""
  businessLicense_not: String

  """All values that are contained in given list."""
  businessLicense_in: [String!]

  """All values that are not contained in given list."""
  businessLicense_not_in: [String!]

  """All values less than the given value."""
  businessLicense_lt: String

  """All values less than or equal the given value."""
  businessLicense_lte: String

  """All values greater than the given value."""
  businessLicense_gt: String

  """All values greater than or equal the given value."""
  businessLicense_gte: String

  """All values containing the given string."""
  businessLicense_contains: String

  """All values not containing the given string."""
  businessLicense_not_contains: String

  """All values starting with the given string."""
  businessLicense_starts_with: String

  """All values not starting with the given string."""
  businessLicense_not_starts_with: String

  """All values ending with the given string."""
  businessLicense_ends_with: String

  """All values not ending with the given string."""
  businessLicense_not_ends_with: String
  bankAccNumber: String

  """All values that are not equal to given value."""
  bankAccNumber_not: String

  """All values that are contained in given list."""
  bankAccNumber_in: [String!]

  """All values that are not contained in given list."""
  bankAccNumber_not_in: [String!]

  """All values less than the given value."""
  bankAccNumber_lt: String

  """All values less than or equal the given value."""
  bankAccNumber_lte: String

  """All values greater than the given value."""
  bankAccNumber_gt: String

  """All values greater than or equal the given value."""
  bankAccNumber_gte: String

  """All values containing the given string."""
  bankAccNumber_contains: String

  """All values not containing the given string."""
  bankAccNumber_not_contains: String

  """All values starting with the given string."""
  bankAccNumber_starts_with: String

  """All values not starting with the given string."""
  bankAccNumber_not_starts_with: String

  """All values ending with the given string."""
  bankAccNumber_ends_with: String

  """All values not ending with the given string."""
  bankAccNumber_not_ends_with: String
  bankAccName: String

  """All values that are not equal to given value."""
  bankAccName_not: String

  """All values that are contained in given list."""
  bankAccName_in: [String!]

  """All values that are not contained in given list."""
  bankAccName_not_in: [String!]

  """All values less than the given value."""
  bankAccName_lt: String

  """All values less than or equal the given value."""
  bankAccName_lte: String

  """All values greater than the given value."""
  bankAccName_gt: String

  """All values greater than or equal the given value."""
  bankAccName_gte: String

  """All values containing the given string."""
  bankAccName_contains: String

  """All values not containing the given string."""
  bankAccName_not_contains: String

  """All values starting with the given string."""
  bankAccName_starts_with: String

  """All values not starting with the given string."""
  bankAccName_not_starts_with: String

  """All values ending with the given string."""
  bankAccName_ends_with: String

  """All values not ending with the given string."""
  bankAccName_not_ends_with: String
  bankName: String

  """All values that are not equal to given value."""
  bankName_not: String

  """All values that are contained in given list."""
  bankName_in: [String!]

  """All values that are not contained in given list."""
  bankName_not_in: [String!]

  """All values less than the given value."""
  bankName_lt: String

  """All values less than or equal the given value."""
  bankName_lte: String

  """All values greater than the given value."""
  bankName_gt: String

  """All values greater than or equal the given value."""
  bankName_gte: String

  """All values containing the given string."""
  bankName_contains: String

  """All values not containing the given string."""
  bankName_not_contains: String

  """All values starting with the given string."""
  bankName_starts_with: String

  """All values not starting with the given string."""
  bankName_not_starts_with: String

  """All values ending with the given string."""
  bankName_ends_with: String

  """All values not ending with the given string."""
  bankName_not_ends_with: String
  bankBranch: String

  """All values that are not equal to given value."""
  bankBranch_not: String

  """All values that are contained in given list."""
  bankBranch_in: [String!]

  """All values that are not contained in given list."""
  bankBranch_not_in: [String!]

  """All values less than the given value."""
  bankBranch_lt: String

  """All values less than or equal the given value."""
  bankBranch_lte: String

  """All values greater than the given value."""
  bankBranch_gt: String

  """All values greater than or equal the given value."""
  bankBranch_gte: String

  """All values containing the given string."""
  bankBranch_contains: String

  """All values not containing the given string."""
  bankBranch_not_contains: String

  """All values starting with the given string."""
  bankBranch_starts_with: String

  """All values not starting with the given string."""
  bankBranch_not_starts_with: String

  """All values ending with the given string."""
  bankBranch_ends_with: String

  """All values not ending with the given string."""
  bankBranch_not_ends_with: String
  swiftCode: String

  """All values that are not equal to given value."""
  swiftCode_not: String

  """All values that are contained in given list."""
  swiftCode_in: [String!]

  """All values that are not contained in given list."""
  swiftCode_not_in: [String!]

  """All values less than the given value."""
  swiftCode_lt: String

  """All values less than or equal the given value."""
  swiftCode_lte: String

  """All values greater than the given value."""
  swiftCode_gt: String

  """All values greater than or equal the given value."""
  swiftCode_gte: String

  """All values containing the given string."""
  swiftCode_contains: String

  """All values not containing the given string."""
  swiftCode_not_contains: String

  """All values starting with the given string."""
  swiftCode_starts_with: String

  """All values not starting with the given string."""
  swiftCode_not_starts_with: String

  """All values ending with the given string."""
  swiftCode_ends_with: String

  """All values not ending with the given string."""
  swiftCode_not_ends_with: String
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type RetailerSubscriptionPayload {
  mutation: MutationType!
  node: Retailer
  updatedFields: [String!]
  previousValues: RetailerPreviousValues
}

input RetailerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RetailerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RetailerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RetailerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RetailerWhereInput
}

input RetailerUpdateDataInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  owner: AssignmentUpdateManyWithoutRetailersInput
  businessCover: MediaUpdateOneInput
  businessAvatar: MediaUpdateOneInput
  businessAddress: AddressUpdateOneInput
  socialNumberImages: MediaUpdateManyInput
  businessLicenseImages: MediaUpdateManyInput
  products: ProductRetailerUpdateManyWithoutRetailerInput
}

input RetailerUpdateInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  owner: AssignmentUpdateManyWithoutRetailersInput
  businessCover: MediaUpdateOneInput
  businessAvatar: MediaUpdateOneInput
  businessAddress: AddressUpdateOneInput
  socialNumberImages: MediaUpdateManyInput
  businessLicenseImages: MediaUpdateManyInput
  products: ProductRetailerUpdateManyWithoutRetailerInput
}

input RetailerUpdateManyDataInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
}

input RetailerUpdateManyMutationInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
}

input RetailerUpdateManyWithoutOwnerInput {
  create: [RetailerCreateWithoutOwnerInput!]
  connect: [RetailerWhereUniqueInput!]
  set: [RetailerWhereUniqueInput!]
  disconnect: [RetailerWhereUniqueInput!]
  delete: [RetailerWhereUniqueInput!]
  update: [RetailerUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [RetailerUpdateManyWithWhereNestedInput!]
  deleteMany: [RetailerScalarWhereInput!]
  upsert: [RetailerUpsertWithWhereUniqueWithoutOwnerInput!]
}

input RetailerUpdateManyWithWhereNestedInput {
  where: RetailerScalarWhereInput!
  data: RetailerUpdateManyDataInput!
}

input RetailerUpdateOneInput {
  create: RetailerCreateInput
  connect: RetailerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RetailerUpdateDataInput
  upsert: RetailerUpsertNestedInput
}

input RetailerUpdateOneWithoutProductsInput {
  create: RetailerCreateWithoutProductsInput
  connect: RetailerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RetailerUpdateWithoutProductsDataInput
  upsert: RetailerUpsertWithoutProductsInput
}

input RetailerUpdateWithoutOwnerDataInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  businessCover: MediaUpdateOneInput
  businessAvatar: MediaUpdateOneInput
  businessAddress: AddressUpdateOneInput
  socialNumberImages: MediaUpdateManyInput
  businessLicenseImages: MediaUpdateManyInput
  products: ProductRetailerUpdateManyWithoutRetailerInput
}

input RetailerUpdateWithoutProductsDataInput {
  _version: Int
  businessName: String
  businessPhone: String
  businessEmail: String
  businessLink: String
  socialNumber: String
  businessLicense: String
  bankAccNumber: String
  bankAccName: String
  bankName: String
  bankBranch: String
  swiftCode: String
  enabled: Boolean
  owner: AssignmentUpdateManyWithoutRetailersInput
  businessCover: MediaUpdateOneInput
  businessAvatar: MediaUpdateOneInput
  businessAddress: AddressUpdateOneInput
  socialNumberImages: MediaUpdateManyInput
  businessLicenseImages: MediaUpdateManyInput
}

input RetailerUpdateWithWhereUniqueWithoutOwnerInput {
  where: RetailerWhereUniqueInput!
  data: RetailerUpdateWithoutOwnerDataInput!
}

input RetailerUpsertNestedInput {
  update: RetailerUpdateDataInput!
  create: RetailerCreateInput!
}

input RetailerUpsertWithoutProductsInput {
  update: RetailerUpdateWithoutProductsDataInput!
  create: RetailerCreateWithoutProductsInput!
}

input RetailerUpsertWithWhereUniqueWithoutOwnerInput {
  where: RetailerWhereUniqueInput!
  update: RetailerUpdateWithoutOwnerDataInput!
  create: RetailerCreateWithoutOwnerInput!
}

input RetailerWhereInput {
  """Logical AND on all given filters."""
  AND: [RetailerWhereInput!]

  """Logical OR on all given filters."""
  OR: [RetailerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RetailerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  businessName: String

  """All values that are not equal to given value."""
  businessName_not: String

  """All values that are contained in given list."""
  businessName_in: [String!]

  """All values that are not contained in given list."""
  businessName_not_in: [String!]

  """All values less than the given value."""
  businessName_lt: String

  """All values less than or equal the given value."""
  businessName_lte: String

  """All values greater than the given value."""
  businessName_gt: String

  """All values greater than or equal the given value."""
  businessName_gte: String

  """All values containing the given string."""
  businessName_contains: String

  """All values not containing the given string."""
  businessName_not_contains: String

  """All values starting with the given string."""
  businessName_starts_with: String

  """All values not starting with the given string."""
  businessName_not_starts_with: String

  """All values ending with the given string."""
  businessName_ends_with: String

  """All values not ending with the given string."""
  businessName_not_ends_with: String
  businessPhone: String

  """All values that are not equal to given value."""
  businessPhone_not: String

  """All values that are contained in given list."""
  businessPhone_in: [String!]

  """All values that are not contained in given list."""
  businessPhone_not_in: [String!]

  """All values less than the given value."""
  businessPhone_lt: String

  """All values less than or equal the given value."""
  businessPhone_lte: String

  """All values greater than the given value."""
  businessPhone_gt: String

  """All values greater than or equal the given value."""
  businessPhone_gte: String

  """All values containing the given string."""
  businessPhone_contains: String

  """All values not containing the given string."""
  businessPhone_not_contains: String

  """All values starting with the given string."""
  businessPhone_starts_with: String

  """All values not starting with the given string."""
  businessPhone_not_starts_with: String

  """All values ending with the given string."""
  businessPhone_ends_with: String

  """All values not ending with the given string."""
  businessPhone_not_ends_with: String
  businessEmail: String

  """All values that are not equal to given value."""
  businessEmail_not: String

  """All values that are contained in given list."""
  businessEmail_in: [String!]

  """All values that are not contained in given list."""
  businessEmail_not_in: [String!]

  """All values less than the given value."""
  businessEmail_lt: String

  """All values less than or equal the given value."""
  businessEmail_lte: String

  """All values greater than the given value."""
  businessEmail_gt: String

  """All values greater than or equal the given value."""
  businessEmail_gte: String

  """All values containing the given string."""
  businessEmail_contains: String

  """All values not containing the given string."""
  businessEmail_not_contains: String

  """All values starting with the given string."""
  businessEmail_starts_with: String

  """All values not starting with the given string."""
  businessEmail_not_starts_with: String

  """All values ending with the given string."""
  businessEmail_ends_with: String

  """All values not ending with the given string."""
  businessEmail_not_ends_with: String
  businessLink: String

  """All values that are not equal to given value."""
  businessLink_not: String

  """All values that are contained in given list."""
  businessLink_in: [String!]

  """All values that are not contained in given list."""
  businessLink_not_in: [String!]

  """All values less than the given value."""
  businessLink_lt: String

  """All values less than or equal the given value."""
  businessLink_lte: String

  """All values greater than the given value."""
  businessLink_gt: String

  """All values greater than or equal the given value."""
  businessLink_gte: String

  """All values containing the given string."""
  businessLink_contains: String

  """All values not containing the given string."""
  businessLink_not_contains: String

  """All values starting with the given string."""
  businessLink_starts_with: String

  """All values not starting with the given string."""
  businessLink_not_starts_with: String

  """All values ending with the given string."""
  businessLink_ends_with: String

  """All values not ending with the given string."""
  businessLink_not_ends_with: String
  socialNumber: String

  """All values that are not equal to given value."""
  socialNumber_not: String

  """All values that are contained in given list."""
  socialNumber_in: [String!]

  """All values that are not contained in given list."""
  socialNumber_not_in: [String!]

  """All values less than the given value."""
  socialNumber_lt: String

  """All values less than or equal the given value."""
  socialNumber_lte: String

  """All values greater than the given value."""
  socialNumber_gt: String

  """All values greater than or equal the given value."""
  socialNumber_gte: String

  """All values containing the given string."""
  socialNumber_contains: String

  """All values not containing the given string."""
  socialNumber_not_contains: String

  """All values starting with the given string."""
  socialNumber_starts_with: String

  """All values not starting with the given string."""
  socialNumber_not_starts_with: String

  """All values ending with the given string."""
  socialNumber_ends_with: String

  """All values not ending with the given string."""
  socialNumber_not_ends_with: String
  businessLicense: String

  """All values that are not equal to given value."""
  businessLicense_not: String

  """All values that are contained in given list."""
  businessLicense_in: [String!]

  """All values that are not contained in given list."""
  businessLicense_not_in: [String!]

  """All values less than the given value."""
  businessLicense_lt: String

  """All values less than or equal the given value."""
  businessLicense_lte: String

  """All values greater than the given value."""
  businessLicense_gt: String

  """All values greater than or equal the given value."""
  businessLicense_gte: String

  """All values containing the given string."""
  businessLicense_contains: String

  """All values not containing the given string."""
  businessLicense_not_contains: String

  """All values starting with the given string."""
  businessLicense_starts_with: String

  """All values not starting with the given string."""
  businessLicense_not_starts_with: String

  """All values ending with the given string."""
  businessLicense_ends_with: String

  """All values not ending with the given string."""
  businessLicense_not_ends_with: String
  bankAccNumber: String

  """All values that are not equal to given value."""
  bankAccNumber_not: String

  """All values that are contained in given list."""
  bankAccNumber_in: [String!]

  """All values that are not contained in given list."""
  bankAccNumber_not_in: [String!]

  """All values less than the given value."""
  bankAccNumber_lt: String

  """All values less than or equal the given value."""
  bankAccNumber_lte: String

  """All values greater than the given value."""
  bankAccNumber_gt: String

  """All values greater than or equal the given value."""
  bankAccNumber_gte: String

  """All values containing the given string."""
  bankAccNumber_contains: String

  """All values not containing the given string."""
  bankAccNumber_not_contains: String

  """All values starting with the given string."""
  bankAccNumber_starts_with: String

  """All values not starting with the given string."""
  bankAccNumber_not_starts_with: String

  """All values ending with the given string."""
  bankAccNumber_ends_with: String

  """All values not ending with the given string."""
  bankAccNumber_not_ends_with: String
  bankAccName: String

  """All values that are not equal to given value."""
  bankAccName_not: String

  """All values that are contained in given list."""
  bankAccName_in: [String!]

  """All values that are not contained in given list."""
  bankAccName_not_in: [String!]

  """All values less than the given value."""
  bankAccName_lt: String

  """All values less than or equal the given value."""
  bankAccName_lte: String

  """All values greater than the given value."""
  bankAccName_gt: String

  """All values greater than or equal the given value."""
  bankAccName_gte: String

  """All values containing the given string."""
  bankAccName_contains: String

  """All values not containing the given string."""
  bankAccName_not_contains: String

  """All values starting with the given string."""
  bankAccName_starts_with: String

  """All values not starting with the given string."""
  bankAccName_not_starts_with: String

  """All values ending with the given string."""
  bankAccName_ends_with: String

  """All values not ending with the given string."""
  bankAccName_not_ends_with: String
  bankName: String

  """All values that are not equal to given value."""
  bankName_not: String

  """All values that are contained in given list."""
  bankName_in: [String!]

  """All values that are not contained in given list."""
  bankName_not_in: [String!]

  """All values less than the given value."""
  bankName_lt: String

  """All values less than or equal the given value."""
  bankName_lte: String

  """All values greater than the given value."""
  bankName_gt: String

  """All values greater than or equal the given value."""
  bankName_gte: String

  """All values containing the given string."""
  bankName_contains: String

  """All values not containing the given string."""
  bankName_not_contains: String

  """All values starting with the given string."""
  bankName_starts_with: String

  """All values not starting with the given string."""
  bankName_not_starts_with: String

  """All values ending with the given string."""
  bankName_ends_with: String

  """All values not ending with the given string."""
  bankName_not_ends_with: String
  bankBranch: String

  """All values that are not equal to given value."""
  bankBranch_not: String

  """All values that are contained in given list."""
  bankBranch_in: [String!]

  """All values that are not contained in given list."""
  bankBranch_not_in: [String!]

  """All values less than the given value."""
  bankBranch_lt: String

  """All values less than or equal the given value."""
  bankBranch_lte: String

  """All values greater than the given value."""
  bankBranch_gt: String

  """All values greater than or equal the given value."""
  bankBranch_gte: String

  """All values containing the given string."""
  bankBranch_contains: String

  """All values not containing the given string."""
  bankBranch_not_contains: String

  """All values starting with the given string."""
  bankBranch_starts_with: String

  """All values not starting with the given string."""
  bankBranch_not_starts_with: String

  """All values ending with the given string."""
  bankBranch_ends_with: String

  """All values not ending with the given string."""
  bankBranch_not_ends_with: String
  swiftCode: String

  """All values that are not equal to given value."""
  swiftCode_not: String

  """All values that are contained in given list."""
  swiftCode_in: [String!]

  """All values that are not contained in given list."""
  swiftCode_not_in: [String!]

  """All values less than the given value."""
  swiftCode_lt: String

  """All values less than or equal the given value."""
  swiftCode_lte: String

  """All values greater than the given value."""
  swiftCode_gt: String

  """All values greater than or equal the given value."""
  swiftCode_gte: String

  """All values containing the given string."""
  swiftCode_contains: String

  """All values not containing the given string."""
  swiftCode_not_contains: String

  """All values starting with the given string."""
  swiftCode_starts_with: String

  """All values not starting with the given string."""
  swiftCode_not_starts_with: String

  """All values ending with the given string."""
  swiftCode_ends_with: String

  """All values not ending with the given string."""
  swiftCode_not_ends_with: String
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  owner_every: AssignmentWhereInput
  owner_some: AssignmentWhereInput
  owner_none: AssignmentWhereInput
  businessCover: MediaWhereInput
  businessAvatar: MediaWhereInput
  businessAddress: AddressWhereInput
  socialNumberImages_every: MediaWhereInput
  socialNumberImages_some: MediaWhereInput
  socialNumberImages_none: MediaWhereInput
  businessLicenseImages_every: MediaWhereInput
  businessLicenseImages_some: MediaWhereInput
  businessLicenseImages_none: MediaWhereInput
  products_every: ProductRetailerWhereInput
  products_some: ProductRetailerWhereInput
  products_none: ProductRetailerWhereInput
}

input RetailerWhereUniqueInput {
  id: ID
  businessName: String
  businessLink: String
}

type Review implements Node {
  id: ID!
  _version: Int!
  productId: String
  user: User
  title: String!
  body: String!
  stars: Int!
  contentMedia(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  id: ID
  _version: Int
  productId: String
  title: String!
  body: String!
  stars: Int!
  user: UserCreateOneWithoutReviewsInput
  contentMedia: MediaCreateManyInput
}

input ReviewCreateManyWithoutUserInput {
  create: [ReviewCreateWithoutUserInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutUserInput {
  id: ID
  _version: Int
  productId: String
  title: String!
  body: String!
  stars: Int!
  contentMedia: MediaCreateManyInput
}

"""An edge in a connection."""
type ReviewEdge {
  """The item at the end of the edge."""
  node: Review!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  productId_ASC
  productId_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  stars_ASC
  stars_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReviewPreviousValues {
  id: ID!
  _version: Int!
  productId: String
  title: String!
  body: String!
  stars: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ReviewScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  productId: String

  """All values that are not equal to given value."""
  productId_not: String

  """All values that are contained in given list."""
  productId_in: [String!]

  """All values that are not contained in given list."""
  productId_not_in: [String!]

  """All values less than the given value."""
  productId_lt: String

  """All values less than or equal the given value."""
  productId_lte: String

  """All values greater than the given value."""
  productId_gt: String

  """All values greater than or equal the given value."""
  productId_gte: String

  """All values containing the given string."""
  productId_contains: String

  """All values not containing the given string."""
  productId_not_contains: String

  """All values starting with the given string."""
  productId_starts_with: String

  """All values not starting with the given string."""
  productId_not_starts_with: String

  """All values ending with the given string."""
  productId_ends_with: String

  """All values not ending with the given string."""
  productId_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  stars: Int

  """All values that are not equal to given value."""
  stars_not: Int

  """All values that are contained in given list."""
  stars_in: [Int!]

  """All values that are not contained in given list."""
  stars_not_in: [Int!]

  """All values less than the given value."""
  stars_lt: Int

  """All values less than or equal the given value."""
  stars_lte: Int

  """All values greater than the given value."""
  stars_gt: Int

  """All values greater than or equal the given value."""
  stars_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
}

input ReviewUpdateInput {
  _version: Int
  productId: String
  title: String
  body: String
  stars: Int
  user: UserUpdateOneWithoutReviewsInput
  contentMedia: MediaUpdateManyInput
}

input ReviewUpdateManyDataInput {
  _version: Int
  productId: String
  title: String
  body: String
  stars: Int
}

input ReviewUpdateManyMutationInput {
  _version: Int
  productId: String
  title: String
  body: String
  stars: Int
}

input ReviewUpdateManyWithoutUserInput {
  create: [ReviewCreateWithoutUserInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [ReviewScalarWhereInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutUserInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyDataInput!
}

input ReviewUpdateWithoutUserDataInput {
  _version: Int
  productId: String
  title: String
  body: String
  stars: Int
  contentMedia: MediaUpdateManyInput
}

input ReviewUpdateWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutUserDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutUserDataInput!
  create: ReviewCreateWithoutUserInput!
}

input ReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  productId: String

  """All values that are not equal to given value."""
  productId_not: String

  """All values that are contained in given list."""
  productId_in: [String!]

  """All values that are not contained in given list."""
  productId_not_in: [String!]

  """All values less than the given value."""
  productId_lt: String

  """All values less than or equal the given value."""
  productId_lte: String

  """All values greater than the given value."""
  productId_gt: String

  """All values greater than or equal the given value."""
  productId_gte: String

  """All values containing the given string."""
  productId_contains: String

  """All values not containing the given string."""
  productId_not_contains: String

  """All values starting with the given string."""
  productId_starts_with: String

  """All values not starting with the given string."""
  productId_not_starts_with: String

  """All values ending with the given string."""
  productId_ends_with: String

  """All values not ending with the given string."""
  productId_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  stars: Int

  """All values that are not equal to given value."""
  stars_not: Int

  """All values that are contained in given list."""
  stars_in: [Int!]

  """All values that are not contained in given list."""
  stars_not_in: [Int!]

  """All values less than the given value."""
  stars_lt: Int

  """All values less than or equal the given value."""
  stars_lte: Int

  """All values greater than the given value."""
  stars_gt: Int

  """All values greater than or equal the given value."""
  stars_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  contentMedia_every: MediaWhereInput
  contentMedia_some: MediaWhereInput
  contentMedia_none: MediaWhereInput
}

input ReviewWhereUniqueInput {
  id: ID
}

type Role implements Node {
  id: ID!
  _version: Int!
  name: String
  description: String
  type: String
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  id: ID
  _version: Int
  name: String
  description: String
  type: String
  permissions: PermissionCreateManyInput
}

input RoleCreateManyInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RolePreviousValues {
  id: ID!
  _version: Int!
  name: String
  description: String
  type: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RoleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateDataInput {
  _version: Int
  name: String
  description: String
  type: String
  permissions: PermissionUpdateManyInput
}

input RoleUpdateInput {
  _version: Int
  name: String
  description: String
  type: String
  permissions: PermissionUpdateManyInput
}

input RoleUpdateManyDataInput {
  _version: Int
  name: String
  description: String
  type: String
}

input RoleUpdateManyInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueNestedInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleScalarWhereInput!]
  upsert: [RoleUpsertWithWhereUniqueNestedInput!]
}

input RoleUpdateManyMutationInput {
  _version: Int
  name: String
  description: String
  type: String
}

input RoleUpdateManyWithWhereNestedInput {
  where: RoleScalarWhereInput!
  data: RoleUpdateManyDataInput!
}

input RoleUpdateWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateDataInput!
}

input RoleUpsertWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateDataInput!
  create: RoleCreateInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  permissions_every: PermissionWhereInput
  permissions_some: PermissionWhereInput
  permissions_none: PermissionWhereInput
}

input RoleWhereUniqueInput {
  id: ID
  name: String
}

type SecurityAnswer implements Node {
  id: ID!
  _version: Int!
  answer: String
  user: User
  securityQuestion: SecurityQuestion
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SecurityAnswerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SecurityAnswerEdge]!
  aggregate: AggregateSecurityAnswer!
}

input SecurityAnswerCreateInput {
  id: ID
  _version: Int
  answer: String
  user: UserCreateOneWithoutSecurityAnswersInput
  securityQuestion: SecurityQuestionCreateOneWithoutSecurityAnswersInput
}

input SecurityAnswerCreateManyWithoutSecurityQuestionInput {
  create: [SecurityAnswerCreateWithoutSecurityQuestionInput!]
  connect: [SecurityAnswerWhereUniqueInput!]
}

input SecurityAnswerCreateManyWithoutUserInput {
  create: [SecurityAnswerCreateWithoutUserInput!]
  connect: [SecurityAnswerWhereUniqueInput!]
}

input SecurityAnswerCreateWithoutSecurityQuestionInput {
  id: ID
  _version: Int
  answer: String
  user: UserCreateOneWithoutSecurityAnswersInput
}

input SecurityAnswerCreateWithoutUserInput {
  id: ID
  _version: Int
  answer: String
  securityQuestion: SecurityQuestionCreateOneWithoutSecurityAnswersInput
}

"""An edge in a connection."""
type SecurityAnswerEdge {
  """The item at the end of the edge."""
  node: SecurityAnswer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SecurityAnswerOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  answer_ASC
  answer_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SecurityAnswerPreviousValues {
  id: ID!
  _version: Int!
  answer: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SecurityAnswerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityAnswerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityAnswerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityAnswerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  answer: String

  """All values that are not equal to given value."""
  answer_not: String

  """All values that are contained in given list."""
  answer_in: [String!]

  """All values that are not contained in given list."""
  answer_not_in: [String!]

  """All values less than the given value."""
  answer_lt: String

  """All values less than or equal the given value."""
  answer_lte: String

  """All values greater than the given value."""
  answer_gt: String

  """All values greater than or equal the given value."""
  answer_gte: String

  """All values containing the given string."""
  answer_contains: String

  """All values not containing the given string."""
  answer_not_contains: String

  """All values starting with the given string."""
  answer_starts_with: String

  """All values not starting with the given string."""
  answer_not_starts_with: String

  """All values ending with the given string."""
  answer_ends_with: String

  """All values not ending with the given string."""
  answer_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type SecurityAnswerSubscriptionPayload {
  mutation: MutationType!
  node: SecurityAnswer
  updatedFields: [String!]
  previousValues: SecurityAnswerPreviousValues
}

input SecurityAnswerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityAnswerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityAnswerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityAnswerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SecurityAnswerWhereInput
}

input SecurityAnswerUpdateInput {
  _version: Int
  answer: String
  user: UserUpdateOneWithoutSecurityAnswersInput
  securityQuestion: SecurityQuestionUpdateOneWithoutSecurityAnswersInput
}

input SecurityAnswerUpdateManyDataInput {
  _version: Int
  answer: String
}

input SecurityAnswerUpdateManyMutationInput {
  _version: Int
  answer: String
}

input SecurityAnswerUpdateManyWithoutSecurityQuestionInput {
  create: [SecurityAnswerCreateWithoutSecurityQuestionInput!]
  connect: [SecurityAnswerWhereUniqueInput!]
  set: [SecurityAnswerWhereUniqueInput!]
  disconnect: [SecurityAnswerWhereUniqueInput!]
  delete: [SecurityAnswerWhereUniqueInput!]
  update: [SecurityAnswerUpdateWithWhereUniqueWithoutSecurityQuestionInput!]
  updateMany: [SecurityAnswerUpdateManyWithWhereNestedInput!]
  deleteMany: [SecurityAnswerScalarWhereInput!]
  upsert: [SecurityAnswerUpsertWithWhereUniqueWithoutSecurityQuestionInput!]
}

input SecurityAnswerUpdateManyWithoutUserInput {
  create: [SecurityAnswerCreateWithoutUserInput!]
  connect: [SecurityAnswerWhereUniqueInput!]
  set: [SecurityAnswerWhereUniqueInput!]
  disconnect: [SecurityAnswerWhereUniqueInput!]
  delete: [SecurityAnswerWhereUniqueInput!]
  update: [SecurityAnswerUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SecurityAnswerUpdateManyWithWhereNestedInput!]
  deleteMany: [SecurityAnswerScalarWhereInput!]
  upsert: [SecurityAnswerUpsertWithWhereUniqueWithoutUserInput!]
}

input SecurityAnswerUpdateManyWithWhereNestedInput {
  where: SecurityAnswerScalarWhereInput!
  data: SecurityAnswerUpdateManyDataInput!
}

input SecurityAnswerUpdateWithoutSecurityQuestionDataInput {
  _version: Int
  answer: String
  user: UserUpdateOneWithoutSecurityAnswersInput
}

input SecurityAnswerUpdateWithoutUserDataInput {
  _version: Int
  answer: String
  securityQuestion: SecurityQuestionUpdateOneWithoutSecurityAnswersInput
}

input SecurityAnswerUpdateWithWhereUniqueWithoutSecurityQuestionInput {
  where: SecurityAnswerWhereUniqueInput!
  data: SecurityAnswerUpdateWithoutSecurityQuestionDataInput!
}

input SecurityAnswerUpdateWithWhereUniqueWithoutUserInput {
  where: SecurityAnswerWhereUniqueInput!
  data: SecurityAnswerUpdateWithoutUserDataInput!
}

input SecurityAnswerUpsertWithWhereUniqueWithoutSecurityQuestionInput {
  where: SecurityAnswerWhereUniqueInput!
  update: SecurityAnswerUpdateWithoutSecurityQuestionDataInput!
  create: SecurityAnswerCreateWithoutSecurityQuestionInput!
}

input SecurityAnswerUpsertWithWhereUniqueWithoutUserInput {
  where: SecurityAnswerWhereUniqueInput!
  update: SecurityAnswerUpdateWithoutUserDataInput!
  create: SecurityAnswerCreateWithoutUserInput!
}

input SecurityAnswerWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityAnswerWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityAnswerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityAnswerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  answer: String

  """All values that are not equal to given value."""
  answer_not: String

  """All values that are contained in given list."""
  answer_in: [String!]

  """All values that are not contained in given list."""
  answer_not_in: [String!]

  """All values less than the given value."""
  answer_lt: String

  """All values less than or equal the given value."""
  answer_lte: String

  """All values greater than the given value."""
  answer_gt: String

  """All values greater than or equal the given value."""
  answer_gte: String

  """All values containing the given string."""
  answer_contains: String

  """All values not containing the given string."""
  answer_not_contains: String

  """All values starting with the given string."""
  answer_starts_with: String

  """All values not starting with the given string."""
  answer_not_starts_with: String

  """All values ending with the given string."""
  answer_ends_with: String

  """All values not ending with the given string."""
  answer_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  securityQuestion: SecurityQuestionWhereInput
}

input SecurityAnswerWhereUniqueInput {
  id: ID
}

type SecurityQuestion implements Node {
  id: ID!
  _version: Int!
  question: String
  securityAnswers(where: SecurityAnswerWhereInput, orderBy: SecurityAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SecurityAnswer!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SecurityQuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SecurityQuestionEdge]!
  aggregate: AggregateSecurityQuestion!
}

input SecurityQuestionCreateInput {
  id: ID
  _version: Int
  question: String
  securityAnswers: SecurityAnswerCreateManyWithoutSecurityQuestionInput
}

input SecurityQuestionCreateOneWithoutSecurityAnswersInput {
  create: SecurityQuestionCreateWithoutSecurityAnswersInput
  connect: SecurityQuestionWhereUniqueInput
}

input SecurityQuestionCreateWithoutSecurityAnswersInput {
  id: ID
  _version: Int
  question: String
}

"""An edge in a connection."""
type SecurityQuestionEdge {
  """The item at the end of the edge."""
  node: SecurityQuestion!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SecurityQuestionOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  question_ASC
  question_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SecurityQuestionPreviousValues {
  id: ID!
  _version: Int!
  question: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SecurityQuestionSubscriptionPayload {
  mutation: MutationType!
  node: SecurityQuestion
  updatedFields: [String!]
  previousValues: SecurityQuestionPreviousValues
}

input SecurityQuestionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityQuestionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityQuestionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityQuestionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SecurityQuestionWhereInput
}

input SecurityQuestionUpdateInput {
  _version: Int
  question: String
  securityAnswers: SecurityAnswerUpdateManyWithoutSecurityQuestionInput
}

input SecurityQuestionUpdateManyMutationInput {
  _version: Int
  question: String
}

input SecurityQuestionUpdateOneWithoutSecurityAnswersInput {
  create: SecurityQuestionCreateWithoutSecurityAnswersInput
  connect: SecurityQuestionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SecurityQuestionUpdateWithoutSecurityAnswersDataInput
  upsert: SecurityQuestionUpsertWithoutSecurityAnswersInput
}

input SecurityQuestionUpdateWithoutSecurityAnswersDataInput {
  _version: Int
  question: String
}

input SecurityQuestionUpsertWithoutSecurityAnswersInput {
  update: SecurityQuestionUpdateWithoutSecurityAnswersDataInput!
  create: SecurityQuestionCreateWithoutSecurityAnswersInput!
}

input SecurityQuestionWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityQuestionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityQuestionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityQuestionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  question: String

  """All values that are not equal to given value."""
  question_not: String

  """All values that are contained in given list."""
  question_in: [String!]

  """All values that are not contained in given list."""
  question_not_in: [String!]

  """All values less than the given value."""
  question_lt: String

  """All values less than or equal the given value."""
  question_lte: String

  """All values greater than the given value."""
  question_gt: String

  """All values greater than or equal the given value."""
  question_gte: String

  """All values containing the given string."""
  question_contains: String

  """All values not containing the given string."""
  question_not_contains: String

  """All values starting with the given string."""
  question_starts_with: String

  """All values not starting with the given string."""
  question_not_starts_with: String

  """All values ending with the given string."""
  question_ends_with: String

  """All values not ending with the given string."""
  question_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  securityAnswers_every: SecurityAnswerWhereInput
  securityAnswers_some: SecurityAnswerWhereInput
  securityAnswers_none: SecurityAnswerWhereInput
}

input SecurityQuestionWhereUniqueInput {
  id: ID
}

type Subscription {
  securityQuestion(where: SecurityQuestionSubscriptionWhereInput): SecurityQuestionSubscriptionPayload
  securityAnswer(where: SecurityAnswerSubscriptionWhereInput): SecurityAnswerSubscriptionPayload
  assignment(where: AssignmentSubscriptionWhereInput): AssignmentSubscriptionPayload
  policy(where: PolicySubscriptionWhereInput): PolicySubscriptionPayload
  manufacturer(where: ManufacturerSubscriptionWhereInput): ManufacturerSubscriptionPayload
  brand(where: BrandSubscriptionWhereInput): BrandSubscriptionPayload
  productTemplate(where: ProductTemplateSubscriptionWhereInput): ProductTemplateSubscriptionPayload
  productAttribute(where: ProductAttributeSubscriptionWhereInput): ProductAttributeSubscriptionPayload
  productAttributeValue(where: ProductAttributeValueSubscriptionWhereInput): ProductAttributeValueSubscriptionPayload
  productRetailer(where: ProductRetailerSubscriptionWhereInput): ProductRetailerSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  supportCase(where: SupportCaseSubscriptionWhereInput): SupportCaseSubscriptionPayload
  supportCorrespondence(where: SupportCorrespondenceSubscriptionWhereInput): SupportCorrespondenceSubscriptionPayload
  language(where: LanguageSubscriptionWhereInput): LanguageSubscriptionPayload
  trans_Catalog(where: Trans_CatalogSubscriptionWhereInput): Trans_CatalogSubscriptionPayload
  trans_Brand(where: Trans_BrandSubscriptionWhereInput): Trans_BrandSubscriptionPayload
  productOption(where: ProductOptionSubscriptionWhereInput): ProductOptionSubscriptionPayload
  supportStatus(where: SupportStatusSubscriptionWhereInput): SupportStatusSubscriptionPayload
  supportCategory(where: SupportCategorySubscriptionWhereInput): SupportCategorySubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  catalog(where: CatalogSubscriptionWhereInput): CatalogSubscriptionPayload
  permission(where: PermissionSubscriptionWhereInput): PermissionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  media(where: MediaSubscriptionWhereInput): MediaSubscriptionPayload
  retailer(where: RetailerSubscriptionWhereInput): RetailerSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  description(where: DescriptionSubscriptionWhereInput): DescriptionSubscriptionPayload
  supportSeverity(where: SupportSeveritySubscriptionWhereInput): SupportSeveritySubscriptionPayload
}

type SupportCase implements Node {
  id: ID!
  _version: Int!
  subject: String
  status: SupportStatus
  severity: SupportSeverity
  catergory(where: SupportCategoryWhereInput, orderBy: SupportCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportCategory!]
  openedByUser: User
  updatedByUser(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  targetIds: String
  correspondences(where: SupportCorrespondenceWhereInput, orderBy: SupportCorrespondenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportCorrespondence!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SupportCaseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SupportCaseEdge]!
  aggregate: AggregateSupportCase!
}

input SupportCaseCreateInput {
  id: ID
  _version: Int
  subject: String
  targetIds: String
  status: SupportStatusCreateOneInput
  severity: SupportSeverityCreateOneInput
  catergory: SupportCategoryCreateManyInput
  openedByUser: UserCreateOneInput
  updatedByUser: UserCreateManyInput
  correspondences: SupportCorrespondenceCreateManyWithoutSupportCaseInput
}

input SupportCaseCreateOneWithoutCorrespondencesInput {
  create: SupportCaseCreateWithoutCorrespondencesInput
  connect: SupportCaseWhereUniqueInput
}

input SupportCaseCreateWithoutCorrespondencesInput {
  id: ID
  _version: Int
  subject: String
  targetIds: String
  status: SupportStatusCreateOneInput
  severity: SupportSeverityCreateOneInput
  catergory: SupportCategoryCreateManyInput
  openedByUser: UserCreateOneInput
  updatedByUser: UserCreateManyInput
}

"""An edge in a connection."""
type SupportCaseEdge {
  """The item at the end of the edge."""
  node: SupportCase!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SupportCaseOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  subject_ASC
  subject_DESC
  targetIds_ASC
  targetIds_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SupportCasePreviousValues {
  id: ID!
  _version: Int!
  subject: String
  targetIds: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SupportCaseSubscriptionPayload {
  mutation: MutationType!
  node: SupportCase
  updatedFields: [String!]
  previousValues: SupportCasePreviousValues
}

input SupportCaseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportCaseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportCaseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportCaseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SupportCaseWhereInput
}

input SupportCaseUpdateInput {
  _version: Int
  subject: String
  targetIds: String
  status: SupportStatusUpdateOneInput
  severity: SupportSeverityUpdateOneInput
  catergory: SupportCategoryUpdateManyInput
  openedByUser: UserUpdateOneInput
  updatedByUser: UserUpdateManyInput
  correspondences: SupportCorrespondenceUpdateManyWithoutSupportCaseInput
}

input SupportCaseUpdateManyMutationInput {
  _version: Int
  subject: String
  targetIds: String
}

input SupportCaseUpdateOneWithoutCorrespondencesInput {
  create: SupportCaseCreateWithoutCorrespondencesInput
  connect: SupportCaseWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SupportCaseUpdateWithoutCorrespondencesDataInput
  upsert: SupportCaseUpsertWithoutCorrespondencesInput
}

input SupportCaseUpdateWithoutCorrespondencesDataInput {
  _version: Int
  subject: String
  targetIds: String
  status: SupportStatusUpdateOneInput
  severity: SupportSeverityUpdateOneInput
  catergory: SupportCategoryUpdateManyInput
  openedByUser: UserUpdateOneInput
  updatedByUser: UserUpdateManyInput
}

input SupportCaseUpsertWithoutCorrespondencesInput {
  update: SupportCaseUpdateWithoutCorrespondencesDataInput!
  create: SupportCaseCreateWithoutCorrespondencesInput!
}

input SupportCaseWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportCaseWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportCaseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportCaseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  subject: String

  """All values that are not equal to given value."""
  subject_not: String

  """All values that are contained in given list."""
  subject_in: [String!]

  """All values that are not contained in given list."""
  subject_not_in: [String!]

  """All values less than the given value."""
  subject_lt: String

  """All values less than or equal the given value."""
  subject_lte: String

  """All values greater than the given value."""
  subject_gt: String

  """All values greater than or equal the given value."""
  subject_gte: String

  """All values containing the given string."""
  subject_contains: String

  """All values not containing the given string."""
  subject_not_contains: String

  """All values starting with the given string."""
  subject_starts_with: String

  """All values not starting with the given string."""
  subject_not_starts_with: String

  """All values ending with the given string."""
  subject_ends_with: String

  """All values not ending with the given string."""
  subject_not_ends_with: String
  targetIds: String

  """All values that are not equal to given value."""
  targetIds_not: String

  """All values that are contained in given list."""
  targetIds_in: [String!]

  """All values that are not contained in given list."""
  targetIds_not_in: [String!]

  """All values less than the given value."""
  targetIds_lt: String

  """All values less than or equal the given value."""
  targetIds_lte: String

  """All values greater than the given value."""
  targetIds_gt: String

  """All values greater than or equal the given value."""
  targetIds_gte: String

  """All values containing the given string."""
  targetIds_contains: String

  """All values not containing the given string."""
  targetIds_not_contains: String

  """All values starting with the given string."""
  targetIds_starts_with: String

  """All values not starting with the given string."""
  targetIds_not_starts_with: String

  """All values ending with the given string."""
  targetIds_ends_with: String

  """All values not ending with the given string."""
  targetIds_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  status: SupportStatusWhereInput
  severity: SupportSeverityWhereInput
  catergory_every: SupportCategoryWhereInput
  catergory_some: SupportCategoryWhereInput
  catergory_none: SupportCategoryWhereInput
  openedByUser: UserWhereInput
  updatedByUser_every: UserWhereInput
  updatedByUser_some: UserWhereInput
  updatedByUser_none: UserWhereInput
  correspondences_every: SupportCorrespondenceWhereInput
  correspondences_some: SupportCorrespondenceWhereInput
  correspondences_none: SupportCorrespondenceWhereInput
}

input SupportCaseWhereUniqueInput {
  id: ID
}

type SupportCategory implements Node {
  id: ID!
  _version: Int!
  name: String
  parentId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SupportCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SupportCategoryEdge]!
  aggregate: AggregateSupportCategory!
}

input SupportCategoryCreateInput {
  id: ID
  _version: Int
  name: String
  parentId: String
}

input SupportCategoryCreateManyInput {
  create: [SupportCategoryCreateInput!]
  connect: [SupportCategoryWhereUniqueInput!]
}

"""An edge in a connection."""
type SupportCategoryEdge {
  """The item at the end of the edge."""
  node: SupportCategory!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SupportCategoryOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  parentId_ASC
  parentId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SupportCategoryPreviousValues {
  id: ID!
  _version: Int!
  name: String
  parentId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SupportCategoryScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportCategoryScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportCategoryScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportCategoryScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  parentId: String

  """All values that are not equal to given value."""
  parentId_not: String

  """All values that are contained in given list."""
  parentId_in: [String!]

  """All values that are not contained in given list."""
  parentId_not_in: [String!]

  """All values less than the given value."""
  parentId_lt: String

  """All values less than or equal the given value."""
  parentId_lte: String

  """All values greater than the given value."""
  parentId_gt: String

  """All values greater than or equal the given value."""
  parentId_gte: String

  """All values containing the given string."""
  parentId_contains: String

  """All values not containing the given string."""
  parentId_not_contains: String

  """All values starting with the given string."""
  parentId_starts_with: String

  """All values not starting with the given string."""
  parentId_not_starts_with: String

  """All values ending with the given string."""
  parentId_ends_with: String

  """All values not ending with the given string."""
  parentId_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type SupportCategorySubscriptionPayload {
  mutation: MutationType!
  node: SupportCategory
  updatedFields: [String!]
  previousValues: SupportCategoryPreviousValues
}

input SupportCategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportCategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportCategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportCategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SupportCategoryWhereInput
}

input SupportCategoryUpdateDataInput {
  _version: Int
  name: String
  parentId: String
}

input SupportCategoryUpdateInput {
  _version: Int
  name: String
  parentId: String
}

input SupportCategoryUpdateManyDataInput {
  _version: Int
  name: String
  parentId: String
}

input SupportCategoryUpdateManyInput {
  create: [SupportCategoryCreateInput!]
  connect: [SupportCategoryWhereUniqueInput!]
  set: [SupportCategoryWhereUniqueInput!]
  disconnect: [SupportCategoryWhereUniqueInput!]
  delete: [SupportCategoryWhereUniqueInput!]
  update: [SupportCategoryUpdateWithWhereUniqueNestedInput!]
  updateMany: [SupportCategoryUpdateManyWithWhereNestedInput!]
  deleteMany: [SupportCategoryScalarWhereInput!]
  upsert: [SupportCategoryUpsertWithWhereUniqueNestedInput!]
}

input SupportCategoryUpdateManyMutationInput {
  _version: Int
  name: String
  parentId: String
}

input SupportCategoryUpdateManyWithWhereNestedInput {
  where: SupportCategoryScalarWhereInput!
  data: SupportCategoryUpdateManyDataInput!
}

input SupportCategoryUpdateWithWhereUniqueNestedInput {
  where: SupportCategoryWhereUniqueInput!
  data: SupportCategoryUpdateDataInput!
}

input SupportCategoryUpsertWithWhereUniqueNestedInput {
  where: SupportCategoryWhereUniqueInput!
  update: SupportCategoryUpdateDataInput!
  create: SupportCategoryCreateInput!
}

input SupportCategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportCategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportCategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportCategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  parentId: String

  """All values that are not equal to given value."""
  parentId_not: String

  """All values that are contained in given list."""
  parentId_in: [String!]

  """All values that are not contained in given list."""
  parentId_not_in: [String!]

  """All values less than the given value."""
  parentId_lt: String

  """All values less than or equal the given value."""
  parentId_lte: String

  """All values greater than the given value."""
  parentId_gt: String

  """All values greater than or equal the given value."""
  parentId_gte: String

  """All values containing the given string."""
  parentId_contains: String

  """All values not containing the given string."""
  parentId_not_contains: String

  """All values starting with the given string."""
  parentId_starts_with: String

  """All values not starting with the given string."""
  parentId_not_starts_with: String

  """All values ending with the given string."""
  parentId_ends_with: String

  """All values not ending with the given string."""
  parentId_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input SupportCategoryWhereUniqueInput {
  id: ID
  name: String
}

type SupportCorrespondence implements Node {
  id: ID!
  _version: Int!
  supportCase: SupportCase
  respondedBy: User
  note: String
  data: Json
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SupportCorrespondenceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SupportCorrespondenceEdge]!
  aggregate: AggregateSupportCorrespondence!
}

input SupportCorrespondenceCreateInput {
  id: ID
  _version: Int
  note: String
  data: Json
  supportCase: SupportCaseCreateOneWithoutCorrespondencesInput
  respondedBy: UserCreateOneInput
}

input SupportCorrespondenceCreateManyWithoutSupportCaseInput {
  create: [SupportCorrespondenceCreateWithoutSupportCaseInput!]
  connect: [SupportCorrespondenceWhereUniqueInput!]
}

input SupportCorrespondenceCreateWithoutSupportCaseInput {
  id: ID
  _version: Int
  note: String
  data: Json
  respondedBy: UserCreateOneInput
}

"""An edge in a connection."""
type SupportCorrespondenceEdge {
  """The item at the end of the edge."""
  node: SupportCorrespondence!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SupportCorrespondenceOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  note_ASC
  note_DESC
  data_ASC
  data_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SupportCorrespondencePreviousValues {
  id: ID!
  _version: Int!
  note: String
  data: Json
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SupportCorrespondenceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportCorrespondenceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportCorrespondenceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportCorrespondenceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type SupportCorrespondenceSubscriptionPayload {
  mutation: MutationType!
  node: SupportCorrespondence
  updatedFields: [String!]
  previousValues: SupportCorrespondencePreviousValues
}

input SupportCorrespondenceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportCorrespondenceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportCorrespondenceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportCorrespondenceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SupportCorrespondenceWhereInput
}

input SupportCorrespondenceUpdateInput {
  _version: Int
  note: String
  data: Json
  supportCase: SupportCaseUpdateOneWithoutCorrespondencesInput
  respondedBy: UserUpdateOneInput
}

input SupportCorrespondenceUpdateManyDataInput {
  _version: Int
  note: String
  data: Json
}

input SupportCorrespondenceUpdateManyMutationInput {
  _version: Int
  note: String
  data: Json
}

input SupportCorrespondenceUpdateManyWithoutSupportCaseInput {
  create: [SupportCorrespondenceCreateWithoutSupportCaseInput!]
  connect: [SupportCorrespondenceWhereUniqueInput!]
  set: [SupportCorrespondenceWhereUniqueInput!]
  disconnect: [SupportCorrespondenceWhereUniqueInput!]
  delete: [SupportCorrespondenceWhereUniqueInput!]
  update: [SupportCorrespondenceUpdateWithWhereUniqueWithoutSupportCaseInput!]
  updateMany: [SupportCorrespondenceUpdateManyWithWhereNestedInput!]
  deleteMany: [SupportCorrespondenceScalarWhereInput!]
  upsert: [SupportCorrespondenceUpsertWithWhereUniqueWithoutSupportCaseInput!]
}

input SupportCorrespondenceUpdateManyWithWhereNestedInput {
  where: SupportCorrespondenceScalarWhereInput!
  data: SupportCorrespondenceUpdateManyDataInput!
}

input SupportCorrespondenceUpdateWithoutSupportCaseDataInput {
  _version: Int
  note: String
  data: Json
  respondedBy: UserUpdateOneInput
}

input SupportCorrespondenceUpdateWithWhereUniqueWithoutSupportCaseInput {
  where: SupportCorrespondenceWhereUniqueInput!
  data: SupportCorrespondenceUpdateWithoutSupportCaseDataInput!
}

input SupportCorrespondenceUpsertWithWhereUniqueWithoutSupportCaseInput {
  where: SupportCorrespondenceWhereUniqueInput!
  update: SupportCorrespondenceUpdateWithoutSupportCaseDataInput!
  create: SupportCorrespondenceCreateWithoutSupportCaseInput!
}

input SupportCorrespondenceWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportCorrespondenceWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportCorrespondenceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportCorrespondenceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  supportCase: SupportCaseWhereInput
  respondedBy: UserWhereInput
}

input SupportCorrespondenceWhereUniqueInput {
  id: ID
}

type SupportSeverity implements Node {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SupportSeverityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SupportSeverityEdge]!
  aggregate: AggregateSupportSeverity!
}

input SupportSeverityCreateInput {
  id: ID
  _version: Int
  name: String
}

input SupportSeverityCreateOneInput {
  create: SupportSeverityCreateInput
  connect: SupportSeverityWhereUniqueInput
}

"""An edge in a connection."""
type SupportSeverityEdge {
  """The item at the end of the edge."""
  node: SupportSeverity!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SupportSeverityOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SupportSeverityPreviousValues {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SupportSeveritySubscriptionPayload {
  mutation: MutationType!
  node: SupportSeverity
  updatedFields: [String!]
  previousValues: SupportSeverityPreviousValues
}

input SupportSeveritySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportSeveritySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportSeveritySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportSeveritySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SupportSeverityWhereInput
}

input SupportSeverityUpdateDataInput {
  _version: Int
  name: String
}

input SupportSeverityUpdateInput {
  _version: Int
  name: String
}

input SupportSeverityUpdateManyMutationInput {
  _version: Int
  name: String
}

input SupportSeverityUpdateOneInput {
  create: SupportSeverityCreateInput
  connect: SupportSeverityWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SupportSeverityUpdateDataInput
  upsert: SupportSeverityUpsertNestedInput
}

input SupportSeverityUpsertNestedInput {
  update: SupportSeverityUpdateDataInput!
  create: SupportSeverityCreateInput!
}

input SupportSeverityWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportSeverityWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportSeverityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportSeverityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input SupportSeverityWhereUniqueInput {
  id: ID
  name: String
}

type SupportStatus implements Node {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SupportStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SupportStatusEdge]!
  aggregate: AggregateSupportStatus!
}

input SupportStatusCreateInput {
  id: ID
  _version: Int
  name: String
}

input SupportStatusCreateOneInput {
  create: SupportStatusCreateInput
  connect: SupportStatusWhereUniqueInput
}

"""An edge in a connection."""
type SupportStatusEdge {
  """The item at the end of the edge."""
  node: SupportStatus!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SupportStatusOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SupportStatusPreviousValues {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SupportStatusSubscriptionPayload {
  mutation: MutationType!
  node: SupportStatus
  updatedFields: [String!]
  previousValues: SupportStatusPreviousValues
}

input SupportStatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportStatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportStatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportStatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SupportStatusWhereInput
}

input SupportStatusUpdateDataInput {
  _version: Int
  name: String
}

input SupportStatusUpdateInput {
  _version: Int
  name: String
}

input SupportStatusUpdateManyMutationInput {
  _version: Int
  name: String
}

input SupportStatusUpdateOneInput {
  create: SupportStatusCreateInput
  connect: SupportStatusWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SupportStatusUpdateDataInput
  upsert: SupportStatusUpsertNestedInput
}

input SupportStatusUpsertNestedInput {
  update: SupportStatusUpdateDataInput!
  create: SupportStatusCreateInput!
}

input SupportStatusWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportStatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportStatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportStatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input SupportStatusWhereUniqueInput {
  id: ID
  name: String
}

type Trans_Brand implements Node {
  id: ID!
  _version: Int!
  language: Language
  brand: Brand
  brandName: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type Trans_BrandConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [Trans_BrandEdge]!
  aggregate: AggregateTrans_Brand!
}

input Trans_BrandCreateInput {
  id: ID
  _version: Int
  brandName: String
  language: LanguageCreateOneWithoutTrans_brandInput
  brand: BrandCreateOneWithoutTrans_brandNameInput
}

input Trans_BrandCreateManyWithoutBrandInput {
  create: [Trans_BrandCreateWithoutBrandInput!]
  connect: [Trans_BrandWhereUniqueInput!]
}

input Trans_BrandCreateManyWithoutLanguageInput {
  create: [Trans_BrandCreateWithoutLanguageInput!]
  connect: [Trans_BrandWhereUniqueInput!]
}

input Trans_BrandCreateWithoutBrandInput {
  id: ID
  _version: Int
  brandName: String
  language: LanguageCreateOneWithoutTrans_brandInput
}

input Trans_BrandCreateWithoutLanguageInput {
  id: ID
  _version: Int
  brandName: String
  brand: BrandCreateOneWithoutTrans_brandNameInput
}

"""An edge in a connection."""
type Trans_BrandEdge {
  """The item at the end of the edge."""
  node: Trans_Brand!

  """A cursor for use in pagination."""
  cursor: String!
}

enum Trans_BrandOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  brandName_ASC
  brandName_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Trans_BrandPreviousValues {
  id: ID!
  _version: Int!
  brandName: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input Trans_BrandScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [Trans_BrandScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [Trans_BrandScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Trans_BrandScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  brandName: String

  """All values that are not equal to given value."""
  brandName_not: String

  """All values that are contained in given list."""
  brandName_in: [String!]

  """All values that are not contained in given list."""
  brandName_not_in: [String!]

  """All values less than the given value."""
  brandName_lt: String

  """All values less than or equal the given value."""
  brandName_lte: String

  """All values greater than the given value."""
  brandName_gt: String

  """All values greater than or equal the given value."""
  brandName_gte: String

  """All values containing the given string."""
  brandName_contains: String

  """All values not containing the given string."""
  brandName_not_contains: String

  """All values starting with the given string."""
  brandName_starts_with: String

  """All values not starting with the given string."""
  brandName_not_starts_with: String

  """All values ending with the given string."""
  brandName_ends_with: String

  """All values not ending with the given string."""
  brandName_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type Trans_BrandSubscriptionPayload {
  mutation: MutationType!
  node: Trans_Brand
  updatedFields: [String!]
  previousValues: Trans_BrandPreviousValues
}

input Trans_BrandSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [Trans_BrandSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [Trans_BrandSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Trans_BrandSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Trans_BrandWhereInput
}

input Trans_BrandUpdateInput {
  _version: Int
  brandName: String
  language: LanguageUpdateOneWithoutTrans_brandInput
  brand: BrandUpdateOneWithoutTrans_brandNameInput
}

input Trans_BrandUpdateManyDataInput {
  _version: Int
  brandName: String
}

input Trans_BrandUpdateManyMutationInput {
  _version: Int
  brandName: String
}

input Trans_BrandUpdateManyWithoutBrandInput {
  create: [Trans_BrandCreateWithoutBrandInput!]
  connect: [Trans_BrandWhereUniqueInput!]
  set: [Trans_BrandWhereUniqueInput!]
  disconnect: [Trans_BrandWhereUniqueInput!]
  delete: [Trans_BrandWhereUniqueInput!]
  update: [Trans_BrandUpdateWithWhereUniqueWithoutBrandInput!]
  updateMany: [Trans_BrandUpdateManyWithWhereNestedInput!]
  deleteMany: [Trans_BrandScalarWhereInput!]
  upsert: [Trans_BrandUpsertWithWhereUniqueWithoutBrandInput!]
}

input Trans_BrandUpdateManyWithoutLanguageInput {
  create: [Trans_BrandCreateWithoutLanguageInput!]
  connect: [Trans_BrandWhereUniqueInput!]
  set: [Trans_BrandWhereUniqueInput!]
  disconnect: [Trans_BrandWhereUniqueInput!]
  delete: [Trans_BrandWhereUniqueInput!]
  update: [Trans_BrandUpdateWithWhereUniqueWithoutLanguageInput!]
  updateMany: [Trans_BrandUpdateManyWithWhereNestedInput!]
  deleteMany: [Trans_BrandScalarWhereInput!]
  upsert: [Trans_BrandUpsertWithWhereUniqueWithoutLanguageInput!]
}

input Trans_BrandUpdateManyWithWhereNestedInput {
  where: Trans_BrandScalarWhereInput!
  data: Trans_BrandUpdateManyDataInput!
}

input Trans_BrandUpdateWithoutBrandDataInput {
  _version: Int
  brandName: String
  language: LanguageUpdateOneWithoutTrans_brandInput
}

input Trans_BrandUpdateWithoutLanguageDataInput {
  _version: Int
  brandName: String
  brand: BrandUpdateOneWithoutTrans_brandNameInput
}

input Trans_BrandUpdateWithWhereUniqueWithoutBrandInput {
  where: Trans_BrandWhereUniqueInput!
  data: Trans_BrandUpdateWithoutBrandDataInput!
}

input Trans_BrandUpdateWithWhereUniqueWithoutLanguageInput {
  where: Trans_BrandWhereUniqueInput!
  data: Trans_BrandUpdateWithoutLanguageDataInput!
}

input Trans_BrandUpsertWithWhereUniqueWithoutBrandInput {
  where: Trans_BrandWhereUniqueInput!
  update: Trans_BrandUpdateWithoutBrandDataInput!
  create: Trans_BrandCreateWithoutBrandInput!
}

input Trans_BrandUpsertWithWhereUniqueWithoutLanguageInput {
  where: Trans_BrandWhereUniqueInput!
  update: Trans_BrandUpdateWithoutLanguageDataInput!
  create: Trans_BrandCreateWithoutLanguageInput!
}

input Trans_BrandWhereInput {
  """Logical AND on all given filters."""
  AND: [Trans_BrandWhereInput!]

  """Logical OR on all given filters."""
  OR: [Trans_BrandWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Trans_BrandWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  brandName: String

  """All values that are not equal to given value."""
  brandName_not: String

  """All values that are contained in given list."""
  brandName_in: [String!]

  """All values that are not contained in given list."""
  brandName_not_in: [String!]

  """All values less than the given value."""
  brandName_lt: String

  """All values less than or equal the given value."""
  brandName_lte: String

  """All values greater than the given value."""
  brandName_gt: String

  """All values greater than or equal the given value."""
  brandName_gte: String

  """All values containing the given string."""
  brandName_contains: String

  """All values not containing the given string."""
  brandName_not_contains: String

  """All values starting with the given string."""
  brandName_starts_with: String

  """All values not starting with the given string."""
  brandName_not_starts_with: String

  """All values ending with the given string."""
  brandName_ends_with: String

  """All values not ending with the given string."""
  brandName_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  language: LanguageWhereInput
  brand: BrandWhereInput
}

input Trans_BrandWhereUniqueInput {
  id: ID
}

type Trans_Catalog implements Node {
  id: ID!
  _version: Int!
  language: Language
  catalog: Catalog
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type Trans_CatalogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [Trans_CatalogEdge]!
  aggregate: AggregateTrans_Catalog!
}

input Trans_CatalogCreateInput {
  id: ID
  _version: Int
  name: String
  language: LanguageCreateOneWithoutTrans_catalogInput
  catalog: CatalogCreateOneWithoutTrans_nameInput
}

input Trans_CatalogCreateManyWithoutCatalogInput {
  create: [Trans_CatalogCreateWithoutCatalogInput!]
  connect: [Trans_CatalogWhereUniqueInput!]
}

input Trans_CatalogCreateManyWithoutLanguageInput {
  create: [Trans_CatalogCreateWithoutLanguageInput!]
  connect: [Trans_CatalogWhereUniqueInput!]
}

input Trans_CatalogCreateWithoutCatalogInput {
  id: ID
  _version: Int
  name: String
  language: LanguageCreateOneWithoutTrans_catalogInput
}

input Trans_CatalogCreateWithoutLanguageInput {
  id: ID
  _version: Int
  name: String
  catalog: CatalogCreateOneWithoutTrans_nameInput
}

"""An edge in a connection."""
type Trans_CatalogEdge {
  """The item at the end of the edge."""
  node: Trans_Catalog!

  """A cursor for use in pagination."""
  cursor: String!
}

enum Trans_CatalogOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Trans_CatalogPreviousValues {
  id: ID!
  _version: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input Trans_CatalogScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [Trans_CatalogScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [Trans_CatalogScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Trans_CatalogScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type Trans_CatalogSubscriptionPayload {
  mutation: MutationType!
  node: Trans_Catalog
  updatedFields: [String!]
  previousValues: Trans_CatalogPreviousValues
}

input Trans_CatalogSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [Trans_CatalogSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [Trans_CatalogSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Trans_CatalogSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Trans_CatalogWhereInput
}

input Trans_CatalogUpdateInput {
  _version: Int
  name: String
  language: LanguageUpdateOneWithoutTrans_catalogInput
  catalog: CatalogUpdateOneWithoutTrans_nameInput
}

input Trans_CatalogUpdateManyDataInput {
  _version: Int
  name: String
}

input Trans_CatalogUpdateManyMutationInput {
  _version: Int
  name: String
}

input Trans_CatalogUpdateManyWithoutCatalogInput {
  create: [Trans_CatalogCreateWithoutCatalogInput!]
  connect: [Trans_CatalogWhereUniqueInput!]
  set: [Trans_CatalogWhereUniqueInput!]
  disconnect: [Trans_CatalogWhereUniqueInput!]
  delete: [Trans_CatalogWhereUniqueInput!]
  update: [Trans_CatalogUpdateWithWhereUniqueWithoutCatalogInput!]
  updateMany: [Trans_CatalogUpdateManyWithWhereNestedInput!]
  deleteMany: [Trans_CatalogScalarWhereInput!]
  upsert: [Trans_CatalogUpsertWithWhereUniqueWithoutCatalogInput!]
}

input Trans_CatalogUpdateManyWithoutLanguageInput {
  create: [Trans_CatalogCreateWithoutLanguageInput!]
  connect: [Trans_CatalogWhereUniqueInput!]
  set: [Trans_CatalogWhereUniqueInput!]
  disconnect: [Trans_CatalogWhereUniqueInput!]
  delete: [Trans_CatalogWhereUniqueInput!]
  update: [Trans_CatalogUpdateWithWhereUniqueWithoutLanguageInput!]
  updateMany: [Trans_CatalogUpdateManyWithWhereNestedInput!]
  deleteMany: [Trans_CatalogScalarWhereInput!]
  upsert: [Trans_CatalogUpsertWithWhereUniqueWithoutLanguageInput!]
}

input Trans_CatalogUpdateManyWithWhereNestedInput {
  where: Trans_CatalogScalarWhereInput!
  data: Trans_CatalogUpdateManyDataInput!
}

input Trans_CatalogUpdateWithoutCatalogDataInput {
  _version: Int
  name: String
  language: LanguageUpdateOneWithoutTrans_catalogInput
}

input Trans_CatalogUpdateWithoutLanguageDataInput {
  _version: Int
  name: String
  catalog: CatalogUpdateOneWithoutTrans_nameInput
}

<<<<<<< HEAD
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Trans_CatalogWhereInput
}

input Trans_CatalogUpdateInput {
  _version: Int
  name: String
  language: LanguageUpdateOneWithoutTrans_catalogInput
  catalog: CatalogUpdateOneWithoutTrans_nameInput
}

input Trans_CatalogUpdateManyDataInput {
  _version: Int
  name: String
}

input Trans_CatalogUpdateManyMutationInput {
  _version: Int
  name: String
}

input Trans_CatalogUpdateManyWithoutCatalogInput {
  create: [Trans_CatalogCreateWithoutCatalogInput!]
  connect: [Trans_CatalogWhereUniqueInput!]
  set: [Trans_CatalogWhereUniqueInput!]
  disconnect: [Trans_CatalogWhereUniqueInput!]
  delete: [Trans_CatalogWhereUniqueInput!]
  update: [Trans_CatalogUpdateWithWhereUniqueWithoutCatalogInput!]
  updateMany: [Trans_CatalogUpdateManyWithWhereNestedInput!]
  deleteMany: [Trans_CatalogScalarWhereInput!]
  upsert: [Trans_CatalogUpsertWithWhereUniqueWithoutCatalogInput!]
}

input Trans_CatalogUpdateManyWithoutLanguageInput {
  create: [Trans_CatalogCreateWithoutLanguageInput!]
  connect: [Trans_CatalogWhereUniqueInput!]
  set: [Trans_CatalogWhereUniqueInput!]
  disconnect: [Trans_CatalogWhereUniqueInput!]
  delete: [Trans_CatalogWhereUniqueInput!]
  update: [Trans_CatalogUpdateWithWhereUniqueWithoutLanguageInput!]
  updateMany: [Trans_CatalogUpdateManyWithWhereNestedInput!]
  deleteMany: [Trans_CatalogScalarWhereInput!]
  upsert: [Trans_CatalogUpsertWithWhereUniqueWithoutLanguageInput!]
}

input Trans_CatalogUpdateManyWithWhereNestedInput {
  where: Trans_CatalogScalarWhereInput!
  data: Trans_CatalogUpdateManyDataInput!
}

input Trans_CatalogUpdateWithoutCatalogDataInput {
  _version: Int
  name: String
  language: LanguageUpdateOneWithoutTrans_catalogInput
}

input Trans_CatalogUpdateWithoutLanguageDataInput {
  _version: Int
  name: String
  catalog: CatalogUpdateOneWithoutTrans_nameInput
}

input Trans_CatalogUpdateWithWhereUniqueWithoutCatalogInput {
  where: Trans_CatalogWhereUniqueInput!
  data: Trans_CatalogUpdateWithoutCatalogDataInput!
}

input Trans_CatalogUpdateWithWhereUniqueWithoutLanguageInput {
  where: Trans_CatalogWhereUniqueInput!
  data: Trans_CatalogUpdateWithoutLanguageDataInput!
}

input Trans_CatalogUpsertWithWhereUniqueWithoutCatalogInput {
  where: Trans_CatalogWhereUniqueInput!
  update: Trans_CatalogUpdateWithoutCatalogDataInput!
  create: Trans_CatalogCreateWithoutCatalogInput!
}

input Trans_CatalogUpsertWithWhereUniqueWithoutLanguageInput {
  where: Trans_CatalogWhereUniqueInput!
  update: Trans_CatalogUpdateWithoutLanguageDataInput!
  create: Trans_CatalogCreateWithoutLanguageInput!
}

input Trans_CatalogWhereInput {
  """Logical AND on all given filters."""
  AND: [Trans_CatalogWhereInput!]

  """Logical OR on all given filters."""
  OR: [Trans_CatalogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Trans_CatalogWhereInput!]
=======
input Trans_CatalogUpdateWithWhereUniqueWithoutCatalogInput {
  where: Trans_CatalogWhereUniqueInput!
  data: Trans_CatalogUpdateWithoutCatalogDataInput!
}

input Trans_CatalogUpdateWithWhereUniqueWithoutLanguageInput {
  where: Trans_CatalogWhereUniqueInput!
  data: Trans_CatalogUpdateWithoutLanguageDataInput!
}

input Trans_CatalogUpsertWithWhereUniqueWithoutCatalogInput {
  where: Trans_CatalogWhereUniqueInput!
  update: Trans_CatalogUpdateWithoutCatalogDataInput!
  create: Trans_CatalogCreateWithoutCatalogInput!
}

input Trans_CatalogUpsertWithWhereUniqueWithoutLanguageInput {
  where: Trans_CatalogWhereUniqueInput!
  update: Trans_CatalogUpdateWithoutLanguageDataInput!
  create: Trans_CatalogCreateWithoutLanguageInput!
}

input Trans_CatalogWhereInput {
  """Logical AND on all given filters."""
  AND: [Trans_CatalogWhereInput!]

  """Logical OR on all given filters."""
  OR: [Trans_CatalogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Trans_CatalogWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  language: LanguageWhereInput
  catalog: CatalogWhereInput
}

input Trans_CatalogWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  _version: Int!
  name: String!
  profile: String
  profileMedia: Media
  badgeMedias(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address!]
  email: String
  phone: String
  password: String
  securityAnswers(where: SecurityAnswerWhereInput, orderBy: SecurityAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SecurityAnswer!]
  enabled: Boolean
  recoverable: Boolean
  assignment: Assignment
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  _version: Int
  name: String!
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaCreateOneInput
  badgeMedias: MediaCreateManyInput
  addresses: AddressCreateManyInput
  securityAnswers: SecurityAnswerCreateManyWithoutUserInput
  assignment: AssignmentCreateOneWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAssignmentInput {
  create: UserCreateWithoutAssignmentInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSecurityAnswersInput {
  create: UserCreateWithoutSecurityAnswersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAssignmentInput {
  id: ID
  _version: Int
  name: String!
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaCreateOneInput
  badgeMedias: MediaCreateManyInput
  addresses: AddressCreateManyInput
  securityAnswers: SecurityAnswerCreateManyWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
}

input UserCreateWithoutReviewsInput {
  id: ID
  _version: Int
  name: String!
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaCreateOneInput
  badgeMedias: MediaCreateManyInput
  addresses: AddressCreateManyInput
  securityAnswers: SecurityAnswerCreateManyWithoutUserInput
  assignment: AssignmentCreateOneWithoutUserInput
}

input UserCreateWithoutSecurityAnswersInput {
  id: ID
  _version: Int
  name: String!
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaCreateOneInput
  badgeMedias: MediaCreateManyInput
  addresses: AddressCreateManyInput
  assignment: AssignmentCreateOneWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  profile_ASC
  profile_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  password_ASC
  password_DESC
  enabled_ASC
  enabled_DESC
  recoverable_ASC
  recoverable_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  _version: Int!
  name: String!
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
>>>>>>> origin/retailer_implementation
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String
<<<<<<< HEAD

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
=======

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  profile: String

  """All values that are not equal to given value."""
  profile_not: String

  """All values that are contained in given list."""
  profile_in: [String!]

  """All values that are not contained in given list."""
  profile_not_in: [String!]

  """All values less than the given value."""
  profile_lt: String

  """All values less than or equal the given value."""
  profile_lte: String

  """All values greater than the given value."""
  profile_gt: String

  """All values greater than or equal the given value."""
  profile_gte: String

  """All values containing the given string."""
  profile_contains: String

  """All values not containing the given string."""
  profile_not_contains: String

  """All values starting with the given string."""
  profile_starts_with: String

  """All values not starting with the given string."""
  profile_not_starts_with: String

  """All values ending with the given string."""
  profile_ends_with: String

  """All values not ending with the given string."""
  profile_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  recoverable: Boolean

  """All values that are not equal to given value."""
  recoverable_not: Boolean
>>>>>>> origin/retailer_implementation
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
<<<<<<< HEAD
  language: LanguageWhereInput
  catalog: CatalogWhereInput
}

input Trans_CatalogWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  _version: Int!
  name: String!
  profile: String
  profileMedia: Media
  badgeMedias(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address!]
  email: String
  phone: String
  password: String
  securityAnswers(where: SecurityAnswerWhereInput, orderBy: SecurityAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SecurityAnswer!]
  enabled: Boolean
  recoverable: Boolean
  assignment: Assignment
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  _version: Int
  name: String!
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaCreateOneInput
  badgeMedias: MediaCreateManyInput
  addresses: AddressCreateManyInput
  securityAnswers: SecurityAnswerCreateManyWithoutUserInput
  assignment: AssignmentCreateOneWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAssignmentInput {
  create: UserCreateWithoutAssignmentInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSecurityAnswersInput {
  create: UserCreateWithoutSecurityAnswersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAssignmentInput {
  id: ID
  _version: Int
  name: String!
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaCreateOneInput
  badgeMedias: MediaCreateManyInput
  addresses: AddressCreateManyInput
  securityAnswers: SecurityAnswerCreateManyWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
}

input UserCreateWithoutReviewsInput {
  id: ID
  _version: Int
  name: String!
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaCreateOneInput
  badgeMedias: MediaCreateManyInput
  addresses: AddressCreateManyInput
  securityAnswers: SecurityAnswerCreateManyWithoutUserInput
  assignment: AssignmentCreateOneWithoutUserInput
}

input UserCreateWithoutSecurityAnswersInput {
  id: ID
  _version: Int
  name: String!
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaCreateOneInput
  badgeMedias: MediaCreateManyInput
  addresses: AddressCreateManyInput
  assignment: AssignmentCreateOneWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  _version_ASC
  _version_DESC
  name_ASC
  name_DESC
  profile_ASC
  profile_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  password_ASC
  password_DESC
  enabled_ASC
  enabled_DESC
  recoverable_ASC
  recoverable_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  _version: Int!
  name: String!
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
=======
>>>>>>> origin/retailer_implementation
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  _version: Int
  name: String
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaUpdateOneInput
  badgeMedias: MediaUpdateManyInput
  addresses: AddressUpdateManyInput
  securityAnswers: SecurityAnswerUpdateManyWithoutUserInput
  assignment: AssignmentUpdateOneWithoutUserInput
  reviews: ReviewUpdateManyWithoutUserInput
}

input UserUpdateInput {
  _version: Int
  name: String
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaUpdateOneInput
  badgeMedias: MediaUpdateManyInput
  addresses: AddressUpdateManyInput
  securityAnswers: SecurityAnswerUpdateManyWithoutUserInput
  assignment: AssignmentUpdateOneWithoutUserInput
  reviews: ReviewUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  _version: Int
  name: String
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  _version: Int
  name: String
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
}

<<<<<<< HEAD
=======
input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

>>>>>>> origin/retailer_implementation
input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutAssignmentInput {
  create: UserCreateWithoutAssignmentInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutAssignmentDataInput
  upsert: UserUpsertWithoutAssignmentInput
}

input UserUpdateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateOneWithoutSecurityAnswersInput {
  create: UserCreateWithoutSecurityAnswersInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutSecurityAnswersDataInput
  upsert: UserUpsertWithoutSecurityAnswersInput
}

input UserUpdateWithoutAssignmentDataInput {
  _version: Int
  name: String
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaUpdateOneInput
  badgeMedias: MediaUpdateManyInput
  addresses: AddressUpdateManyInput
  securityAnswers: SecurityAnswerUpdateManyWithoutUserInput
  reviews: ReviewUpdateManyWithoutUserInput
}

input UserUpdateWithoutReviewsDataInput {
  _version: Int
  name: String
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaUpdateOneInput
  badgeMedias: MediaUpdateManyInput
  addresses: AddressUpdateManyInput
  securityAnswers: SecurityAnswerUpdateManyWithoutUserInput
  assignment: AssignmentUpdateOneWithoutUserInput
}

input UserUpdateWithoutSecurityAnswersDataInput {
  _version: Int
  name: String
  profile: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  recoverable: Boolean
  profileMedia: MediaUpdateOneInput
  badgeMedias: MediaUpdateManyInput
  addresses: AddressUpdateManyInput
  assignment: AssignmentUpdateOneWithoutUserInput
  reviews: ReviewUpdateManyWithoutUserInput
}

<<<<<<< HEAD
=======
input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

>>>>>>> origin/retailer_implementation
input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutAssignmentInput {
  update: UserUpdateWithoutAssignmentDataInput!
  create: UserCreateWithoutAssignmentInput!
}

input UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput!
  create: UserCreateWithoutReviewsInput!
}

input UserUpsertWithoutSecurityAnswersInput {
  update: UserUpdateWithoutSecurityAnswersDataInput!
  create: UserCreateWithoutSecurityAnswersInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _version: Int

  """All values that are not equal to given value."""
  _version_not: Int

  """All values that are contained in given list."""
  _version_in: [Int!]

  """All values that are not contained in given list."""
  _version_not_in: [Int!]

  """All values less than the given value."""
  _version_lt: Int

  """All values less than or equal the given value."""
  _version_lte: Int

  """All values greater than the given value."""
  _version_gt: Int

  """All values greater than or equal the given value."""
  _version_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  profile: String

  """All values that are not equal to given value."""
  profile_not: String

  """All values that are contained in given list."""
  profile_in: [String!]

  """All values that are not contained in given list."""
  profile_not_in: [String!]

  """All values less than the given value."""
  profile_lt: String

  """All values less than or equal the given value."""
  profile_lte: String

  """All values greater than the given value."""
  profile_gt: String

  """All values greater than or equal the given value."""
  profile_gte: String

  """All values containing the given string."""
  profile_contains: String

  """All values not containing the given string."""
  profile_not_contains: String

  """All values starting with the given string."""
  profile_starts_with: String

  """All values not starting with the given string."""
  profile_not_starts_with: String

  """All values ending with the given string."""
  profile_ends_with: String

  """All values not ending with the given string."""
  profile_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  recoverable: Boolean

  """All values that are not equal to given value."""
  recoverable_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  profileMedia: MediaWhereInput
  badgeMedias_every: MediaWhereInput
  badgeMedias_some: MediaWhereInput
  badgeMedias_none: MediaWhereInput
  addresses_every: AddressWhereInput
  addresses_some: AddressWhereInput
  addresses_none: AddressWhereInput
  securityAnswers_every: SecurityAnswerWhereInput
  securityAnswers_some: SecurityAnswerWhereInput
  securityAnswers_none: SecurityAnswerWhereInput
  assignment: AssignmentWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  phone: String
}

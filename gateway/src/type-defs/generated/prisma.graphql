# source: http://localhost:4466/foxiny/dev
# timestamp: Mon Jan 28 2019 23:22:59 GMT+0700 (Indochina Time)

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteUser(where: UserWhereUniqueInput!): User
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  user(where: UserWhereUniqueInput!): User
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  questionA: String
  answerA: String
  questionB: String
  answerB: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  questionA: String
  answerA: String
  questionB: String
  answerB: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  password_ASC
  password_DESC
  enabled_ASC
  enabled_DESC
  questionA_ASC
  questionA_DESC
  answerA_ASC
  answerA_DESC
  questionB_ASC
  questionB_DESC
  answerB_ASC
  answerB_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  questionA: String
  answerA: String
  questionB: String
  answerB: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  questionA: String
  answerA: String
  questionB: String
  answerB: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  phone: String
  password: String
  enabled: Boolean
  questionA: String
  answerA: String
  questionB: String
  answerB: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  enabled: Boolean

  """All values that are not equal to given value."""
  enabled_not: Boolean
  questionA: String

  """All values that are not equal to given value."""
  questionA_not: String

  """All values that are contained in given list."""
  questionA_in: [String!]

  """All values that are not contained in given list."""
  questionA_not_in: [String!]

  """All values less than the given value."""
  questionA_lt: String

  """All values less than or equal the given value."""
  questionA_lte: String

  """All values greater than the given value."""
  questionA_gt: String

  """All values greater than or equal the given value."""
  questionA_gte: String

  """All values containing the given string."""
  questionA_contains: String

  """All values not containing the given string."""
  questionA_not_contains: String

  """All values starting with the given string."""
  questionA_starts_with: String

  """All values not starting with the given string."""
  questionA_not_starts_with: String

  """All values ending with the given string."""
  questionA_ends_with: String

  """All values not ending with the given string."""
  questionA_not_ends_with: String
  answerA: String

  """All values that are not equal to given value."""
  answerA_not: String

  """All values that are contained in given list."""
  answerA_in: [String!]

  """All values that are not contained in given list."""
  answerA_not_in: [String!]

  """All values less than the given value."""
  answerA_lt: String

  """All values less than or equal the given value."""
  answerA_lte: String

  """All values greater than the given value."""
  answerA_gt: String

  """All values greater than or equal the given value."""
  answerA_gte: String

  """All values containing the given string."""
  answerA_contains: String

  """All values not containing the given string."""
  answerA_not_contains: String

  """All values starting with the given string."""
  answerA_starts_with: String

  """All values not starting with the given string."""
  answerA_not_starts_with: String

  """All values ending with the given string."""
  answerA_ends_with: String

  """All values not ending with the given string."""
  answerA_not_ends_with: String
  questionB: String

  """All values that are not equal to given value."""
  questionB_not: String

  """All values that are contained in given list."""
  questionB_in: [String!]

  """All values that are not contained in given list."""
  questionB_not_in: [String!]

  """All values less than the given value."""
  questionB_lt: String

  """All values less than or equal the given value."""
  questionB_lte: String

  """All values greater than the given value."""
  questionB_gt: String

  """All values greater than or equal the given value."""
  questionB_gte: String

  """All values containing the given string."""
  questionB_contains: String

  """All values not containing the given string."""
  questionB_not_contains: String

  """All values starting with the given string."""
  questionB_starts_with: String

  """All values not starting with the given string."""
  questionB_not_starts_with: String

  """All values ending with the given string."""
  questionB_ends_with: String

  """All values not ending with the given string."""
  questionB_not_ends_with: String
  answerB: String

  """All values that are not equal to given value."""
  answerB_not: String

  """All values that are contained in given list."""
  answerB_in: [String!]

  """All values that are not contained in given list."""
  answerB_not_in: [String!]

  """All values less than the given value."""
  answerB_lt: String

  """All values less than or equal the given value."""
  answerB_lte: String

  """All values greater than the given value."""
  answerB_gt: String

  """All values greater than or equal the given value."""
  answerB_gte: String

  """All values containing the given string."""
  answerB_contains: String

  """All values not containing the given string."""
  answerB_not_contains: String

  """All values starting with the given string."""
  answerB_starts_with: String

  """All values not starting with the given string."""
  answerB_not_starts_with: String

  """All values ending with the given string."""
  answerB_ends_with: String

  """All values not ending with the given string."""
  answerB_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input UserWhereUniqueInput {
  id: ID
  email: String
  phone: String
}

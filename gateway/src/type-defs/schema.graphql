type Query {
  users(query: String): [User!]!
  me: User!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  resendConfirmation(userId: String!): User!
  confirmUser(data: ConfirmUserInput): User!
  login(data: LoginUserInput!): LoginPayload!
  logout(all: Boolean = false): LogoutPayload!
  updateUser(data: UpdateUserInput!): User!
  deleteUser: User!
}

type User {
  id: ID!

  name: String!

  # In the database, sensitive fields (email, phone, password, etc.) are required, but here, they are not since we need to return null in case of non-authentication
  email: String
  phone: String
  password: String

  enabled: Boolean!
  createdAt: String!
  updatedAt: String!
}

input CreateUserInput {
  name: String!
  email: String
  phone: String
  password: String!
}

input ConfirmUserInput {
  userId: ID!
  code: String!
}

input LoginUserInput {
  email: String
  phone: String
  password: String!
}

type LoginPayload {
  token: String!
  user: User!
}

type LogoutPayload {
  token: String!
  userId: String!
}

input UpdateUserInput {
  name: String
  email: String
  phone: String
  password: String
  currentPassword: String
}

type Query {
  users(query: String): [User!]!
  me: User!
  meSecurityInfo: [SecurityInfo]! # get all security questions and answer of logged-in user
  securityQuestions(query: String): [SecurityQuestion]! # get all security questions
}

# user must pick three of many security question from database
# user does not need to create their own security questions
type Mutation {
  createUser(data: CreateUserInput!): User!
  resendConfirmation(userId: String!): User!
  confirmUser(data: ConfirmUserInput): User!
  login(data: LoginUserInput!): AuthPayload!
  logout(all: Boolean = false): AuthPayload!
  updateUser(data: UpdateUserInput!): User!
  deleteUser: User!

  requestResetPwd(data: RequestResetPwdInput!): SecPayload!
  resetPassword(data: ResetPasswordInput!): Boolean!
}

type User {
  id: ID!

  name: String!

  # In the database, sensitive fields (email, phone, password, etc.) are required, but here, they are not since we need to return null in case of non-authentication
  email: String
  phone: String
  password: String

  enabled: Boolean!

  # TODO: recoverable @default:false

  createdAt: String!
  updatedAt: String!
}

type SecurityQuestion {
  id: ID!
  question: String!

  createdAt: String!
  updatedAt: String!
}

type SecurityInfo {
  questionId: ID!
  question: String!
  answerId: ID!
  answer: String!
}

input CreateUserInput {
  name: String!
  email: String
  phone: String
  password: String!

  securityInfo: [QueAnsPairInput]!
}

input QueAnsPairInput {
  questionId: String!
  answer: String!
}

input ConfirmUserInput {
  userId: ID!
  code: String!
}

input LoginUserInput {
  email: String
  phone: String
  password: String!
}

type AuthPayload {
  userId: ID!
  token: String!
}

input UpdateUserInput {
  name: String
  email: String
  phone: String

  password: String
  currentPassword: String

  securityInfo: [QueAnsPairInput]
}

type SecPayload {
  token: String!
  securityQuestions: [SecurityQuestion]!
}

input RequestResetPwdInput {
  email: String
  phone: String
}

input ResetPasswordInput {
  securityInfo: [QueAnsPairInput]!
  password: String!
}
